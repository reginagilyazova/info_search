Изучение Spring Framework 100 через практику Активные туториалы и язык разметки KML Проект KciTasks beta kciray Spring Framework традиционно считается одним из самых и при этом Однако существующие подходы к его изучению крайне неэффективны Я хотел бы предложить вам принципиально к изучению спринга который заключается в использовании концепции Они представляют из себя сбалансированный набор инструкций которые поддерживают внимание разработчика и проводят его через те или иные аспекты фреймворка В результате мы получаем но БЕЗ ступоров проблем непонимания вида а где это использовать а также без скучного и пассивного чтения теории Совсем В рамках статьи представлено 5 учебных задачек которые покрывают на 50 от необходимых для сертификации знаний Главная задача статьи массово протестировать саму идею а также вместе с вами разработать большое количество уникальных задачек по всем темам Для начала немного о себе Меня зовут Ярослав и я работаю на позиции Middle Java Developer в компании EPAM Systems Одним из моих хобби является создание обучающих систем диплом бакалавра диплом магистра За последние 4 года я перепробовал более сотни самых разнообразных подходов к обучению различных областей знаний включая Java Spring и создал более двадцати программ прототипов для проверки этих подходов Большинство из них не принесло какой либо супер пользы и поэтому я продолжаю работу в этом направлении Эта статья посвящена одной из моих идей которая может взлететь Надо е массово протестировать в этом и заключается задача данной статьи Забегая впер д рекомендую вам зайти и посмотреть веб страницу с задачками чтобы понимать о ч м ид т речь Я перфекционист и хочу чтобы обучение было близким к идеальному В мо м понимании это такое обучение которое не вызывает негативных эмоций затягивает и приносит удовольствие К сожалению изучение многих современных и высокооплачиваемых технологий вызывает традиционно считается одним из самых сложных в изучении и его изучение происходит крайне неэффективно В изучении фреймворков есть 2 крайности Первая когда человек работает в компании и просто делает те задачи которые да т заказчик но по нему идут большинство разработчиков Логично делать только то что просят особенно когда за это платят не так ли Однако обучение на работе лишь кажется эффективным Большинство задач которые решают современные программисты заключается в сопровождении систем Вс уже написано до нас нужно лишь фиксить баги править конфиги и дорабатывать систему напильником В этом нет ничего плохого но вот обучение самим технологиям происходит крайне медленно Конечно рано или поздно вам прид тся раскопать документацию спринга и вы запомните вс необходимое но на это Может быть стоит попробовать сначала накрутить знания и опыт а потом уже брать практические задачки посложнее и за существенно больший оклад разумеется С Java это точно работает можно за 2 3 месяца изучить Java SE и это могут засчитывать за год другой опыта Много знакомых с универа кто так делал Вторая крайность это Это быстрый но ОЧЕНЬ тяж лый способ Он заключается в том что человек продвигается по книге или курсу а потом пытается применить это на практике и как то запомнить И если с Java SE такой подход ещ кое как работает то со спрингом вс глухо и туго Даже в самых лучших книгах зачастую не объясняется где применять те или иные особенности приходится догонять это самому добытой таким тяж лым трудом Одна из проблем обучения это отсутствие эффективного повторения Если вы изучали спринг классическим способом например читали книгу и пробовали код на практике то на это были потрачены огромные усилия но БЕЗ возможности восстановления Простое перечитывание книги через 1 2 года не верн т вам забытой информации которую вы получили через практику параллельную с прочтением Возникает некая дилемма как же сделать так чтобы было много практики но при этом программист направлялся в нужные области Итак мы пришли к выводу что крайности в обучении это плохо Давайте подумаем как можно оптимизировать процесс Рассмотрим более подробно почему же это вызывает трудности у большинства людей Для начала выберем материалы по которым стоит обучаться Главное требование к ним ограниченный набор информации только то что нужно для сертификации собеседования практики а также последовательная и логически взаимосвязанная подача этой информации По данным критериям наилучшим образом подходят книги и т д Они очень хорошо продуманы и оформлены на мой взгляд куда приятнее и подробнее чем видеокурсы по спрингу на udemy Казалось бы читай себе вникай пробуй экспериментируй и будут знания Но не тут то было Дело в том что сам Какой бы ни была книга идеальной она оста тся книгой Она по своей природе не предназначена для обучения программированию Программист в конечном итоге должен набивать хорошие привычки по тех или иных технологий фреймворка Чтобы преодолеть е приходится вложить немалые усилия Скажу честно я написал довольно много веб приложений на Spring однако вс равно испытывал множество трудностей при прочтении глав книги Спринг в действии На данный момент я детально разобрал около 30 из обеих книг и готов к сертификации Spring 5 примерно на 60 Аналогичные проблемы я наблюдал при изучении Android SDK в 2014 году Разгадка тут довольно простая каждый фреймворк вводит какие то свои новые концепции которые довольно трудно понять и начать думать через них если использовать традиционные способы обучения Процесс связывания представленной в книге информации с привычками очень тяж лый и не эффективный Он часто вызывает множество негативных эмоций когда что то не работает или не запускается заставляет много гуглить и решать проблемы Ведь опытные разработчики прекрасно знают о таких путях Для них это что то очевидное Но тут возникает проблема в форме передачи знаний Как мы уже выяснили книги не подходят для этой цели Ещ одна проблема на которую хотелось бы обратить внимание это Даже если мы преодолеем все трудности и широко прокачаем знания спринга со временем они будут угасать не считая того небольшого процента который получилось связать с текущими задачами Человеку свойственно забывать и с этим ничего не поделать Единственное что мы можем сделать это попробовать оптимизировать повторения Когда я учился в бакалавриате я возлагал большие надежды на теорию интервального повторения и хранение знаний в виде флеш карт Однако флеш карты слишком независимы друг от друга не подходят для хранения связанных знаний о спринге Даже для изучения Java их эффективность средняя Да и они тоже не естественны ведь программист должен Я многие годы ломал голову над тем как сделать обучение 100 завязанным на практику Сейчас я коротко расскажу о вариантах которые были перепробованы Для начала я пытался найти набор которые бы кроме задач давали бы технические наводки разработать такой то REST Api используя такие то классы Ничего дельного я не наш л и потратил кучу времени Да я видел отдельные авторские курсы по некоторым частям спринга но полного покрытия сертификации нигде не собрать Да и книжная проблема этих туториалов оста тся хоть и некоторые авторы пытались сделать пошаговые руководства они вс равно имеют недостатки P S Если у вас есть что то вроде Учебных ТЗ по спрингу обязательно отправьте их мне на kciray8 gmail com Это ещ больнее чем гуглить баги Я не хочу читать я хочу кодить а потом уже самостоятельно через эксперименты и гугл догонять вс остальное А уже потом и главу перечитывать пересиливая себя и собирая оставшиеся крупицы знаний Собственно я так и изучал спринг Не с начала главы унылое введение а с середины пытаясь за что то ухватиться и экспериментировать вокруг этого Я даже развил ряд особых методик вокруг этого метода но там вс равно остаются некоторые фундаментальные проблемы А именно проблема ступоров никуда не девается Она вызывает по прежнему много боли хоть это уже более естественно и приближенно к практике в реальных проектах прид тся много таких ступоров решать прокачать навык будет полезно Да и проблема повторения информации вс равно оста тся И хочется сделать что то более приближенное к идеальному Вдруг моя новая методика окажется полезным большому количеству людей и изменит мир И в конце 2017 года мне пришла в голову такая идея да так что захотелось е сразу реализовать и изначально я делал очень большие ставки на успех Давайте подумаем как происходит обучение по классическому большей частью пассивному туториалу включая гайды на spring io Самый большой их недостаток который я просто терпеть не могу это линейность Многие авторы вываливают большие куски кода которые нужно копипастить к себе Было бы правильнее начинать с простого примера минимально возможной демонстрации которую можно запустить и поэкспериментировать и потом накручивать на него разные навороты Но нет ведь Каждый автор считает нужным накрутить информации в 2 4 раза больше чем нужно по кускам это разбирать и только потом запускать К примеру откроем руководство по поднятию SOAP сервиса на спринге недавно на работе понадобилось Они тут и spring boot прикрутили и wsdl4j с процессом генерации Java классов с использованием gradle и целый in memory репозиторий CountryRepository хотя простой строки Hello world мне хватило бы И только в самом конце объяснили как с помощью curl запустить всю эту систему Нет я конечно вс понимаю авторы хотели дать наглядный пример вс в одном и разобрать его Но с точки зрения информации такой подход не годится Вы любите читать скучный разбор и копипастить куски кода каждый по пол страницы Я это терпеть не могу Хочу вот получать опыт экспериментальным пут м и вс тут Что если сделать некое подобие виртуального учителя который просто да т маленькие указания типа то и это а в случае если программист ошибся или забыл учитель просто да т фрагмент кода По своей сути кси таски и являются таковыми Суть их в том что у нас есть маленький набор инструкций к каждой из которых есть ответ и он под спойлером скрыт Разницу между ними и обычным туториалом можно увидеть на следующем графике Перед тем как продолжить разбор активных туториалов хотелось бы рассказать об одной важной концепции на которой они базируются Эту концепцию вы можете использовать совместно с любой методикой обучения но почему то о ней редко пишут или упоминают где то Так вот суть е в том что Никаких start spring io каждый день заходите в и на н м базируете ВСЕ ваши проекты включая веб И все maven зависимости тоже забиваете по новому Благодаря этому вы запомните зависимости между спринг модулями зачем нужен каждый из них и т д На практике это очень сильно пригождается когда есть какие то проблемы с зависимостями Любите ли вы XML Авторы обеих книг по Spring соглашаются что рано или поздно XML станет пережитком прошлого Однако они сами приводят большинство решений в двух вариантах XML Аннотации Я не любил XML до тех пор пока не устроился в большую компанию Сейчас это просто часть работы Слишком много готовых решений сделано которые просто пронизаны XML и переписать их без него потратить огромные деньги и получить несравнимо мало Никто не будет этого делать Поэтому Если правильно обучаться по описанной в статье методике то XML не вызывает проблем а напротив помогает взглянуть с другой стороны на некоторые решения и лучше их запомнить Написание XML кода с автозаполнениями и подсказками с помощью IDE также приятно как и написание Java кода Каждая инструкция в активном туториале должна быть выполнимой БЕЗ копипасты Современные IDE позволяют умножить е на ноль Да даже со всеми его приблудами даже вс можно сделать внутри IDE Это чем бездумно копировать код Как я уже сказал я хочу сделать обучение приятным и это одно из проявлений в кси таске заставляет вас немножко подумать и что то вспомнить В этом и заключается активность такого туториала Этот процесс намного приятнее чем чтение или копирование кода Тут нужно поддерживать баланс инструкция не должна быть слишком тупой иначе это будет не так приятно и не должна быть слишком сложной что повлечет за собой большие куски кода и проблемы аналогичные с туториалами Я нигде не видел подобных разработок хоть и повидал много разных систем обучения Одна из причин по которым активные туториалы до сих пор никто не распространил отсутствие формата для их хранения Первую версию KciTasks я сделал как надстройку на HTML и это было просто ужас как неудобно Потом я сделал свой небольшой язык разметки который отличным образом подходит для тасок и компилируется в HTML И происходит это прямо во время загрузки веб страницы Вот примеры В интернете существует холивар о том нужны ли сертификаты Об этом можно написать отдельную статью но в рамках этой статьи я просто напишу Месяц назад вышел Study Guide по Spring 5 и поэтому имеет смысл ориентироваться на него Для нас это может служить в качестве или некоторого стандартного набора который спрашивают на собеседованиях и который может быть полезен для ваших проектов По каждой теме нужно сделать 6 8 уникальных задачек которые затрагивают требуемый объ м знаний и подают информацию с разных точек зрения например созда тся разными способами с помощью билдеров вручную с использованием пропертей через аннотации или XML автоматически через Boot и т д Потренировавшись программист над жно запомнит что же такое и как он применяется вместо того чтобы как делают многие Кроме того темы часто взаимно пересекаются Container и AOP используются в Spring Data Это позволяет очень хорошо углубить основы основ Не смотря на максимальную автоматизацию процесса через язык разметки Особенно если их делать качественно демонстрируя вс в простой форме и с правильной перспективы Например мне потребовалось около 10 часов чтобы разработать задачку по уровням изоляции в транзакциях Казалось бы нужно всего лишь продемонстрировать разницу между 4 мя уровнями запустив транзакции параллельно Но не тут то было Для H2 и MySQL не видна разница между некоторыми уровнями и они по разному обрабатывают конфликтные ситуации одни БД возвращают старые копии данных другие вводят транзацию в режим ожидания И только в DerbyDB наглядно можно увидеть разницу между всеми уровнями Все авторы книг такие умные копируют теорию а вот показать е на практике полноценный пример так и не получилось найти пришлось самому выводить Суть моего плана в том чтобы по Spring 5 Все что требуется от вас это отправить мне на почту kml файлик с задачкой и zip архив проекта Задачки будут доступны бесплатно и без регистрации для всех через Или вы можете сделать если нужно что то доработать в самом движке Я верю что вместе мы сможем создать новый принцип обучения и нести его в массы Также хочу обратить внимание на просьбу поддержать проект в виде доната в шапке сайта баннер Очень хотелось бы получить компенсацию по затраченным усилиям а сообщество Java разработчиков далеко не бедное По каждой теме спринга можно придумать множество уникальных тасок Например вы можете давать указания по разработке некоторого через спринг а потом получать данные с него через и выводить их в консоль Получается 2 в 1 некоторое замкнутое кольцо Вообще простор для творчества тут очень большой нужно лишь время и желание И чем больше уникальных задачек тем лучше Если вы хотите добавить что то сво необычное впер д Многогранность обучения очень важна Нужно показать одни и те же знания с большого количества разных ракурсов тогда они хорошо запомнятся Главное соблюдайте баланс о котором говорилось выше каждая инструкция требует что то сделать но не слишком много Вместе мы сможем конвертировать знания из книг в форму тасок и сделать большое дело P S Если кто то из читателей проходил экзамен и или официальный курс от pivotal напишите мне на kciray8 gmail com Я вижу два пути по которым вы можете использовать KciTasks Первый использовать е для углубл нного спринга На мой взгляд это должно быть эффективно Вы просто выполняете инструкцию за инструкцией сверяясь с решением и корректируя себя По началу вы будете много подглядывать туда но это нормально На следующий день попробуйте подглядывать как можно меньше и вс делать самому Все таски рассчитаны на то чтобы быть сделанными без разворачивания спойлеров СОВСЕМ Вам надо к этому прийти Таски самодостаточны просто вчитвайтесь в инструкцию и решение к ней и Второй путь использовать KciTasks для Когда вы изучаете какой либо фрейм или язык программирования по книге курсу вы вкладываете много усилий И пусть они не пропадут даром вложите весь полученный опыт в таски чтобы потом через полгода можно было пройти по проторенной дорожке и вс вспомнить Оба путя не протестированы beta же поэтому жду ваших отзывов И чем подробнее тем лучше Ведь все люди разные восприятие разное и надо посмотреть реакцию сообщества Надеюсь что статья окажется полезной
