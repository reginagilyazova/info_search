Разработка игры под Android на Python на базе Kivy От А до Я подводные камни и неочевидные решения Часть 1 s_a_p Некоторое время тому назад я решил попробовать написать что то на Python под Android Такой странный для многих выбор обусловлен тем что я люблю Python и люблю Android а ещ люблю делать необычное ну хорошо В качестве фреймворка был выбран фактически безальтернативный вариант но он мне очень понравился Однако по нему не так уж много информации нет документация отличная но иногда е недостаточно особенно на русском языке а некоторые вещи хоть и можно реализовать но их то ли никто раньше не делал то ли не сч л нужным поделиться информацией Ну а я сч л И этот пост тому результатом Под катом я расскажу обо всех этапах разработки о том как развивалась простая идея и как для этого приходилось искать новые возможности о возникших подводных камнях и багах о неочевидных решениях и устаревшей документации Цель описать в одном тексте основные пункты чтобы человеку решившему написать что то немного сложнее игры Pong из официального туториала не приходилось перерывать официальный форум поддержки и StackOverflow и тратить часы на то что делается за пару минут если знаешь как то вс зависит от того любите ли вы Python и Android и интересно ли вам в этом разобраться Если нет проще забить А если да то начать нужно с и уже упомянутого официального это даст базовое представление о фреймворке и его возможностях Я же не буду останавливаться на столь тривиальных вещах тем более для понимания базовых принципов туториал отлично подходит и сразу пойду дальше Будем считать что это было вступление Для начала нужна была идея Мне хотелось что то достаточно простое чтобы оценить возможности фреймворка но и достаточно интересное и оригинальное чтобы не программировать ради программирования это здорово но когда это не единственная цель это ещ лучше Я неплохо проектирую интерфейсы но не умею рисовать поэтому игра должна была быть простая графически или вообще текстовая И тут так уж сложилось что у меня есть заброшенный сайт с цитатами с которого я когда то начинал свой путь в web разработке я о н м даже писал на Хабре много лет назад Поэтому идея возникла такая игра викторина Угадай цитату В русскоязычном Google Play ничего подобного не было а в англоязычном была пара поделок низкого качества с сотней скачиваний Почти сразу же стало понятно что просто так отгадывать цитату за цитатой скучно Так появились первые фишки которые в итоге и определили итоговую игру В первую очередь это были тематические пакеты то есть пакеты цитат объедин нные одной темой или автором и баллы которые начисляются за отгадывание цитат и прохождение пакетов и тратятся на подсказки и разблокировку новых тем а также статистика достижения и избранное Первые проблемы начались с первого же экрана Один мой друг любит отвечать на такие вопросы да На самом деле некоторые вещи в Kivy действительно работают медленно например создание виджетов Но это не значит что это дело нельзя оптимизировать Об этом я и расскажу Так как цитаты и темы хранятся в БД то само собой кнопки с пакетами генерируются динамически И вот тут то я обнаружил что происходит это очень медленно примерно полсекунды на список из 20 кнопок Возможно это и не очень много при загрузке приложения но при переходе на главный экран из других внутренних экранов приложения непозволительно много Здесь стоит отметить что кнопка к тому моменту уже представляла собой на самом деле набор из нескольких элементов визуально составляющих одну кнопку Первым моим побуждением было тем или иным образом закешировать их и действительно опыт показал что если создать все виджеты заранее и сохранить их как свойство объекта StartScreen то вс кроме первой генерации работает достаточно быстро Однако же данные в кнопках нужно периодически обновлять хотя бы то же количество отгаданных цитат Да и загрузку новых пакетов я уже тогда планировал Конечно не проблема реализовать и это но я решил не изобретать велосипед и подумать Сначала стоило убедиться что проблема именно в создании виджетов поэтому я за несколько минут набросал простенькое приложение на два экрана в каждом из которых генерировался набор строк из лейбла и чекбокса количеством 50 шт Запустил на сво м стареньком Moto G gen3 и получил И далее в том же духе Поиск по этому вопросу ничего не дал поэтому я обратился к разработчикам И получил ответ Создание виджетов относительно медленное особенно в зависимости от того что они содержат Для создания больших списков лучше использовать RecycleView Здесь хочу пояснить почему я вообще описываю этот момент ведь описание RecycleView Да действительно есть но мало кто способен изучить и запомнить всю документацию перед тем как начн т разработку и найти нужный инструмент бывает непросто особенно если он нигде не описан в контексте решения конкретной проблемы Теперь же он описан Более чем в 100 раз быстрее Впечатляет не правда ли В завершение следует упомянуть что RecycleView не панацея Он не подходит если размер элемента зависит от содержимого например Label размер которого меняется в зависимости от количества текста Следующая проблема с которой я столкнулся не поддавалась решению так долго что я уже малодушно подумывал счесть данный фреймворк непригодным и забить Проблема была с сервисами в Android так называется процессы выполняющиеся в фоновом режиме Создать сервис не так уж и сложно немного сбивает с толку устаревшая документация но и только Однако в большинстве случаев много ли толку от сервиса который во первых не запускается автоматически при загрузке телефона а во вторых не перезапускается если выбросить приложение свайпом из диспетчера задач По моему нет На тот момент по этой теме была всего лишь одна статья в но она хоть и называлась Starting Kivy service on bootup на самом деле всего лишь рассказывала как при загрузке телефона запустить но не его сервис да такое тоже бывает полезно но значительно реже как по мне Ту статью я в итоге переписал а здесь расскажу подробности Допустим у нас есть примитивный сервис который всего то и делает что периодически выводит в лог строку этим мы заранее исключаем баги которые могут возникать из за особенностей самого сервиса Из приложения мы запускаем его методом основного класса при помощи Если APK при запуске приложения сервис будет стартовать но этого недостаточно Для начала попробуем сделать так чтобы он перезапускался при остановке приложения например при снятии его из диспетчера задач Конечно можно было бы использовать но это уже не совсем фоновое выполнение задачи Для него потребуется как минимум уведомление это не всегда подходит В данном случае идеально подходит флаг но мы же пишем на Python что делает задачу не столь тривиальной по крайней мере при помощи PyJnius она уже не решается Честно говоря она вообще решается достаточно криво поскольку я пока не готов становиться одним из разработчиков благодаря которому вс это счастье вообще работает А изменения нужно вносить именно в код Python4Android А конкретно нам нужен файл buildozer android platform build dists guessthequote src org kivy android PythonService java в котором в функции startType мы меняем флаг START_NOT_STICKY на START_STICKY Ура сервис рестартится Вс Конечно нет Потому что он тут же валится с ошибкой Проблема в функции onStartCommand Intent intent int flags int startId поскольку после перезапуска intent у нас null Что ж перепишем и е Увы Проблема в том что функция nativeStart не получает нужных Extras К сожалению два из них мне пришлось захардкодить В итоге выглядит это так Теперь вс Перейд м к автозапуску сервиса при запуске телефона После предыдущей проблемы это будет уже проще Для начала понадобится разрешение RECEIVE_BOOT_COMPLETED это просто А затем BroadcastReceiver его прид тся добавить в AndroidManifest вручную но это тоже не проблема Проблема в том что в н м писать Решение для запуска приложения не сервиса выглядит так Сначала я попытался просто переписать его для сервиса Ага разогнался Думаю вам уже понятно что проблема в тех самых Extras Мне же тогда об этом было узнать неоткуда Но не буду тянуть рабочий код выглядит так Фух В целом для локализации можно использовать или же поступить ещ проще создать папку lang в ней по файлу на каждый язык например en py и ru py определить там все слова и фразы в виде переменных констант и далее подключить нужный модуль Примерно так Статическая переменная использована для того чтобы языковые константы было удобно использовать в kv файле Это в общем то довольно тривиально а основное о ч м я хотел рассказать в аспекте локализации как задать константы в res values strings xml и отдельных локализациях Зачем это нужно Как минимум чтобы задать название приложения на разных языках а также чтобы прописать такие константы как app_id для сервисов Google Play и facebook_app_id для сервисов Facebook По умолчанию P4A генерирует strings xml следующего содержания При этом название приложения и цвет фона экрана загрузки можно задать в buildozer spec На первый взгляд этого достаточно но это только в том случае если приложение одноязычное и дополнительные строковые константы не нужны а это как то минималистично Конечно никто не запрещает вручную прописать вс необходимое но при следующей сборке оно затр тся Также можно вручную создать папки с локализациями например values ru но они при новых сборках они не будут обновляться Поэтому лучше ещ раз подправить P4A а именно файл buildozer android platform build dists guessthequote build py следующим образом Ну а все необходимые вам строковые константы нужно прописать в файле buildozer android platform build dists guessthequote templates strings tmpl xml Если статья покажется сообществу интересной во второй части я опишу самые интересные вещи покупки в приложении интеграцию сервисов Google Play Games и Facebook SDK и подготовку release version с последующей публикацией в Google Play а также подготовлю проект на Github с модулями для реализации описанных задач Если вам интересны ещ какие то подробности напишите в комментариях постараюсь по возможности осветить
