Погружение в разработку на Ethereum Часть 4 деплой и дебаг в truffle ganache infura rubyruby В мы рассмотрели разработанное приложение на Ethereum Но обошли стороной вопрос как происходит процесс разработки Ясно что это не просто написание кода который сразу работает Большую часть времени придется потратить на то чтобы доводить код который почти готов до рабочего состояния Деплой тестирование отладка все это в той или иной мере уже затрагивалось здесь например в этих неплохих статьях список не полный В этой статье мы дадим небольшой обзор и возможно в чем то повторимся но постараемся сфокусироваться на тех моментах которые нам показались важными или недосказанными Плюс за последнее время некоторые штуки изменились и огромное количество инструкций оказалось устаревшим Постараемся немного подправить ситуацию Для тестирования и деплоя смарт контрактов мы пользуемся он скрывает часть низкоуровневой работы за абстракциями что очень удобно Описанная версия 4 0 6 Это не единственный фреймворк есть еще и но по ним ничего сказать не можем не приходилось работать Для инициализации проекта надо выполнить команду выполнится в текущей папке поэтому предварительно создайте папку проекта и перейдите в нее Создается только базовая структура из папок и В и вы можете увидеть смарт контракт который отвечает за логику деплоя в терминах трюфеля миграции А логика примерно такая в папке вы складываете скрипты и называете их по шаблону Самое важное в названии это индекс который идет в начале после этого можно добавлять любое описание которое нужно только для читабельности Индекс же используется для выполнения миграций в порядке нумерации Смарт контракт используется для того чтобы сохранять какие из скриптов миграций уже выполнились Так что если в процессе разработки добавлять новые контракты и новую логику деплоя то предыдущий успешный прогресс передеплоивать не надо Лично мы этим не пользуемся вместо этого имеем фиксированное количество миграций редактируем и запускаем их каждый раз заново с помощью Вы можете вручную создавать файлы контрактов миграций и тестов но в truffle есть и специальные команды Можете проверить что у вас создались соответствующие файлы Но содержимое совсем базовое поэтому пока в этой фиче нет особого преимущества по сравнению с созданием тех же файлов вручную В более ранних версиях инициализация создавала сразу небольшой пример Metacoin и ConvertLib Чтобы в последних версиях увидеть этот и другие примеры можно воспользоваться фичей называемой Truffle Boxes Боксы созданы для того чтобы получить полноценный пример проекта Truffle и его взаимодействия с разными web средствами например ReactJS перечислен список боксов как официальных так и созданных сообществом Создайте директорию для нового проекта и перейдите в нее Затем выполним команду получите ту структуру проекта которая в старых версиях создавалась по умолчанию после Это пример с базовым токеном Metacoin который можно пересылать от пользователя к пользователю и с помощью библиотеки ConvertLib смотреть баланс в эфире при фиксированном курсе обмена Кроме того что тут показано как создавать и использовать смарт контракт и библиотеку здесь есть еще и пример тестов на JavaScript и Solidity подробнее о написании тестов можете почитать обратите внимание что там как раз рассматривается более старая версия Truffle Давайте бегло рассмотрим как можно в тестовом режиме собрать и проверить этот проект Для начала запустим development консоль Увидите подобный текст Что делает эта команда Она поднимает тестовое окружение и дает доступ к нему через консоль Тестовое окружение это то что вы могли видеть в более старых руководствах под названием TestRPC На самом деле это оно и есть просто команда Truffle взяла его под свое управление и переименовала в Но об этом напишем далее а пока перейдем к консоли Выполним полный цикл команд для компиляции миграции и тестирования Можно повызывать методы задеплоенных контрактов вручную например так Как видите все выполняется мгновенно и можно отследить изменения отправили 3000 с основного адреса на другой видим что баланс уменьшился Выходить из консоли командой Truffle development это режим с собственной тестовой нодой Для подключения к реальной сети или тестнету используется команда которая полностью аналогична но не поднимает тестовое окружение Чтобы продемонстрировать это не обязательно запускать можно воспользоваться например уже упомянутой заменившей собой TestRPC Запустим командой Есть еще и Принципиального отличия нет но в этой версии можно сразу видеть всю информацию события и балансы Может быть очень удобно в некоторых ситуациях Можете использовать любую из этих версий Но если вы просто сделали и еще никак не меняли конфигурационные файлы то подключиться не получится Поэтому добавим в следующее Вы можете увидеть еще и Это то же самое но для Windows Лишний для вашей системы файл можно удалить Этот конфиг даст возможность трюфелю подключаться к любой сети доступной на localhost 8545 Это значения по умолчанию для geth и ganache cli Если вы используете GUI версию Ganache зайдите в настройки и при необходимости измените порт и перезапустите кнопка save and restart Если застряли на окне с логотипом то скорее всего у вас на этом же порту уже что то запущено geth ganache cli testrpc или что то еще Теперь можно подключиться выполняем команду И можно попробовать например сделать В GUI версии вы сразу сможете увидеть изменение баланса аккаунта с которого прошел деплой если зайдете во вкладку blocks то увидите смайненные блоки и сколько газа расходовалось на транзакции в них Щелкнув по каждому из них можно получить еще более подробную информацию Вкладка transactions таким же образом покажет вам все прошедшие транзакции В консольной версии будет та же информация но в виде стены логов Используйте что считаете удобнее Кстати если вы читали другие инструкции по этой же теме то наверное уже знаете что не обязательно вызывать консоль чтобы компилировать и деплоить можно просто вызвать например И это будет полным аналогом того что мы сделали выше Такой же принцип и для всех других команд трюфеля Полный список команд Ни в каком языке вы не обойдетесь лишь core функциональностью Изобретать велосипеды непродуктивно и опасно а со смарт контрактами где вы рискуете чужими деньгами это особенно критично Поэтому возникает вопрос где взять эту уже проверенную дополнительную функциональность В Truffle для этого есть система пакетов которые доступны в двух вариантах установки не считая обычного копипаста с помощью npm и с помощью ethpm До этого на примере Metacoin мы видели простейший токен Токены используются довольно часто даже Crypto Kitties это по сути токены хоть и оригинального стандарта Основной стандарт токенов сейчас это Чтобы соответствовать стандарту токен должен реализовывать набор функций которые могут обеспечивать универсальное и безопасное использование в кошельках биржах и т д Тут очень полезен оказывается пакет набор библиотек для часто используемых паттернов в смарт контрактах В например уже было описано использование этого пакета Рассмотрим не использование а способы установки и подключения Для начала тот который описан в инструкции на гитхабе проекта В корне проекта truffle выполните После чего в папке у вас появится из которого в смарт контракте можно подключать требуемые файлы например ownable строчкой Но существует еще один способ установки пакетов который разработан специально для пакетов в Ethereum EthPM Пакеты хранятся на IPFS Список пакетов доступен по Он интегрирован в трюфель и чтобы установить тот же самый zeppelin solidity можно выполнить Добавится папка подключать ее содержимое так же как и из папки Но если вы сравните версии которые установлены тем и другим способом то обнаружите что они разные И по крайней в данный момент версия npm новее на момент написания 1 6 0 против 1 3 0 в EthPm Так что хоть идеологически EthPM и интереснее но пока наверное лучше устанавливать пакеты с помощью npm Обычно когда при выполнении смарт контракта происходит ошибка сообщения оказываются очень неинформативными Для примера сделаем контракт с намеренной ошибкой В файле contracts FaultyContract sol добавьте недостающий код Как видите здесь неизбежно деление на 0 В файле xxxx сгенерированный id может быть разный добавьте недостающий код для деплоя Откроем develop консоль скомплируем и задеплоем наш контракт Получим контракт и вызовем проблемную функцию Как видите не очень информативно неизвестно в каком месте ошибка и что значит В Truffle с версии 4 доступна команда пока бета позволяющая заново перевыполнить транзакцию построчно Но для этого нужно получить хеш транзакции а в ошибке даже его нет Чтобы увидеть хеш запустите еще один экземпляр с флагом Эта команда позволяет видеть логи того что происходит в основной develop консоли и в том числе там можно найти хеш транзакций Запустим функцию еще раз В окне с логом будет что то похожее на Возьмем хеш транзакции и передадим его в команду debug Вам должны вывестись подсказки дальнейших команд Чтобы понять хотя бы в какой строчке ошибка можно использовать команду step next Каждый шаг будет отображаться несколько строк из кода и подчеркиваться часть которая в данный момент исполняется Есть возможность перейти на совсем низкий уровень и по очереди выполнять каждый opcode команды виртуальной машины Ethereum и смотреть состояние стека Сделаем еще один шаг и попробуем вывести состояние стека Видим что последними в стеке лежат наши x и y 16 и 4 Это конечно не сильно удобный способ и нужно разбираться с опкодами и как они выполняются в виртуальной машине Ethereum Если интересно можете глянуть например H 2 Instruction Set Но у нас задача просто найти строчку с ошибкой Продолжим выполнять пока не получим что то подобное Тут хотя бы можно увидеть что ошибка произошла где то в части деления И можно смотреть на стек и инструкции если разбираетесь Это к сожалению все что предлагает трюфель по части дебага Ну хоть что то В этом плане для одиночных контрактов и несложных связей можем посоветовать в например автор пользуется ей для деплоя там есть практически полноценный дебаг с возможностью видеть значения переменных на каждом шаге Интерфейс интуитивный смотрите как уже рассмотренный пример можно будет отладить там В консоли внизу видим ошибку нажимаем дебаг И можем прокручивать туда сюда и видеть значения переменных в человеческом виде В прошлой статье мы рассматривали плагин Metamask который позволяет подключаться к блокчейну без использования локального синхронизированного Ethereum клиента Это возможно благодаря сервису Вы тоже можете получить доступ к нодам Infura и подключаться к ним через truffle Для этого во первых нужно в письме вам придут ссылки с персональными токенами для доступа Давайте попробуем задеплоить пример Metacoin на Ropsten без локальной ноды Создаем тестовый проект как обычно Далее нам понадобится дополнительный пакет с помощью которого Truffle может подписывать транзакции Добавим провайдер в настройки трюфеля таким кодом Пришлось задать gas и gasPrice потому что по крайней мере у нас значения по умолчанию не подошли Не забудьте вставить токен из письма а еще придумайте свою мнемонику из 12 разных а не как в примере слов она используется для генерации аккаунтов и если кто то ей завладеет то сможет сгенерировать те же самые аккаунты и воспользоваться ими без вашего ведома Например если вы попробуете использовать мнемонику в этой статье то сможете воспользоваться тем эфиром 0 3 который мы туда переслали если его не израсходует кто то еще В этом конфиге также оставлен выбирать между этими двумя сетями можно запуская truffle с соответствующим названием после флага Перед тем как вызывать требуется пополнить баланс сгенерированного аккаунта Узнаем адрес и баланс командами Перешлите на ваш аккаунт немного Ropsten эфира для того чтобы можно было заплатить за деплой После того как он дошел можно проверять предыдущей командой можно попробовать выполнить Результат должен быть таким Видим хеш транзакций можно проверить что они действительно попали на Ropsten через etherscan io например Надеемся вы узнали что то новое из этой статьи или хотя бы освежили знания Что касается следующей статьи то как показала практика сложно сделать реальный полезный проект без связи с внешним миром через Oraclize и IPFS Об этом и планируем написать Погружение в разработку на Ethereum
