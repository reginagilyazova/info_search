Анимации в Android по полочкам Часть 2 Комплексные анимации juztoss Часть 4 Анимации переходов Часть 5 Библиотеки для работы с анимацией Привед нные в предыдущей части инструменты были относительно низкоуровневыми и в Android есть куда более простые способы добиться красивых анимаций не прибегая к прямому рисованию графики или изменению свойств объектов В этой части мы рассмотрим как можно минимумом усилий получить красивые анимации Вс что нам нужно сделать чтобы добиться анимации как на гифке выше это добавить флаг в наш ViewGroup в xml Теперь когда мы удаляем или добавляем элемент в наш контейнер либо изменяем его свойства они автоматически будут анимированы Ладно я немного слукавил когда говорил что чтобы получить анимацию как на гифке выше нужно всего лишь установить флаг Добавление на самом деле устанавливает нашей ViewGroup Но LayoutTransition по умолчанию анимирует только изменение видимости объектов в лэйауте Поэтому если мы хотим изменять свойства объекта например ширину и высоту нужно включить эту опцию отдельно Теперь точно вс Если захочется как то кастомизировать это поведение то у есть метод позволяющий задать свою собственную анимацию изменений Ну самые хардкорные ребята всегда могут написать свой Применение Базовая анимация изменений объектов на сцене Достоинства Минимальные трудозатраты Недостатки Слабая кастомизация Начиная с API 19 в Android появился новый фреймворк позволяющий создавать сложные анимации с участием большого количества элементов и минимумом кода Есть два основных варианта его использования Чтобы создать анимацию необходимо перед внесением изменений в наши View вызвать TransitionManager beginDelayedTransition ViewGroup и передать в него ViewGroup который мы хотим анимировать Фрэймворк запомнит состояние View и запустит анимацию на следующем кадре Создание анимации в этом случае сводится к созданию двух похожих xml отвечающих за начальное и конечное состояние ваших анимаций Соответственно id объектов в xml должны совпадать чтобы дать фреймворку возможность найти соответствие На самом деле тоже созда т сцены одну в момент вызова а вторую на следующем кадре После чего запускает анимацию между ними Кастомизация в Transitions framework достигается за сч т передачи объекта Transition вторым параметром По умолчанию используется так что код ниже будет работать абсолютно так же как и код выше или И если заглянуть внутрь можно заметить что анимации будут происходить в в следующем порядке анимируются исчезающие объекты анимируются изменения размеров анимируются появляющиеся объекты Применение Анимация большого количества объектов Достоинства Минимальные трудозатраты Доступная кастомизация Все примеры можно
