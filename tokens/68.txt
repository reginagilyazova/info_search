Плата BLE400 и разработка под nRF51822 shadwork Для разработки под микроконтроллер nRF51822 существует несколько комплектов от Nordic Semiconductor все они достаточно дороги зато обеспечивают возможность удобной работы без возни с программаторами При этом у китайских производителей можно обнаружить платы облегчающие отладку контроллеров за смешные деньги Статья посвящена работе с клоном платы от Waveshare которая прода тся под названием Плата предназначена для использования совместно с модулями NRF51822 представляющие собой распаянный чип с антенной и парой кварцевых резонаторов Стоимость комплекта из платы и модуля составляет около 20 долларов BLE400 содержит на борту USB порт и преобразователь USB UART на базе чипа CP2102 с выведенными сигналами RX TX CTS и RTS На уровне схемы она частично совместима с PCA10001 отладочной платой от Nordic пара светодиодов и две кнопки подключены к тем же портам любителям помигать светодиодом это немного упростит жизнь К сожалению плата не умеет выполнять роль программатора nRF51822 хотя прошивка позволяющая работать с загрузчиком типа Arduino в сети есть Бегло перечислю что же именно встроено в плату частично это будет перевод документации Изначально в модуль прошит код для работы с от Nordic Semiconductor для проверки его работоспособности этого достаточно Подключаем плату к ПК устанавливаем драйвера для CP2102 и подключаемся к плате при помощи терминала Я воспользовался PuTTY параметры порта скорость 38400 дата бит 8 Стоповый бит один управление потоком программное Подключаемся в терминале вбиваем английский символ Y или y получаем в ответ команду Start контроллер работает Теперь он доступен в списке BLE совместимых устройств на телефоне с именем Nordic_UART Установив приложение для можно поиграться с передачей символов через виртуальный Bluetooth терминал и протестировать эмуляцию UART Переходим к программированию Нам вс таки понадобится программатор оригинал от Segger будет немножко дорог но благодаря автолюбителям на рынке достаточно клонов J link ARM v8 стоят они около 15 долларов и для наших целей их более чем достаточно Будем считать что драйвера на программатор например J Link Software v4 52b уже установлены Подключаемся к плате стандартным JTAG кабелем от программатора или четырьмя проводами достаточно соединить VTref GND SWDIO и SWCLK Для проверки подключения запустим JLink exe и получим информацию о установленном чипе Нам понадобится следующее ПО Для получения Lite версии Keil MDK ARM необходима регистрация остальное доступно для скачивания так nRFgo Studio версии 1 21 2 у меня так и не запустилась под Windows 10 но младшая версия 1 15 1 работает Последняя версия SDK с поддержкой платы pca10001 это версия 6 скачиваем по После установки SDK в папке куда установлена среда Keil появится каталог содержащий все необходимые файлы Примеры рассчитаны на использование Keil версии 4 файл проекта имеет расширение uvproj в отличии от Keil 5 где расширение uvprojx Собственно Keil 4 мы используем чтобы не запутаться в файлах конфигурации и совместимости примеров Программировать плату можно не только через консоль J Link Commander но и через nRFgo Studio через не же мы можем очистить чип или залить SoftDevice для работы с Bluetooth Делается это из меню nRF51 Programming В чипе уже залито ядро BLE стека Очистить его можно через пункт меню Erase all Следующая задача помигать светодиодами заботливо распаянными на плате Как уже упоминалось ранее светодиоды и кнопки совместимы с платой pca10001 от Nordic значит используем пример оттуда открываем в папке с Keil4 файл проекта blinky uvproj Собираем проект нажав F7 и прошиваем через меню Flash Download У меня по умолчанию не прошивалось из за выбранной по умолчанию скорости заливки JTAG равной 2000 kHz Исправить можно из меню Option for target Debug Setting После замены на 100 kHz вс успешно заработало Светодиоды LED0 и LED1 успешно перемигиваются микроконтроллер работает Если загрузить вс же не получается можно попробовать прошить HEX из из папки с использованием nRFgo Studio или из консоли программатора J Link Но сначала стоит убедить что в настройках Keil выбран программатор J Link Светодиоды это замечательно но нам вс же нужен Bluetooth пример для работы лежит в папке Это реализация iBeacon для нас он интересен работой с программным BLE стеком от Nordic Пример рассчитан на версию стека s110 самую простую по возможностям но для демонстрации работоспособности этого вполне достаточно Ядро необходимо скачать отдельно и версий его достаточно много при этом версия заголовков должна коррелировать с версией ядра Скачать ядра можно по в разделе SoftDevices Изначально вместе с SDK идут заголовочные файлы для версии 7 0 0 но у меня эта версия ядра не стартовала Теоретически работать должна любая версия стека доступны для скачивания версии v6 v7 v8 С примерами из SDK седьмая и восьмая версия стека у меня не заработали остановился на 6 2 1 Скачиваем распаковываем в удобную для вас папку например Cores Очищаем уже существующую папку и копируем в не заголовочные файлы из папки include распакованного ядра SoftDevice необходимо прошить для этого воспользуемся nRFgo Studio выбираем из меню Device Manager пункт nRF51 Programming и убеждаемся что программатор не отвалился В закладке Program SoftDevice выбираем файл с ядром Если файл правильного формата внизу будет указанна занимаемая мкость для этой версии SoftDevice равная 80кб Жм м кнопку Program Карта памяти устройства теперь имеет следующий вид Оперативной памяти стало меньше на 8кб а первые 80 килобайт постоянной памяти заняло ядро Меняем Target на цель со стеком s110 выбираем из меню nrf51822_xxaa_s110 256К Для сборки примера с мигающим светодиодом при установленном SoftCore необходимо ввести коррективы в карту памяти делается это из меню Options for Target Target Базовый адрес меняется на а свободная память стартует с адреса 0x20002000 Так как при заливке скетча мы не должны затереть ядро меняем настройки программатора Делается это из меню Options for Target Debug кнопка Setting Собираем проект и заливаем его в контроллер если ядро установилось корректно мы получим те же мигающие светодиоды Пора заливать прошивку имитирующую iBeacon открываем проект из папки Меняем карту памяти по аналогии с мигающим светодиодом собираем и заливаем в устройство Если все прошло успешно LED0 будет светиться это индикатор что пакеты рассылаются Устанавливаем на устройство Android или iOS приложение умеющее видеть iBeacon я скачал UUID устройства совпадает с константой APP_BEACON_UUID в исходном коде значит это наш маячок В принципе этой информации достаточно для быстрого и весьма недорогого старта работы с BLE В минусах это поддержка устаревшего Keil 4 и нестабильная работа программатора на частотах 100 kHz и выше Если среда разработки выдает ошибку загрузки уменьшайте скорость доступа до 50 kHz или даже менее Иногда программатор отваливается и вернуть его к жизни можно только запуском JLink exe возможно это связано с тем что он является клоном оригинала
