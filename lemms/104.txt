расширение и использование linux crypto api henadzimatuts криптографический в введа наш с версия 2 5 45 ядро с тот пора обрасти весь популярный и не только международный стандарт этот криптография доступный и в основное использоваться различный подсистема ядро в и др воспользоваться функция из пространство пользователь также возможно через интерфейс в который начинать с версия 2 6 38 ядро ввести семейство предоставлять доступ к криптография ядро из код однако существующий функционал иногда недостаточно такой образ появляться необходимость расширение новый алгоритм так примерно два год назад перед я стоялый задача встраивание национальный в республика беларусь криптография в реализация ядро версия 3 13 на тот момент я никогда не заниматься программирование в и это быть мой один опыт написание модуль ядро с чем я очень помочь книга куда сложный быть разбираться с сам в упомянуть книга этот вопрос не освещаться в принцип а в хоть и дать достаточно подробный описание архитектура практически нет информация о внедрение новый алгоритм в свой поиск в журнал хакер я наткнуться на замечательный популярно рассказывать о тот но опять же там нет ни слово о он расширение в конец конец за необходимый я знание я обратиться к первоисточник к код ядро и решить поставить задача с тот пора уже прошлый некторой время и только сейчас актуализировать свой знание я взяться за написание это текст он о на конкретный пример мы посмотреть какой образ в можно встроить произвольный алгоритм и как к он обратиться как из так и из я уверенный что этот материал быть крайне полезный разработчик столкнуться с схожий проблема но надеяться что и случайный читатель смочь найти здесь для себя что то интересный p s компилировать исходник мой программа фрагмент который быть встречаться ниже доступный на там же исходник этот статья весь код быть написать и протестировать под десктопной ubuntu 16 04 lts с ядро версия 4 13 0 32 generic некоторый интерфейс который я использовать в модуль быть ввести в 4 версия ядро поэтому на ядро 3 они точно скомпилироваться прежде чем приступить к написание код поговорить немного о тот как вс устроить в впрочем до я о это подробно рассказать в я же в свой очередь привести лишь выжимка который должный быть достаточно для понимание материал сразу оговориться далее речь пойда том преемущественный о симметричный шифрование иной вид криптопреобразование в целое работать схожий образ но многочисленный нюанс очень сильно бы вс усложнить итак из введение мы уже знать что криптографический подсистема ядро включать множество реализация криптографический алгоритм и предоставлять к он интерфейс доступный пользователь здесь и далее под пользователь и разработчик иметься ввиду соответственно и в термин алгоритм называться преобразование так различный тип преобразование иметь собственный под а дескриптор хэндлама преобразование как правило присваиваться имя например здесь это хэндло некоторый преобразование в дать случай шифрование блок дать по алгоритм жизненный цикл хэндло сводиться к тр метр этап независимо от использовать алгоритм через хэндло тип доступный реализация базовый функция дать а соответсвовать он предоставлять метод установка ключ и зашифрование расшифрование блок в качество самостоятельный он не представлять большой интерес для пользователь однако с точка зрение разработчик он важный посклька с он помощь реализовать ключевой концепция так называть шаблон шаблон использоваться в связка с базовый функция и реализовать при создание хэндло сантиметр пример выше требовать алгоритм зад тся строка имя алгоритм этот строка иметь следующий семантика кроме тот там где это применимый шаблон мочь быть зав рнут в другой шаблон при это использование шаблон без базовый алгоритм невозможно привести несколько пример применение симметричный блочный шифр в какой либо режим осуществляести через отдельный стоить отметить что сейчас в ядро существовать три такой однако два из они объявить устаревший а актуальный являться этот предоставлять пользователь метод установка ключ синхропосылка и зашифрование расшифрование дать произвольный длина он так же являться асинхронный метод шифрование максимально быстро возвращать управление вызывающий в то время как запрос на выполнение криптооперация и функция обратный вызов использовать для оповещение пользователь о завершение операция передаваться системный планировщик быть подробно рассмотреть когда мы перейд метр к создание модуль ядро тестировать встроить мы алгоритм помимо два назвать в существовать под для для разработчик наличие шаблон в означать что встраивать новый алгоритм симметричный шифрование достаточно реализовать лишь базовый функция шифрование блок который затем мочь быть инкапсулировать в соответствующий шаблон для получение требовать режим действительно если взглянуть на исходный код включить в ядро алгоритм то можно увидеть что там реализовать только базовый функция однако если мы такой же образ реализовать функция шифрование блок классический заверна метр е в режим гаммирование шаблон а после это получить алгоритм проверить на тестовый последовательность то мы получить неверный результат вс дело в тот что режим гаммирование описать в отличаться от алгоритм гаммирование реализовать в шаблон то же самый касаться и другой национальный алгоритм с который я иметь дело в такой случай необходимый встраивать полноценный блочный шифр в нужный режим как это сделать например в оптимизировать реализация алгоритм поздний мы рассмотреть оба вариант встраивание пожалуй это вс что я хотеть сказать по повод архитектура заинтересовать в более подробный описание следовать обратиться к а мой изложение должный быть достаточно чтобы мы мочь двигаться далёкий итак мы готовый к тот чтобы начать встраивать в какой нибыть новый алгоритм с тот лишь оговорка что у мы пока нет алгоритм который можно быть бы встроить для этот статья я не стать утруждать себя реализация настоящий криптоалгоритм поскольку едва ли смочь бы сделать это качественно оставить это криптограф с другой сторона делать шифр пустышка быть бы не так интересно тем более что такой в ядро уже есть такой образ мы пойда метр на компромисс и написать реализация элементарный алгоритм шифрование где размер блок и ключ для это алгоритм принять равный 128 бит 16 байт мочь приступать к реализация определимый криптоконтекст наш алгоритм и функция создание уничтожение контекст добавлять метод установка ключ и зашифрование расшифрование блок учитывать обратимость операция метод использоваться для зашифрование и расшифрование одновременно шифрование блок это хорошо но стать ещ хороший если мы реализовать какой нибыть из режим блочный шифрование например где продолжить работа реализовать метод зашифрование и расшифрование в режим сцепление блок шифр вот это уже интересный теперь пользоваться дать реализация мы мочь подготовить тестовый последовательность на который в дальнейший проверить реализация это же алгоритм в ядро под спойлер значение который использовать я исходник реализация алгоритм и программа тестирование доступный а мы практически готовый к тот чтобы перейти в но перед это я хотеть обратить ваш внимание на один важный момент дело в тот что многие известный алгоритм шифрование не предполагать обработка последний блок входной дать так например реализация алгоритм возвращать признак ошибка если размер входной дать не кратный размер блок тогда как белорусский предусматривать такой обработка мой алгоритм также е предусматривать ключ и текущий значение синхропосылка усекаться до размер неполный блок этот факт сыграть свой роль немного поздний пока стоить просто иметь это в вид действие переноситься в пространство ядро программирование в ядро несколько отличаться от программирование в пространство пользователь и ввиду сложность отладка являться достаточно трудо мким процесс однако работать над это материал я не ставить перед себя задача познакомить читатель с основа программирование модуль ядро ведь о это и без я предостаточно написать в тот число и здесь на и поэтому если читатель совершенно не знак с написание модуль то я бы рекомендовать сперва просмотреть тот материал который я прива литр выше либо поискать самостоятельно уверять это не заём том много время а с тот кто готовый идти далёкий мы приступать к глубокий изучение итак у мы есть алгоритм и мы хотеть встроить он в ядро но с что же начать разумеется с документация к сожаление раздел посвящий нный да том лишь очень общий знание о это процесс но по крайний мера помогать сориентироваться в правильный направление конкретно мы узный метр о существование функция отвечать за регистрация и разрегистрация алгоритм в ядро давать разбираться этот функция возвращать отрицательный значение в случай ошибка и 0 в случай успешный завершение а раз регистрировать ые алгоритм ы описываться структура заглянуть в е определение к счастие этот структура очень хорошо задокументировать и мы не прид тся гадать о значение тот или иной поль недокумментировать остаться поль предназначить для внутренний использование и не должный заполняться вроде бы ничто сложный для начало мы хотеть встроить реализация алгоритм шифрование блок поэтому взглянуть ещ на структура из союз тут вс ещ простой и как я кажется не нуждаться в разъяснение теперь мы готовый к тот чтобы посмотреть как вс это работать на практика кстати обратить внимание на то что сигнатура функция в структура аналогичный сигнатура функция из наш алгоритм из 2 часть писать модуль ядро определять криптоконтекст и функция установка ключ в соответствие с сигнатура в наш алгоритм криптоконтекст передаваться функция напрямую здесь же функция принимать хэндло алгоритм из который затем контекст извлекаться с помощь функция так же здесь мы проверять длина передать ключ если длина некорректный то мы выставлять соответствующий флаг и возвращать код 22 теперь определять функция шифрование блок в соответствие с здесь ничто новое так же как и в оригинальный мы не быть определять дополнительный функция для расшифровка а указатель просто проинициализировать функция наконец определять экземпляр структура заполнять е и вызывать функция регистрация и разрегистрация алгоритм соответсвенный после загрузка и перед выгрузка модуль учитывать вс вышесказанный здесь не должный возникать никакой вопрос если скомпилировать и загрузить такой модуль выполнить в терминал команда то в выводить список зарегистрировать алгоритм можно отыскать и свой неплохо а но это только начать и сейчас я по идея должный быть перейти к написание модуль тестировать наш алгоритм но вс же я решить не смешивать вопрос встраивание и использование поэтому тестироваться мы быть поздний а в следующий часть мы посмотреть как можно встроить реализация наш алгоритм в режим сцепление блок шифр забег немного впереть далее внимательный читатель помнить о существование шаблон так вот реализовать в прошлый часть шифрование блок мы запросто мочь обернуть этот реализация в шаблон и получть реализация наш алгоритм в режим сцепление блок шифр но протестировать е на мой последовательность вызов шифрование в режим верна том мы код ошибка 22 и тут самый время вспомнить что я говорить по повод обработка неполный блок входной дать и поль дело в тот что реализация режим ядро понятие не иметь о тот как обрабатывать неполный блок более тот оборачивать наш алгоритм в режим ядро регистрировать новый алгоритм размер блок который равный размер блок базовый алгоритм после вызов апишной функция зашифрование алгоритм размер входной дать проверяться на кратность размер блок и если они не кратный функция возвращать размер тестовый вектор для шифрование в режим 40 байт умышленно выбрать не кратное размер блок по мой мнение если стандарт шифрование предусматриваться обработка неполный блок а реализация это не делать то такой реализация едва ли пройда том проверка на соответствие стандарт даже если реализация да том корректный результат когда условие кратность выполняться в дать случай это так поэтому сейчас мы сделать полный реализация режим сцепление блок шифр для наш алгоритм когда я заниматься это 2 год назад я встраивать алгоритм с расч тот на они использование через устаревший ныне хотя уже тогда предпочтительный считаться который на сегодняшний день так же устарелый этот реализация мы быть делать под актуальный изучить документация и реализация другой алгоритм в ядро свой ос я обнаружить что объявление и регистрация такой алгоритм существенно отличаться от тот как это делаться ранний и осуществляться при помощь часть не отраж нной в документация но иметь под рука образец разобраться что к что оказаться не так уж и сложно итак у мы здесь несколько иной функция для регистрация разрегистрация алгоритм заглянуть в определение структура в отличие от документация в заголовочный файл этот структура задокументировать так этот структура содержимый экземпляр уже знакомый мы описывать алгоритм здесь же функция и по свой назначение аналогичный таковой из новый на данный момент являться поль и ещ один неопознанный структура мы видеть в аргумент функция и структура содержимый дать необходимый для выполнение операция симметричный шифрование указатель на входной выходной дать и синхропосылка хэндло криптопреобразование и так далее напрямую обращаться к поль этот структура нет необходимость поскольку для работа с она существовать отдельный но вс же в она есть один особенность о который обязательно нужно упомянуть на самый дело этот особенность касаться в целое дело в тот что весь под шифрование дать произвольный длина работать с входной выходной дать не через привычный указатель на байтовый массив как быть в шифрование блок а через структура тип вот например функция зашифрование из структура так же содержимый поль и для входной и выходной дать соответственно посмотреть на основной элемент структура экземпляр этот структура можно проинициализировать указатель на некоторый дать например при помощь вызов функция цитировать такой образ криптографический подсистема работать напрямую с страница память но это ещ не вс посмотреть на следующий пример здесь и указывать на дать в память такой образ при помощь специальный вспомогательный структура в один вызов способный обработать цепочка ов содержимый рассеянный дать такой подход быть заложить в и обусловить нужда подсистема на самый дело и связанный с он ядро являться фундаментальный вещь при организиация ввод вывод с прямая доступ к память они позволять эффективно осуществлять операция такой ввод вывод над непрерывный в виртуальный но рассеянный по физический память буфер дать но впрочем теперь мочь переходить к реализация как и в прошлый раз начинать с определение функция установка ключ здесь вс просто для режим мы быть работать с тем же тип криптоконтекст что и в случай шифрование блок поэтому мы просто переиспользовать функция установка ключ реализовать ранее писать функция зашифрование и расшифрование здесь мы так сказать прогуливаться по входной данные при помощь вспомогательный структура и связанный с она функция сперва экземпляр инициализироваться вызов а после это функция пересчитваета для мы указатель на очередной непрерывный порция входной выходной дать и длина содержаться в цепочка ов завершать заполнение экземпляр структура и регистрация разрегистрация алгоритм обратить внимание на значение поль это небольшой хитрость необходимый для тот чтобы вызов отдавать мы последний неполный блок если такой есть скомпилировать и загрузить модуль находить в наш алгоритм готовый модуль исходник регистрировать в ядро два новый алгоритм алгоритм шифрование блок и реализация в режим сцепление блок шифр на это по встраивание у я вс для дальнейший изучение это вопрос мочь лишь порекомендовать исходный код реализация который уже есть в ядро а мы переходить к следующий часть к сожаление я не смочь придумать более остроумный заголовок для этот часть чем просто тестирование да и в конец конец это ведь именно то чем мы быть здесь заниматься хотя непосредственно тест это лишь форма за который стоить быть это раздел показать в целое как для это мы написать и разбер метр ещ один модуль и пользовательский программа выполнять серия тест над наш встроить в ядро алгоритм начн метр с модуль ядро для задание тестовый последовательность введа метр структура значение полый этот структура тривиальный входной дать длина подаваться на вход алгоритм шифрование блок либо шифрование в режим сцепление блок шифр с ключ и где это необходимый синхропосылка получить резульатат криптопреобразование сравниваться с эталонный значение значение использоваться для обозначение окончание массив структура ниже функция тестирование алгоритм шифрование блок этот функция крайне простой в она использоваться вполне очевидный вызов из сперва при помощь функция мы созд метр хэндло криптографический преобразование с имя после это устанавливать ключ шифрование и в зависимость от текущий тест выполнять операция зашифрование либо расшифрование блок в завершение уничтожать хэндло и сравнивать результат выполнение криптооперация с эталон с функция тестирование алгоритм в режим cbc вс гораздо интересный самый главный сейчас мы работать с отсюда несколько иной подход к организация процесс смотреть на функция вот с это момент подробный поскольку мы иметь дело с неблокировать то мы мочь оказаться в ситуация когда вызов функция шифрование верна том управление ранний чем дать быть непосредственно обработать в это случай для оповещение о завершение криптооперация быть вызана функция обратный вызов предоставить пользователь этот функция и передаваемый она произвольный пользовательский дать устанавливаться с помощь вызов в наш пример пользовательский дать иметь тип а функция обратный вызов определить следующий образ структура и связанный с она функция служить для синхронизация выполнение функция и непосредственно шифрование в конец конец мы необходимый дождаться окончание обработка и только после это возвращать управление из разобраться с это возвращаться к место в на который мы остановиться код после a в пояснение не нуждаться на это вс иходный код данный модуль доступный скомпилировать и загрузить этот модуль при условие что загрузить модуль с сам алгоритм в терминал вы получить что то вроде а в журнал ядро появиться такой запись кстати в есть подобный пример использование но он недостаточно подробно прокомментировать ещ пример в упомянуть я в самый начало статья из хакер но там описать ныне устаревший и вс таки это уже что то и заинтересовать читатель есть где разгуляться пришлый время посмотреть как можно воспользоваться криптография ядро в пользовательский пространство насч том это в документация есть отдельный и в принцип он прочтение оказываться достаточно для тот чтобы начать применять этот возможность в свой программа но это при условие что вы уже знакомый с интерфейс сокет в за пример документация отсылать к библиотека написать один из разработчик и соавтор самый документация для общение с ядро этот библиотека использовать интерфейс она заворачивать низкоуровневый работа с в удобный пользовательский если в свой приложение у вы есть необходимость в криптография ядро то я бы рекомендовать использовать именно этот библиотека тем более что она до сей пора поддерживаться текущий версия 1 0 3 но мы с вы проделать весь этот путь не ради тот чтобы просто воспользоваться библиотека поэтому далёкий мы посмотреть какой образ код пользовательский пространство на самый низок уровень не ниже системный вызов взаимодействовать с свой пример я сделать на основа плагин из он я также рекомендовать к ознакомление итак поехать в целое в тестовый программа я использовать тот же архитектура что и в тестовый модула однако здесь не быть тестирование алгоритм шифрование блок поскольку существующий интерфейс позволять обратиться лишь к полноценный блочный шифр такой образ у мы ост тся только функция логика этот функция не должный вызвать вопрос мы как и несколько раз до это созд метр хэндло устанавливать ключ шифровать дать уничтожать хэндло и сравнивать резульат с эталон вс интересный здесь скрытый за структура и связанный с она функция смотреть далёкий ида метр по код один параметр системный вызов определять семейство протокол который мочь быть использовать для общение через открытый сокет семейство предназначить для взаимодействие с константа обычно определить в заголовочный файл если это не так то е можно определить самостоятельно конкретный алгоритм зад тся заполненить экземпляр структура указатель на этот экземпляр перёд тся второе аргумент системный вызов структура определить следующий образ этот структура нужный лишь для подавление предупреждение компилятор на самый же дело е реальный вид определяться семейство протокол для это мы заполнять три поль если запрашивать алгоритм не зарегистрировать в ядро то верна том 1 а в переменный быть помещ наш код ошибка такой образ результат выполнение функция являться открытый сокет через который можно взаимодействовать с конкретный алгоритм в ядро функция уничтожение хэндло тривиальный и я не быть здесь е приводить теперь посмотреть на функция установка ключ ключ устанавливаться при помощь системный вызов дробный о параметр это вызов можно узнать на соответствующий я лишь отметить что константа и обычно определить в файл и соответсвенный если на ваш система это не так то они можно определить самостоятельно наконец переходить к самый главное функция относительно велик и я описать е лишь в общий черта здесь есть много структура наверняка знакомый тем кто заниматься сетевой код но даже если это не о вы общий логика происходить должный быть понятный в целое е можно разделить на 3 блок управлять информация включать в себя тип выполнять операция зашифрование или расшифрование и синхропосылка опять же отметить что приведа нный константа должный быть определить в файл и если это не так то они можно определить следующий образ вот и вс исходник этот тестовый программа доступный скомпилировать и запустить е вы увидеть следующий сообщение но это при условие что загрузить наш модуль ядро изначально я планировать разбить этот статья на два часть но начать работать оказаться что объ метр материал который я планировать на два часть значительно маленький тот что я подготовить для один и вс же там быть довольно интересный вещий о который я хотеть бы рассказать поэтому после заключение я в вид своеобразный заметка кратко рассказать о этот вещь а по основной часть у я вс надеяться этот статья оказаться для вы полезный или по крайний мера увлекательный чтение конечно это далеко не полный руководство по в принцип по статья можно написать о каждый из существующий под при это в некоторый из они я ещ даже не заглядывать но с другой сторона это должный быть достаточно для тот чтобы продолжить изучение самостоятельно если в это есть необходимость быть рад если вы помочь я сделать этот материал хороший сво мнение замечание и предложение оставлять здесь в комментарий отравлять я на или в личный сообщение ещ хороший если свой исправление вы быть предлагать я прямо на спасибо за внимание я столько раз говорить о тот что алгоритм в ядро можно заворачивать в шаблон но так и не рассказать это сделать самый время это исправить на самый дело вс очень просто допустить в ядро зарегистрировать наш тогда что бы воспользоваться это алгоритм в шаблонный режим нужно сделать следующий вызов для для другой аналогично в результат мы получать хэндло алгоритм зав рнутого в стандартный режим сцепление блок шифр но постоять сказать вы а что если наш модуль регистрировать реализация с имя хорошть вопрос ответить я в этот ситуация ядро верна том мы алгоритм из наш модуль и вс же мы мочь получить шаблонный реализация когда ядро искать алгоритм по имя оно поступать следующий образ на третье шаг ядро перебирать зарегистрировать шаблон и алгоритм на каждый итерация такой перебор ядро пытаться собрать новый алгоритм из очередной шаблон и алгоритм например для шаблон если имя наш алгоритм то ядро создать и зарегистрировать алгоритм с имя в три часть когда мы изучать структура я упоминать о тот что выбираться для каждый реализация и по он также можно запросить алгоритм для конкретно это случай это означать что если отлично от то шаблонный реализация можно получить вызов кстати мой тестовый программа и модуль выглядеть так как они выглядеть не просто потому что я так захотеться разумеется в есть модуль отвечать за тестирование и свой я сделать по он образ и подобие этот модуль называться и с он есть один проблема дело в тот что точка вход и тестирование скорость находиться прямо в а вот реализация тест известный ответ расположить отдельно в файл в процесс сборка ядро чаща всего компилироваться статично в ядро и лишь экспортировать в глобальный пространство имя наш функция отвечать за тестирование а на мой система тестирование вовсе отключить в конфигурация ядро из сказать следовать что просто так добавить свой тест в не получиться поэтому я немного подшаманить исходник и вынести они из дерево ядро и написать компилировать они в один модуль это добро можно забрать у я на если вы хотеть протестировать свой алгоритм в ядро через тоже самый работать и с только с пересборка ядро то просто добавить соответствующий код в исходник модуль по аналогия с какой либо алгоритм тот же тип что и ваш после это скомпилировать и загрузить модуль с нужный параметр о параметр в в репозиторий файл также рекомендовать как пример использование весь вид преобразование в допустить вы разрабочик операционный система и вы поддерживать собственный кастомный ветка ядро тогда свой криптография если она у вы есть вы бы также мочь поддерживать внутри дерево каталог исходный код ядро и с это нет никакой проблема просто разместить файл с исходный код ваш криптографический модуль внутри папка и добавить соответствующий запись в файл и например если в мы поместить файл то в файл под строка добавить нечто вроде а в файл после это в меню кофнигурация ядро раздел появиться пункт для выбор наш алгоритм это также позволить выбрать для он вариант статичный компиляция в образ ядро что разумно в ряд случай и не забыть позаботиться о добавление соответствующий тест в и литература git

