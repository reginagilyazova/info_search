погружение в разработка на ethereum часть 4 деплый и дебаг в truffle ganache infura rubyruby в мы рассмотреть разработать приложение на ethereum но обойти стороной вопрос как происходить процесс разработка ясно что это не просто написание код который сразу работать большой часть время прийтись потратить на то чтобы доводить код который почти готовый до рабочий состояние деплый тестирование отладка весь это в тот или иной мера уже затрагиваться здесь например в этот неплохой статья список не полный в этот статья мы дать небольшой обзор и возможно в чем то повториться но постараться сфокусироваться на тот момент который мы показаться важный или недосказать плюс за последний время некоторый штука измениться и огромный количество инструкция оказаться устаревший постараться немного подправить ситуация для тестирование и деплоить смарт контракт мы пользоваться он скрывать часть низкоуровневый работа за абстракция что очень удобно описать версия 4 0 6 это не единственный фреймворк есть ещё и но по он ничто сказать не мочь не приходиться работать для инициализация проект надо выполнить команда выполниться в текущий папка поэтому предварительно создать папка проект и перейти в нея создаваться только базовый структура из папка и в и вы мочь увидеть смарт контракт который отвечать за логика деплоить в термин трюфель миграция а логика примерно такой в папка вы складывать скрипт и называть они по шаблон самый важный в название это индекс который идти в начало после это можно добавлять любой описание который нужно только для читабельность индекс же использоваться для выполнение миграция в порядок нумерация смарт контракт использоваться для тот чтобы сохранять какой из скрипт миграция уже выполниться так что если в процесс разработка добавлять новое контракт и новый логика деплоить то предыдущий успешный прогресс передеплоивать не надо лично мы это не пользоваться вместо это иметь фиксировать количество миграция редактировать и запускать они каждый раз заново с помощь вы мочь вручную создавать файл контракт миграция и тест но в truffle есть и специальный команда мочь проверить что у вы создаться соответствующий файл но содержимое совсем базовый поэтому пока в этот фич нет особый преимущество по сравнение с создание тот же файл вручную в более ранний версия инициализация создавать сразу небольшой пример metacoin и convertlib чтобы в последний версия увидеть этот и другой пример можно воспользоваться фй называть truffle boxes бокс создать для тот чтобы получить полноценный пример проект truffle и он взаимодействие с разный web средство например reactjs перечисленный список бокс как официальный так и создать сообщество создать директория для новое проект и перейти в нея затем выполнимый команда получить тот структура проект который в старое версия создаваться по умолчание после это пример с базовый токен metacoin который можно пересылать от пользователь к пользователь и с помощь библиотека convertlib смотреть баланс в эфир при фиксировать курс обмен кроме тот что тут показать как создавать и использовать смарт контракт и библиотека здесь есть ещё и пример тест на javascript и solidity дробный о написание тест мочь почитать обратить внимание что там как раз рассматриваться более старый версия truffle давать бегло рассмотреть как можно в тестовый режим собрать и проверить этот проект для начало запустить development консоль увидеть подобный текст что делать этот команда она поднимать тестовый окружение и давать доступ к он через консоль тестовый окружение это то что вы мочь видеть в более старое руководство под название testrpc на самый дело это оно и есть просто команда truffle взять он под свой управление и переименовать в но о это написать далее а пока перейти к консоль выполнимый полный цикл команда для компиляция миграция и тестирование можно повызывать метод задеплоить контракт вручную например так как видеть весь выполняться мгновенно и можно отследить изменение отправить 3000 с основный адрес на другой видеть что баланс уменьшиться выходить из консоль команда truffle development это режим с собственный тестовый нода для подключение к реальный сеть или тестнета использоваться команда который полностью аналогичный но не поднимать тестовый окружение чтобы продемонстрировать это не обязательно запускать можно воспользоваться например уже упомянуть заменить себя testrpc запустить команда есть ещё и принципиальный отличие нет но в этот версия можно сразу видеть весь информация событие и баланс мочь быть очень удобно в некоторый ситуация мочь использовать любой из этот версия но если вы просто сделать и ещё никак не менять конфигурационный файл то подключиться не получиться поэтому добавить в следующий вы мочь увидеть ещё и это то же самый но для windows лишний для ваш система файл можно удалить этот конфига дать возможность трюфель подключаться к люба сеть доступный на localhost 8545 это значение по умолчание для geth и ganache cli если вы использовать gui версия ganache зайти в настройка и при необходимость изменить порт и перезапустить кнопка save and restart если застрять на окно с логотип то скорее всего у вы на это же порту уже что то запустить geth ganache cli testrpc или что то ещё теперь можно подключиться выполнять команда и можно попробовать например сделать в gui версия вы сразу смочь увидеть изменение баланс аккаунт с который пройти деплый если зайти в вкладка blocks то увидеть смайненный блок и сколько газа расходоваться на транзакция в они щёлкнуть по каждый из они можно получить ещё более подробный информация вкладка transactions такой же образ показать вы весь прошедшее транзакция в консольный версия быть тот же информация но в вид стена логово использовать что считать удобный кстати если вы читать другой инструкция по этот же тема то наверное уже знаете что не обязательно вызывать консоль чтобы компилировать и деплоить можно просто вызвать например и это быть полный аналог тот что мы сделать выше такой же принцип и для весь другой команда трюфель полный список команда ни в какой язык вы не обойтись лишь core функциональность изобретать велосипед непродуктивный и опасный а с смарт контракт где вы рисковать чужое деньга это особенно критично поэтому возникать вопрос где взять этот уже проверить дополнительный функциональность в truffle для это есть система пакет который доступный в два вариант установка не считать обычный копипаста с помощь npm и с помощь ethpm до это на пример metacoin мы видеть простой токен токен использоваться довольно часто даже crypto kitties это по суть токен хоть и оригинальный стандарт основной стандарт токен сейчас это чтобы соответствовать стандарт токен должный реализовывать набор функция который мочь обеспечивать универсальный и безопасный использование в кошелёк биржа и том далее тут очень полезный оказываться пакет набор библиотека для часто использовать паттерн в смарт контракт в например уже быть описать использование это пакет рассмотреть не использование а способ установка и подключение для начало тот который описать в инструкция на гитхаб проект в корн проект truffle выполнить после что в папка у вы появиться из который в смарт контракт можно подключать требовать файл например ownable строчка но существовать ещё один способ установка пакет который разработать специально для пакет в ethereum ethpm пакет храниться на ipfs список пакет доступный по он интегрировать в трюфель и чтобы установить тот же самый zeppelin solidity можно выполнить добавиться папка подключать она содержимое так же как и из папка но если вы сравнить версия который установить тем и другой способ то обнаружить что они разный и по крайний в данный момент версия npm новый на момент написание 1 6 0 против 1 3 0 в ethpm так что хоть идеологически ethpm и интересный но пока наверное хороший устанавливать пакет с помощь npm обычно когда при выполнение смарт контракт происходить ошибка сообщение оказываться очень неинформативный для пример сделать контракт с намеренный ошибка в файл contracts faultycontract sol добавить недоставать код как видеть здесь неизбежно деление на 0 в файл xxxx сгенерировать id мочь быть разный добавить недоставать код для деплоить открыть develop консоль скомплировать и задеплой наш контракт получить контракт и вызвать проблемный функция как видеть не очень информативный неизвестно в какой место ошибка и что значит в truffle с версия 4 доступный команда пока бета позволять заново перевыполнить транзакция построчно но для это нужно получить хеш транзакция а в ошибка даже он нет чтобы увидеть хеш запустить ещё один экземпляр с флаг этот команда позволять видеть лог тот что происходить в основной develop консоль и в тот число там можно найти хеш транзакция запустить функция ещё раз в окно с лог быть что то похожий на взять хеш транзакция и передать он в команда debug вы должный вывестись подсказка дальнейший команда чтобы понять хотя бы в какой строчка ошибка можно использовать команда step next каждый шаг быть отображаться несколько строка из код и подчёркиваться часть который в данный момент исполняться есть возможность перейти на совсем низкий уровень и по очередь выполнять каждый opcode команда виртуальный машина ethereum и смотреть состояние стек сделать ещё один шаг и попробовать вывести состояние стек видеть что последний в стек лежать наш x и y 16 и 4 это конечно не сильно удобный способ и нужно разбираться с опкод и как они выполняться в виртуальный машина ethereum если интересно мочь глянуть например h 2 instruction set но у мы задача просто найти строчка с ошибка продолжить выполнять пока не получить что то подобный тут хотя бы можно увидеть что ошибка произойти где то в часть деление и можно смотреть на стек и инструкция если разбираться это к сожаление весь что предлагать трюфель по часть дебаг ну хоть что то в это план для одиночный контракт и несложный связь мочь посоветовать в например автор пользоваться она для деплоить там есть практически полноценный дебаг с возможность видеть значение переменный на каждый шаг интерфейс интуитивный смотреть как уже рассмотреть пример можно быть отладить там в консоль внизу видеть ошибка нажимать дебаг и мочь прокручивать туда сюда и видеть значение переменный в человеческий вид в прошлый статья мы рассматривать плагин metamask который позволять подключаться к блокчейн без использование локальный синхронизировать ethereum клиент это возможно благодаря сервис вы тоже мочь получить доступ к нода infura и подключаться к он через truffle для это в один нужно в письмо вы прийти ссылка с персональный токен для доступ давать попробовать задеплоить пример metacoin на ropsten без локальный нода создавать тестовый проект как обычно далее мы понадобиться дополнительный пакет с помощь который truffle мочь подписывать транзакция добавить провайдер в настройка трюфель такой код прийтись задать gas и gasprice потому что по крайний мера у мы значение по умолчание не подойти не забыть вставить токен из письмо а ещё придумать свой мнемоник из 12 разный а не как в пример слово она использоваться для генерация аккаунт и если кто то она завладеть то смочь сгенерировать тот же самый аккаунт и воспользоваться они без ваш ведомо например если вы попробовать использовать мнемоник в этот статья то смочь воспользоваться тем эфир 0 3 который мы туда переслать если он не израсходовать кто то ещё в это конфига также оставить выбирать между этот два сеть можно запускать truffle с соответствующий название после флаг перед тем как вызывать требоваться пополнить баланс сгенерировать аккаунт узнать адрес и баланс команда переслать на ваш аккаунт немного ropsten эфир для тот чтобы можно быть заплатить за деплый после тот как он дойти можно проверять предыдущий команда можно попробовать выполнить результат должный быть такой видеть хеш транзакция можно проверить что они действительно попасть на ropsten через etherscan io например надеяться вы узнать что то новое из этот статья или хотя бы освежить знание что касаться следующий статья то как показать практика сложно сделать реальный полезный проект без связь с внешний мир через oraclize и ipfs о это и планировать написать погружение в разработка на ethereum

