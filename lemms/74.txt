погружение в разработка на ethereum часть 3 приложение для пользователь rubyruby в предыдущий статья и мы описать как можно пользоваться децентрализованный приложение на смарт контракт если вы сам не против быть нодом но чем маленький пользователь заставлять совершать дополнительный действие тем хороший для работа с смарт контракт необходимый подписывать транзакция приватный ключ поэтому совсем без дополнительный действие к сожаление не обойтись в этот статья мы рассмотреть два подход один полноценный децентрализованный приложение dapp на javascript с использование библиотека web3 и плагин metamask два аналогичный приложение но использовать ruby on rails api и гем ethereum rb для доступ к блокчейн для демонстрация работа настоящий dapp рассмотреть приложение вдохновить вместо democracy с голосование и выполнение произвольный транзакция сделать упрощённый контракт charity в который кто угодный создавать предложение по распределение деньга эфир участник голосовать и после истечение дедлайна предложение либо выполняться либо нет в зависимость от результат голосование логика смарт контракт в дать случай не очень важный наш цель продемонстрировать вариант взаимодействие пользователь с блокчейн рассмотреть какой средство мы быть использовать чуть дробный а после перейти непосредственно к приложение это такой плагин для браузер chrome разработчик писать что планировать и для firefox но пока только хром скачать можно плагин делать два вещий дробный о тот как пользоваться плагин можно прочитать на или web3 js это javascript библиотека тот же который мы использовать в geth в metamask встраивать web3 js в каждый открытый страница поэтому можно протестировать простой команда непосредственно в javascript консоль в chrome developer tools важный отметить на момент написание этот статья актуальный версия web3 js 0 20 1 документация для версия 0 x x доступный по не путать с документация для версия 1 0 выполнимый два команда один на получение дать например баланс аккаунт два на изменение например задание строка в смарт контракт stringholder из предварительно не забыть создать аккаунт в metamask подключиться к нужный сеть в дать случай ropsten test network и зайти в консоль developer tools не забывать при вызов метод контракт передавать коллбэк функция в качество последний аргумент можно так web3 js использовать библиотека для числовой значение в пример выше ответ вывести без преобразование команда чтение выполняться сразу а если вы захотеть выполнить функция изменять дать в смарт контракт не пометить как то metamask выдать окно подпись транзакция продемонстрировать это открыть контракт stringholder из и вызвать в немой метод задание строка после вызов метод setstring выдаваться окно с запрос подтвердить транзакция и информация по предположительный затрата газа и эфир нажать submit в консоль увидеть хеш транзакция через некоторый время проверить что строка измениться весь работать как должный это библиотека для работа с блокчейн ethereum из ruby на данный момент поддерживаться наиболее активно попробовать открыть контракт stringholder из irb консоль особенность вызов метод здесь в тот что через вызываться только геттер где нужно просто получить дать для выполнение транзакция быть нужный для синхронный вызов либо для асинхронный вызов попробовать вызвать функция для который быть создаваться транзакция есть два способ unlockaccount deprecated и sign transaction о это чуть поздний необходимый назначить от кто посылаться транзакция тот же кто мы сейчас разблокировать потом можно вызывать сеттер вместо подставить либо либо дожидаться окончание вызывать видеть наш изменение весь работать сформулировать задача у мы должный быть контракт представлять себя благотворительный организация с счёт в этот организация мочь быть зарегистрировать пользователь который мочь выступать и в качество получатель пожертвование и в качество голосовать за предложение нужный способ создать предложение о перечисление деньга эфир с счёт организация на один из зарегистрироваться аккаунт чтобы не быть искушение забрать за раз весь эфир ввести ограничение предложить можно не более 1 эфир далее идти голосование можно голосовать за или против который нельзя завершать до определённый дедлайна 5 минута с момент создание предложение после дедлайна голос продолжать приниматься но должный быть возможность завершить голосование и если оно завершиться с бо льший количество за чем против перечислять эфир с счёт организация на счёт получатель если большой голос против ничто не делать в целое схема приложение такой два js модуль blockchain js и blockchainapi js отвечать за работа с блокчейн они делать один и тоже только один работать c web3 js и через нода metamask напрямую обращаться к блокчейн два делать ajax запрос к rails api где уже происходить взаимодействие с блокчейн через гем ethereum rb сам клиентский приложение написать на react и не зависеть от тот какой js модуль из два использоваться контракт в вид один единственный файл поэтому не быть пользоваться специальный средство для деплоить сделать это можно любой способ хоть хоть мочь использовать наш код в целое он схема можно изобразить так рассмотреть код контракт charity sol по логический блок сначала идти описание весь нужный мы переменный маппинга позволять по адрес пользователь получить он индекс в массив если пользователь с такой адрес не существовать то быть возвратить индекс 0 на это быть основать далее функция определять зарегистрировать ли пользователь с данные адрес но это вносить требование для массив пользователь должный храниться в массив начинать с индекс 1 код отвечать за этот логика быть рассмотреть далёкий а пока идти структура для хранение предложение структура голос складываться в массив для каждый предложение рассмотреть модификатор который позволить мы контролировать что выполнение метод к который он быть добавить возможно только если пользователь зарегистрировать код проверка как уже быть сказать основать на тот что несуществующий элемент маппинга давать индекс а пользователь быть хранить начинать с индекс это структура по который можно получить информация о вызывающий в дать случай это адрес аккаунт который вызвать метод с это модификатор описать конструктор наш контракт который быть выполняться при деплый весь что требоваться задавать время который выделяться для голосование за каждый предложение кроме это увеличивать размер массив members потому что добавлять пользователь быть исходить из размер а нулевой элемент оставаться зарезервированный функция для добавление пользователь заметить функция она пришлый на замена в более старое версия solidity в передаваться или если это то срабатывать обработчик аналогичный откатываться весь транзакция чтобы можно быть проверить находиться ли адрес в список пользователь использовать такой функция следующий функция для создание предложение принимать адрес получатель пожертвование количество эфир в wei и строка с описание к этот функция применяться модификатор onlymembers это значит до выполнение всего код произойти проверка что вызывающий аккаунт зарегистрировать здесь вы увидеть такой преобразование как и полный список такой суффикс мочь посмотреть они сделать для удобство и мочь применяться только к значение но не к переменный но чтобы применить к переменный достаточно просто добавить 1 к суффикс что и сделать в наш случай для преобразование в секунда заметить здесь ключевой слово это текущий время но не на момент вызов транзакция а на момент создание блок поэтому дедлайна быть отсчитываться с момент когда предложение уже быть создать на блокчейн несмотря на то что у мы получать такой образ можно только простейшее поль в вид массив то есть вызвать в контракт метод например мы получить предложение с индекс в вид массив а массив и внутри структура не вернуться но мы нужный информация о тот проголосовать ли пользователь за определённый предложение чтобы отображать он голос или дать возможность проголосовать и желательно сделать это в один обращение поэтому мы получать этот информация когда читаемый структура proposal для отображение в наш приложение с помощь специальный функция который принимать аккаунт для который нужный статус голос и идентификатор предложение а это вспомогательный функция который искать как проголосовать конкретный пользователь в конкретный предложение возвращаться быть если пользователь не проголосовать если пользователь проголосовать за если проголосовать против голосование для предложение с конкретный номер отдавать голос true за или false против и последний функция служить для завершение голосование и отправка или неотправка эфир на адрес получатель в конец присутствовать пустой функция с модификатор payable это нужно для тот чтобы на адрес контракт можно быть присылать эфир вообще пустой функция это функция который принимать и обрабатывать весь сообщение который не являться вызов функция весь что мы требоваться это сделать она payable тогда отправить газ просто зачислиться на контракт без какой либо дополнительный действие но заметить что на другой функция это модификатор нет поэтому в наш случай нельзя отправлять эфир например с вызов основной сценарий приложение демонстрация приложение доступный по metamask версия исходный код ещё раз обращать ваш внимание на то что текущий версия web3 js 0 20 1 но уже готовиться к релиз версия 1 0 в который изменение достаточно существенный как мы говорить выше metamask встраивать web3 в страница и он можно сразу использовать но учитывать то что библиотека активно развиваться а мы нужно гарантировать работоспособность приложение для пользователь необходимый использовать свой залоченный версия и переопределять объект web3 который встраивать metamask мы делать это в следующий метод делать это нужно после событие один неочевидный проблема который решаться в это код если просто сделать как предлагаться в официальный документация то не подхватываться аккаунт по умолчание ещё в metamask как уже писаться можно выбирать сеть из список у мы использоваться адрес контракт в сеть ropsten если попытаться подключаться по это адрес в другой сеть результат быть непредсказуемый поэтому прежде чем предоставлять доступ к приложение нужно проверить в тот ли сеть находиться пользователь получить идентификатор сеть можно с помощь команда мы делать этот проверка и сравнивать результат с id для сеть ropsten это 3 список id весь сеть можно увидеть например в описание net_version весь логика работа с блокчейн находиться в файл здесь есть два тип функция функция для получение дать из блокчейн и функция изменять дать в блокчейн большинство метод из web3 js выполняться асинхронный и принимать callback в качество последний параметр поскольку зачастую приходиться вызывать несколько метод для получение дать и вызов некоторый из они зависеть от результат работа другой удобно использовать промиса в версия 1 0 web3 js асинхронный метод возвращать промиса по умолчание привести один пример получение информация из блокчейн функция возвращать адрес текущий аккаунт баланс и флаг тот являться ли данный аккаунт участник организация рассмотреть теперь функция изменение дать в блокчейн например функция добавление участник организация как видеть синтаксис ничто не отличаться от предыдущий пример вот только выполнение этот функция повлечь создание транзакция для изменение дать в блокчейн при вызов люба функция смарт контракт в результат который создаваться транзакция metamask предлагать пользователь подтвердить этот транзакция или отклонить она если пользователь подтверждать транзакция то функция возвращать хеш транзакция один неочевидный момент это как узнать выполниться транзакция успешно или нет определить статус транзакция можно на основание кола ва газа который быть использовать если использовать максимально доступный кола в газа то либо в ход выполнение возникнуть ошибка либо газа не хватить для выполнение транзакция проверка статус мы делать следующий образ при создание новый транзакция мы добавлять она в localstorage и периодически опрашивать она статус до тот пора пока не узнать что она выполниться успешно или нет логика мониторинг транзакция находиться в файл по настоящий децентрализованный приложение выглядеть как вариант описать выше пользователь сам подписывать транзакция при помощь ключ который храниться у он же но помимо случай когда пользователь приложение непосредственно взаимодействовать с блокчейн бывать случай когда требоваться доступ к блокчейн на сторона бекенд возможно это какой то внутренний приложение и действие с блокчейн выполняться от аккаунт который вы контролировать и ключ для который вы мочь хранить на сервер возможно логика ваш приложение на смарт контракт подразумевать реагирование на определённый событие от ваш централизовать сервер в дать случай помимо web3 js который вы конечно тоже мочь использовать на сервер быть бы неплохо иметь инструмент для привычный вы стек разработка для мы такой являться ruby on rails поэтому мы решить попробовать библиотека ethereum rb который должный решать тугой задача что и web3 js демонстрация приложение доступный по rails api версия исходный код для демонстрация работа с ethereum rb мы сделать аналогичный набор функция описать в blockchain js код работа с блокчейн можно посмотреть а мы описать основной момент и возможно отличие первое теперь у мы нет доступ к аккаунт пользователь поэтому мы нужно сделать некоторый процесс авторизация и создавать для каждый пользователь аккаунт в блокчейн процесс авторизация в дать пример максимально упрощённый мы просто генерировать токен который сохраняться в localstorage браузер и по который происходить авторизация запрос к api в целое схема работа с аккаунт такой как и в js версия есть два тип метод тот что брать дать из блокчейн и тот что изменять они один достаточно простой и как они работать понятно из пример метод который изменять дать в блокчейн создавать транзакция который нужно подписать приватный ключ для работа с приватный ключ использоваться ниже демонстрироваться процесс создание новое аккаунт для блокчейн и подпись транзакция приватный ключ рассмотреть метод он принимать приватный ключ и блок код который мы хотеть выполнить использовать данный ключ в база дать ключ храниться в бинарный вид из который создаваться объект ключ при помощь гем eth далее этот ключ присваиваться в пол экземпляр контракт подпись транзакция происходить автоматически в гем ethereum rb если в пол контракт задать ключ после вызов нужный метод или несколько метод обнулять ключ чтобы случайно не отправить ещё транзакция от это же аккаунт для пример использование рассмотреть метод завершение proposal который вызывать метод в смарт контракт метод возвращать хеш транзакция логика проверка статус транзакция аналогичный тот что мы использовать в js версия демонстрация приложение доступный по мы перечислить на счёт контракт некоторый кола в эфир если он закончиться и у вы есть лишний тестовый эфир мочь задонатить сюда сеть ropsten на наш взгляд оба вариант иметь право на жизнь но в различный случай в дать конкретный пример версия с ruby немного притянуть за ухо и версия использовать metamask более логичный но как уже быть упомянуть в начало задача быть не дать образец проект а показать на простой логика пример взаимодействие с блокчейн при помощь javascript и ruby надеяться с этот задача мы справиться следующий задача ставить себя описание более продвинуть работа с деплой и тестирование смарт контракт ожидать следующий статья на этот тема погружение в разработка на ethereum

