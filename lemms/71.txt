dive into ethereum pavlov_dog сегодня платформа ethereum стать один из самый узнавать бренд блокчейн сфера вплотную приблизиться по популярность и капитализация к bitcoin но из за отсутствие полноценный рускоязычный гайда отечественный разработчик весь ещё не очень понимать что это за зверь и как с он работать поэтому в дать статья я попытаться максимально подробно охватить весь аспект разработка умный контракт под ethereum я рассказать про инструмент разработка сам яп процесс добавление ui и ещё много интересный в конечный итог мы получить обычный сайт визитка но под капот он быть работать на умный контракт ethereum кто заинтересовать просить под кат этот статья не расчитать на тот кто совсем не знак с ethereum или технология блокчейн вообще поэтому объяснение базовый вещий вроде или здесь не быть я подразумевать что вы хотя бы чуть чуть в курс происходить в противный случай полистать статья из список ниже а потом возвращаться большой ссылка на интересный статья вы найти в конец я работать под ubuntu 16 04 так что весь процесс установка разработка и деплоить быть описать под этот ос тем не менее весь использовать инструмент кроссплатформенный скорее всего не проверять так что при желание мочь поэкспериментировать на другой ос работа с ethereum возможный через огромный число клиент часть из который terminal based часть gui и есть несколько гибридный решение свой род стандарт являться geth который разрабатываться команда ethereum про он я уже писать в но на всякий случай повториться клиент написать на go устанавливаться сам geth не иметь gui но работать с он из терминал довольно приятно описать весь набор аргумент командный строка я же описать несколько самый популярный вот команда который я чаща всего использовать в работа geth довольно хороший но в последний время весь чаща можно встретить другой клиент parity написать на rust главное он отличие от geth являться встроить web интерфейс на мой взгляд самый удобный среди весь ныне существующий установка по окончание загрузка запустить в консоль и по адрес мочь найти сам кошелёк ещё один плюс parity быстрый свой конкурент по крайний мера так утверждать автор но по мой ощущение это действительно так особенно в план синхронизация блокчейн единственный нюанс свой консоль в parity нет но можно без проблема использовать для этот цель geth этот инструмент в отличие от предыдущий быть полезный только разработчик он позволять один команда поднять приватный блокчейн с включить rpc протокол десяток заранее создать аккаунт с этера на счёт работать майнер и так далее весь список по суть это тот же только на этот раз не надо тратить время на создание аккаунт включение выключение майнер и прочий рутинный действие установка самый популярный кошелёк для ethereum хотя на самый дело он уметь намного большой вот где step by step объясняться весь процесс работа с mist скачать самый свежевать версия можно с помимо работа с кошелёк есть возможность работа с контракт самый популярный ide для разработка контракт работать в браузер по адрес поддерживать огромный число функция при это нет автокомплита что очень печально ещё один ide для разработка умный контракт написать на meteor работать из коробка для начало открыть новый терминал и поднять нода с включить rpc интерфес после это мочь запускать сам ide далее открывать и мочь начинать работать последний на сегодня инструмент для ускорение разработка умный контракт это плагин для редактор atom устанавливаться с помощь штука удобный сам пользоваться позволять работать c js evm или подключиться к нода через rpc компилировать контракт на деплоить в сеть на ну и предоставлять неплохой интерфейс для работа с сам контракт если вы не нужный такой наворотить функционал внутри редактор то для atom есть отдельный плагин с подсветка синтаксис solidity последний по суть являться только конвертировать для работа в atom возможно вы слышать про то что можно писать контракт не только на solidity но и на другой язык например внешне напоминать python но последний комить в develop ветка быть примерно полгода назад так что по видимый язык увы deprecated поэтому писать быть только на solidity пока что язык находиться на относительно ранний этап развитие так что никакой сложный конструкция или уникальный абстракция в немой нет поэтому отдельно рассказывать про он я не видеть смысл люба человек с опыт в программирование смочь свободно писать на немой после 20 минута чтение на случай если у вы такой опыт нет ниже я довольно подробно прокомментировать весь код контракт для самостоятельный обучение есть несколько очень хороший пример с максимально подробный описание ещё раз отметить отличный язык даже перевести на русский язык самый время создать наш контракт в конечный итог это быть приложение визитка на который мы поместить сам резюме один дело создать шаблон контракт и она должный называться также как и сам контракт и вызываться лишь однажды при загрузка контракт в блокчейн мы быть использовать она для инициализация один единственный переменный как вы уже наверное догадаться в нея быть записать адрес тот кто залить контракт в сеть а использоваться она быть для реализация функция администратор контракт но о это поздний следующий шагом добавить возможность указывать базовый информация о автор имя почта адрес и так далее для это быть использовать самый обычный который нужно объявить в начать контракт для тот чтобы иметь возможность получать от контракт этот дать создать следующий функция здесь весь просто стоить только отметить модификатор он можно и нужно использовать для тот функция который не изменять приложение главный плюс такой функция sic в тот что они можно использовать как обычный функция теперь стоить задуматься о наполнение свой резюме контент в самый простой случай мы мочь бы обойтись функция вроде но в это случай люба при желание смочь бы изменить например наш имя вызвать к счастие есть способ всего в один строка пресечь любой такой попытка так как мы ещё не раз прийтись использовать подобный конструкция при добавление новое проект например то стоить создать специальный при желание можно использовать другой способ авторизация например по пароль хэш быть храниться в контракт и сравниваться с ввести при каждый вызов функция но понятно что этот способ не такой безопасный благо радужный таблица и атака по словарь никто не отменять с другой сторона наш способ тоже не идеальный так как если вы потерять доступ к адрес то ничто редактировать вы уже не смочь следующий шагом создать несколько для описание проект образование навык и публикация здесь весь просто структура описываться точно так же как в си но вместо тот чтобы описывать они в текущий контракт вынести они в отдельный блиблиотека в новый файл тем самый мы смочь избежать огромный простыня код и структурировать наш проект для это в тот же директория создать новый файл и библиотека а уже внутри нея описать каждый из структура теперь остаться только импортировать получить файл самый сообразительный уже догадаться что нотация означать создание динамический массив с элеметно тип а вот с уже сложный по суть он заменять мы написание функция вроде компилятор сам создать такой функция называться она быть так же как и переменный в наш случай вы мочь спросить почему мы в самый начало не написать а вместо это сам создавать такой функция причина банальный пока что не уметь работать c переменный для который ключ являться динамический тип дать именно такой тип для это нужно объявлять как например на всякий случай отметить что кроме локальный файл уметь импортировать файл по ссылка на github и даже это что то вроде распределенный хранилище для ethereum дробный думать многие из вы уже сам догадаться как стоить реализовать работа с новый дать показать на пример список публикация в остальной случай весь аналогично с помощь параметр мы избавиться от написание отдельный функция для удаление последний публикация костыльный но мы ведь только учиться хотя нужно отметить что такой способ избавление от элемент в массив на самый дело не совсем корректный сам элемент конечно быть удалённый но на место индекс остаться пустой место в наш случай это не смертельно мы быть проверять пустота отдельный элемент на сторона клиент но вообще говорить про это не стоить забывать тем более что сдвинуть весь массив и уменьшить счётчик длина как я уже сказать модификатор в строка обеспечить мы функция который по индекс вернуть проект но мы не знать сколько у мы всего проект и здесь есть два путь один итерироваться по до тот момент пока мы не получить ошибка о несуществующий элемент два написать отдельный функция который вернуть мы размер я пойти второе путём чуть поздний сказать почему заметить что мы не мочь сравнить два строка привычный способ причина весь тот же это динамический тип дать работа с они довольно болезненный так что оставаться либо сравнивать хэш либо использовать функция для посимвольный сравнение в это случай мочь использовать популярный библиотека в она есть такой функция в разный среда разработка процесс компиляция и деплоить разумеется отличаться поэтому я ограничиться remix как самый популярный сначала сам себя заливать весь код финальный версия мочь найти в далее в выпадать список выбрать пока что протестировать контракт на js эмулятор блокчейн чуть поздний научиться работать и с настоящее если с контракт весь в порядок то вы быть доступный кнопка нажимать и видеть теперь когда контракт залить в блокчейн он эмуляция но не быть мочь попробовать вызвать какой нибыть функция и посмотреть что из это выйти например можно сохранить в контракт email для это найти функция заполнить пол и нажать кнопка с имя функция функция ничто не возвращать поэтому теперь можно запросить у контракт email искать функция и пробовать с остальной функция предлагать вы поэксперементировать сам ниже я рассказать про самый распостраненный способ добавить ui к ваш контракт он позволять с помощь js и html создавать интерфейс люба сложность достаточно иметь доступ к рабочий нода ethereum или она аналог это js библиотека позовлять использовать api ethereum с помощь обычный js по суть с она помощь вы просто подключаться нода и у вы появляться что то вроде консоль geth в браузер устанавливаться через или вот пример работа с web3 через node js предварительно запустить или любой другой нода с rpc интерфейс тоже самый только из js консоль браузер не забыть про то есть мы уже на это момент мочь запустить нода синхронизировать она с текущий цепочка и остаться только сверстать наш приложение но тут есть два тонкий момент в один вы нужно синхронизировать блокчейн ethereum а вы это скорее всего до сей пора не сделать два нюанс rpc не иметь никакой встроить механизм авторизация поэтому люба желающий мочь узнать адрес ваш нода из исходник js и пользоваться она в свой удовольствие тут конечно можно писать какой нибыть обёртка на nginx с простой http basic auth но это как нибыть в другой раз поэтому сейчас мы воспользоваться плагин metamask увы только для chrome по суть это и есть тот прослойка между нода и браузер который позволить вы использовать web3 в браузер но без свой нода metamask работать очень просто в каждый страница он встраивать web3 js который автоматически подключаться к rpc сервер metamask после это вы мочь использовать ethereum на полный катушка после установка плагин в левый верхний угол выбрать и получить несколько эфир на на это момент вы должный получить что то вроде такой с чистый история разумеется с metamask задеплоить контракт в сеть так же просто как и в случаем с js evm для это снова открывать remix и в список выбирать пункт скорее всего он выбрать автоматически после это нажимать create и видеть всплывать окно чуть поздний надпись смениться на информация о опубликовать контракт это значит что он попасть в блокчейн адрес контракт мочь узнать открыть metamask и нажать на запись вид однако теперь если вы захотеть например вызвать функция то вы так же прийтись подтвержать транзакция и ждать пока она быть замайнен в блок теперь дело за малое надо научиться получать дать от контракт через web3 для это в один надо научиться определять наличие web3 на страница внутри я определелить весь логика работа с контракт тем самый избегать ложный срабатывание и ошибка теперь когда вы с весь разобраться можно браться за вёрстка и js я использовать и для визуализация навык добавить результат мочь увидеть на только что вы увидеть как можно довольно быстро создать приложение который самый непосредственный образ использовать технология blockchain хотя в погон за простота весь таки это обучать статья я допустить некоторый упрощение который по хороший допускать нельзя например мы использовать чей то шлюз я про metamask вместо тот чтобы работать с свой нода это удобно но технология блокчейн в один очередь децентрализация и отсутствие посредник у мы же всего это нет мы парень из metamask другой не такой критичный проблема мы забыть про стоимость деплоить контракт и транзакция к он на практика стоить десять раз подумать прежде чем использовать вместо потому как такой вещий прежде всего влиять на затрата при работа с контракт опять же в пример я использовать так что никакой деньга мы не потратить но при работа с не стоить быть такой расточительный в любой случай я надеяться что статья оказаться полезный если есть вопрос задавать в комментарий или писать я на почту

