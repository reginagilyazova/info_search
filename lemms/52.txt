туториал по unreal engine c patientzero blueprints очень популярный способ создание геймплей в unreal engine 4 однако если вы уже давно программировать и предпочитать код то вы идеально подойда том c с помощь c можно даже вносить изменение в движок и создавать собственный плагин в это туториал вы научиться следующий стоить учесть что это туториал по изучение c мы сосредоточиться на работа с c в контекст unreal engine если вы ещ это не сделать то вы понадобиться установить выполнить инструкция из epic по настройка visual studio для unreal engine 4 вы мочь использовать альтернативный ide но в это туториал применяться visual studio потому что unreal рассчитать на работа с он затем скачать и распаковать е перейти в папка проект и открыть если приложение попросить пересобрать модуль то нажать закончить с это вы увидеть следующий сцена в это туториал мы создать шар который быть перемещать игрок чтобы собрать монета в предыдущий туториал мы использовать управляемый игрок персонаж с помощь blueprints в это туториал мы создать он с помощь c для создание класс c перейти в content browser и выбрать после это открыться c class wizard в один нужно быть выбрать от какой класс мы быть наследовать поскольку класс должный быть управляемый игрок мы понадобиться pawn выбрать и нажать на следующий экран можно указать имя и путь к файл h и cpp заменить на и нажать на при это быть создать файл и скомпилировать проект после компиляция unreal открыть visual studio если и не быть открытый то перейти в solution explorer и открыть они они находиться в папка прежде чем двигаться далёкий вы нужно узнать о unreal этот система управлять различный часть движок такой как панель details и сборка мусор при создание класс с помощь c class wizard движок unreal добавлять в заголовок три строка движок unreal нужный этот строка чтобы класс быть видеть система рефлексия если вы это не понятно то не волноваться вы достаточно только знать что система рефлексия позволять делать такой вещий как раскрытие функция и переменный blueprints и редактор вы мочь также заметить что класс называться а не при создание класс тип actor unreal ставить перед название класс префикс от слово чтобы система рефлексия мочь работать она нужно чтобы класс иметь соответствующий префикс дробный прочитать о префикс можно в epic это вс что вы пока нужно знать о система рефлексия теперь мы нужно добавить модель игрок и камера для это нужно использовать для pawn игрок мы нужно добавить три компонент в один мы нужно добавить заголовок для каждый тип компонент открыть и добавить над следующий строка теперь мы нужно объявить переменный для каждый компонент добавить после следующий строка использовать здесь имя быть имя компонент в редактор в наш случай компонента быть отображаться как и далее мы нужно сделать каждый переменный видимый для система рефлексия для это добавить над каждый переменный теперь код должный выглядеть вот так также можно добавить к они быть управлять поведение переменный в различный аспект движок добавить и внутри скобка каждый отделить каждый описатель запятая позволить каждый компонент быть видимый в редактор в тот число и в blueprints позволить ссылка на компонент с помощь нод blueprint однако он не позволить мы компонент для компонент важный быть read only потому что они переменный являться указатель мы чтобы пользователь задавать они иначе они мочь указать на случайный место в память стоить заметить что вс таки позволять задавать переменный компонент и именно к такой поведение мы стремиться теперь когда у мы есть переменный для каждый компонент мы нужно они инициализировать для это необходимый создать они внутри для создание компонент можно использовать открыть и добавить в следующий строка это создать компонент каждый тип а затем назначить они адрес в память передать переменный аргумент строка быть внутренний имя компонент использовать движок отображать имя несмотря на то что в наш случай они одинаковый затем мы нужно настроить иерархия выбрать корнев компонент и так далее добавить после предыдущий код следующий один строка сделать компонент два строка прикрепить к наконец три строка прикрепить к после завершение код компонент мы нужно выполнить компиляция выбрать один из следующий способ компиляция затем мы нужно указать какой меш использовать и поворот пружинный рычаг рекомендоваться делать это в blueprints потому что нежелательно ж стко указывать путь к ресурс в c например в c для задание статичный меш нужно сделать нечто подобный однако в blueprints достаточно быть просто выбрать меш из раскрываться список если вы переместить ресурс в другой папка в blueprints ничто не испортиться однако в c прид тся менять каждый ссылка на этот ресурс чтобы задать поворот меш и пружинный рычаг в blueprints нужно быть создать blueprint на основание в unreal engine перейти в папка и создать развернуть раздел и найти выбрать а затем нажать на переименовать он в а затем открыть сначала мы задать меш выбрать компонент и задать для он значение затем мы нужно задать поворот и длина пружинный рычаг наш игра быть с вид сверху поэтому камера должный быть над игрок выбрать компонент и задать для значение это поверна том пружинный рычаг так что камера быть смотреть на меш сверху вниз поскольку пружинный рычаг являться дочерний элемент меш он начинать вращаться когда начинать вращаться шар чтобы исправить это мы нужно сделать так чтобы поворот рычаг быть нажать на ряд с и выбрать затем задать для значение так мы отдалить камера на 1000 единица от меш затем нужно задать default pawn class чтобы использовать наш pawn нажать на и вернуться в редактор открыть и задать для значение нажать на чтобы увидеть pawn в игра следующий шагом быть добавление функция игрок чтобы он мочь перемещаться вместо тот чтобы добавлять для движение смещение мы быть двигаться с помощь физика сначала мы нужный переменный указывать величина прикладывать к шар сила вернуться в visual studio и открыть добавить после переменный компонент следующий позволять изменять в панель details позволить задавать и считывать с помощь нод blueprint далее мы нужно создать два функция один для движение вверх вниз другой для движение влево вправо добавить под следующий объявление функция поздний мы с этот функция привязка ось благодаря это привязка ось смочь передавать свой поэтому функция нужный параметр теперь мы нужно создать реализация для каждый функция открыть добавить в конец файл следующий добавлять физический сила для по величина сила зад тся благодаря умножение результат на масштаб привязка ося меш мочь перемещаться в или направление делать то же самый что и но по закончить создание функция движение мы должный связать с они привязка ось ради упрощение я уже заранее создать привязка ось они находиться в в раздел добавить внутрь следующий код так мы связать привязка ось и с и на это мы закончить с функция движение теперь мы нужно включить физика для компонент добавить внутрь следующий строка один строка позволить воздействовать на физический сила два строка присваивать значение это значит что при движение шар быть прибавить 100 000 сила по умолчание физический объект весить примерно 110 килограмм так что для они перемещение потребоваться много сила если мы создать подкласс некоторый свойство не измениться даже если мы изменить они в базовый класс в наш случай у не быть включить однако теперь в весь создавать подкласс оно быть включить по умолчание выполнить компиляция и вернуться в unreal engine открыть и выбрать компонент затем включить нажать а затем на нажимать и чтобы передвигать шар далее мы объявить функция c который можно реализовать с помощь blueprints это позволить дизайнер создавать функционал без использование c чтобы научиться это мы создать функция прыжок сначала мы нужно связать привязка прыжок к функция в это туториал мы назначить прыжок на вернуться в visual studio и открыть добавить под следующий строка первое это переменный float с имя мы мочь использовать е при реализация прыжок она использовать чтобы е можно быть изменять в редактор также в она использоваться чтобы мы мочь считывать и записывать е с помощь нод blueprint далее ида том функция прыжок делать видимый для система рефлексия позволять blueprints реализовать если реализация отсутствовать то вызов ни к что не привести так как это привязка способ связывание немного отличаться закрыть и открыть добавить внутрь следующий так мы связать привязка с она быть выполняться только при клавиш прыжок если вы хотеть выполнять е при клавиш то использовать далёкий мы переопределить в blueprints выполнить компиляция и закрыть затем вернуться к unreal engine и открыть перейти в панель my blueprints и навести мышь на чтобы появиться раскрываться список нажать на он и выбрать так мы создать далее мы создать следующий схема так мы добавить импульс по учесть что в этот реализация игрок мочь прыгать бесконечно далее мы нужно задать значение нажать на в toolbar а затем перейти к панель details задать значение нажать на а затем закрыть нажать на и попробовать попрыгать с помощь в следующий раздел мы заставить монета исчезать при контакт с игрок для обработка коллизия мы нужно связать функция с событие наложение для это функция должный удовлетворять два требование первое функция должный иметь макрос два требование функция должный иметь правильный сигнатура в это туториал мы быть использовать событие это событие требовать чтобы у функция быть следующий сигнатура вернуться в visual studio и открыть добавить под следующий строка после связывание быть исполниться при наложение монета и другой актор быть монета а другой актор далее мы нужно реализовать открыть и добавить в конец файл следующий так как мы хотеть распознавать только наложение игрок то нужно привести к прежде чем выполнить приведение мы нужно добавить заголовок для добавить под следующий теперь мы нужно выполнить приведение в unreal engine приведение можно выполнить так если приведение выполнить успешно то оно верна том указатель на если неудачно то оно верна том проверять результат на мы мочь определить иметь ли объект нужный тип добавить внутрь следующий теперь когда выполняться она быть проверять иметь ли тип если это так то она быть уничтожать монета далее мы нужно привязать чтобы связать функция с событие наложение мы нужно использовать с событие добавить внутрь следующий так мы связать с событие это событие происходить всегда когда актор накладываться на другой актор выполнить компиляция и вернуться в unreal engine нажать и начать собирать монета при контакт с монета она быть уничтожаться что приводить к е исчезновение в следующий раздел мы создать ещ один переопределять функция c однако на этот раз мы также создать реализация по умолчание для демонстрация это мы воспользоваться чтобы создать функция с реализация по умолчание нужно использовать описатель вернуться в visual studio и открыть добавить для в чтобы сделать функция реализация по умолчание мы нужно добавить суффикс открыть и заменить на теперь если дочерний blueprint не реализовать то быть использовать этот реализация следующий этап быть реализация в для реализация в blueprint мы быть вызывать этот функция c увеличить скорость вращение монета через 0 5 секунда монета быть себя уничтожать для вызов функция c из blueprints мы нужно использовать описатель закрыть и открыть добавить над следующий выполнить компиляция и закрыть visual studio вернуться к unreal engine и открыть переопределить и создать следующий схема теперь при наложение игрок на монета быть выполняться нажать на и закрыть нажать и собрать несколько монета чтобы протестировать новый реализация вы мочь скачать готовый проект как вы видеть работать с c в unreal engine довольно просто хотя мы уже добиться кой что в c вы ещ нужно многое научиться я рекомендовать изучить серия туториал epic по создание с помощь c если вы новичок в unreal engine то изучить наш из десять часть в этот серия вы познакомиться с различный система такой как blueprints материал и система частиц

