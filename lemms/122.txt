что действительно случиться с vista инсайдерский ретроспектива m1rko традиционно группа разработчик windows подписывать постер в дать случай изображение dvd с выпуск новый версия windows к время окончание вечеринка по повод релиз на наш метр быть сотня или тысяча подпись опыт это то что ты получать только после тот как он ты понадобиться стивен райт я понравиться содержательный блог терри кроули что действительно случиться с vista терри работать в группа office и проделать фантастический работа описывать сложный козни вокруг windows vista и связаный но забросить проект longhorn с точка зрение внешний наблюдатель он верно подметить многие из проблема который преследовать проект и я не хотеть повторять о они снова я только подумать что быть честно изложить инсайдерский взгляд на тот же событие не рассчитывать на такой же красноречивый или исчерпывающий изложение как у терри но надеяться пролить некоторый свет на то что пошло не так прошлый десять год с момент выход один версия windows vista но этот урок сейчас казаться актуальный как никогда windows это монстр тысяча разработчик тестер менеджер программа специалист по безопасность дизайнер ui архитектор и том далее и это не считать обслуживающий персонал из отдел кадр рекрутер ребята из маркетинг продажник юрист и конечно множество менеджер директор и вица президент по каждый из перечисленный направление весь этот группа окружить многий тысяча сотрудник у наш партн ров как внутри так и за предел microsoft который поставлять вс от оборудование и драйвер устройство до приложение работать на платформа аэросъ мка группа разработка windows на футбольный пол в microsoft в то время организационно windows на самый дело делиться на три группа core server и client группа core поставлять каркас весь ключевой компонента операционный система общий для весь версия windows сам ядро система хранение безопасность сетевой подсистема драйвер устройство модель установка и обновление win32 и прочий в свой очередь серверный группа сосредоточиваться на технология для серверный рынок служба терминал кластеризация и бесперебойный работа инструмент корпоративный управление и др а клиентский группа отвечать за технология связанный с десктопной и пользовательский версия веб браузер медиаплеер график оболочка и др конечно происходить много реорганизация но основный структура всегда сохраняться даже когда популярность windows вырасти а сам группа увеличиться в размер также быть справедливо сказать что с культурный и организационный точка зрение группа core быть близкий к серверный чем к клиентский группа по крайний мера так быть до выход vista к время мой приход в microsoft в начало 1998 год windows означать windows nt архитектурный организационно и в отношение самый продукт от кодовый база windows 95 по больший степень отказаться а windows nt внедрить для каждый разновидность windows от ноутбук до сервер в кластер спустя два год кодовый база windows 95 98 должный быть воскресить для один последний релиз тот самый windows me о который так много злословить но этот проект вести маленький группа в то время как абсолютный большинство работать на кодовый база nt я повезти провести более десять год в чрево монстр я начать в разгар разработка windows 2000 и оставаться до завершение windows 7 один семь год я пров литр в группа ответственный за система хранение файловый система бесперебойный работа кластеризация сетевой протокол файловый уровень распредел нный файловый система и связанный технология поздний я пров литр год или два в группа управление безопасность microsoft она включать в себя вс от технология безопасность в windows до антивирусный продукт маркетинг безопасность и экстренный реагирование такой как выпуск обновление безопасность это быть близкий к конец жизненный цикл vista когда вирус и черви поставить windows на колено и когда репутация microsoft как разработчик защищ нный и безопасный программный обеспечение подвергнуться массовый избиение на публика последний три или четыре год в время подготовка выпуск windows 7 я управлять весь разработка группа core в windows это означать владение практически весь технология который работать под капот и использоваться и серверный и клиентский группа после выпуск vista весь команда windows организовать по направление и по триада dev test pm на весь уровень организация так что у я быть двое соучастник по преступление я руководить группа разработка в то время как они руководить соответственно группа тестирование и группа менеджмент команда windows в прошлое нередко пытаться осилить амбициозный и массивный проект который спустя несколько год забрасывать или перепрофилировать предыдущий пример амбициозный проект cairo который в итог распотрошить спастись лишь некоторый он часть включ нный в состав windows 2000 по мой скромный мнение до сей пора крупный проблема с выпуск windows быть продолжительность каждый релиз в среднее каждый релиз занимать три год от начало разработка до завершение но только 6 9 месяц это время занимать разработка новое код остальной время уходить на интеграция тестирование альфа и бета этап каждый по несколько месяц некоторые проект требоваться большой шесть месяц на ключевой разработка так что они создаваться параллельно и сливаться с основной кодовый база по завершение это означать что основный ветка всегда быть в подвесить состояние по мера тот как в не добавлять или менять большой кусок функциональность при разработка windows 7 установить гораздо более ж сткий контроль чтобы гарантировать непрерывно здоровый и функционировать кодовый база но предыдущий версия быть в постоянно нездоровый состояние с нестабильность в течение несколько месяц подряд хаотический природа разработка часто приводить к тот что группа разработка играть в опасный игра с расписание они убеждать себя и другой что они код в хороший состояние чем другой проект что они мочь отшлифовать остаться фрагмент точно в срок так что имя позволять поставить свой компонент в полуготовый вид тр хлетний цикл релиз означать что мы редко представлять себя как быть выглядеть конкурентный ландшафт и внешний экосистема на момент релиз если разработка функция не успевать к релиз то от не совсем отказываться поскольку она вряд ли иметь смысл через 6 год после начало разработка или что худой е отсылать в сибирь то есть продолжать разработка компонент который по больший часть игнорировать весь остальной организация и который быть обреча наш на неудача или бесполезность но группа или руководство просто не мочь принять решение о отказ от разработка я лично наш с ответственность за несколько такой проект зрение при взгляд в прошлое становиться стопроцентный учитывать что каждый команда быть занятый продвижение в релиз собственный план и набор функция она зачастую манкировать интеграция с другой компонент пользовательский интерфейс end to end тестирование а также такой неприятный и утомительный вещь как обновление оставлять этот трудный вещий на потом в свой очередь это означать что некоторый группа быстро становиться узкий место весь разработка и в последний минута весь бежать имя на помощь в завершение работа над ui или тестирование механизм обновление в каждый момент время в разработка находиться несколько крупный релиз а также многочисленный побочный проект разный группа отвечать за кодовый база в разный состояние готовность что с время приводить к результат где богатый становиться богач а бедный бедный группа который начинать отставать по тот или иной причина обычно так и оставаться позади когда проект приближаться к завершение программный менеджер начинать составлять требование к следующий релиз а группа в здоровый состояние богатый начинать внедрять новый код тогда как бoльший часть организация бедный по прежний копаться с текущий релиз в частность группа тестирование редко освобождаться до выпуск релиз так что в начало проект новый код не быть тщательно протестировать нездоровый группа всегда отставать делать последний штрих для текущий релиз и отставать вс далёкий и далёкий именно в этот группа зачастую трудиться разработчик с самый низкий уровень моральный состояние и наиболее истощий нный это значит что новое сотрудник группа взамен уйти истощий нный прима переть наследовать хрупкий код который они не писать и поэтому не понимать на протяжение почти всего срок разработка vista longhorn я наш с ответственность за система хранение и файловый система это значит что я быть вовлечий наш в проект winfs хотя он вели преимущественно сотрудник группа sql субд родственный структура для команда windows билл гейтс лично участвовать в проект на очень детальный уровень он даже в шутка называть менеджер проект winfs pm сотня если не тысяча человеко год потратить на проработка идея чь время просто уйти что если объединить возможность запрос субд и функциональность файловый система по потоковый передача и хранение неструктурированный дать и открыть это как парадигма программирование для создание уникальный новый насыщенный приложение задний число теперь очевидно что google уметь решить этот проблема обеспечить прозрачный и быстрый индексация неструктурированный дать и они сделать это для всего интернет а не только для ваш локальный диск и вы даже не нужно переписывать свой приложение чтобы воспользоваться преимущество этот система даже если бы проект winfs завершиться успех понадобиться бы год на переписывание приложение чтобы они мочь воспользоваться е преимущество когда longhorn отменить а из е тлеть уголь поспешно собрать vista система winfs уже выкинуть из релиз ос группа sql ещ несколько год продолжать работа над она как над отдельный проект к это время в windows появиться встроить движок индексация и интегрировать поиск реализовать чисто на сторона без необходимость изменение в приложение так что необходимость в winfs стать ещ более неясный но проект по прежний продолжаться массивный архитектурный изменение связанный с безопасность в longhorn продолжаться в рамка проект windows vista после перезагрузка longhorn мы многий узнать о безопасность в быстро расширяться вселенная интернет и хотеть применить этот знание на архитектурный уровень ос для улучшение общий безопасность весь пользователь у мы не быть выбор windows xp показать что мы стать жертва собственный успех спроектировать для удобство система явно не соответствовать требование безопасность столкнуться с реальность интернет эпоха для решение этот проблема безопасность требоваться создание параллельный проект windows xp service pack 2 несмотря на сво название стать огромный затея который высосать тысяча ресурс из longhorn в наш следующий крупный релиз ос мы точно не мочь сделать шаг назад в требование к безопасность так что vista стать намного более безопасный чем любой другой ос который когда либо выпускать microsoft но этот процесс умудриться сломать совместимость приложение и драйвер устройство на беспрецедентный уровень для экосистема пользователь ненавидеть е потому что они приложение не работать а наш партн ры ненавидеть е потому что имя казалось что у они недостаточно время для обновление и сертификация свой драйвер и приложение поскольку vista торопиться к релиз для конкуренция с возродиться apple в многий смысл этот изменение безопасность требовать от сторонний приложение внесение глубокий архитектурный изменение а большинство вендор экосистема не быть готовый так много вкладывать в изменение свой легасить программа некоторый из они применить нетрадиционный подход для изменение структура дать и даже инструкция в ядро чтобы реализовать свой функциональность обойти штатный api и для многопроцессорный блокировка что часто вызывать хаос в система на какой то этап около 70 весь синий экран windows быть вызвать этот сторонний драйвер и они нежелание использовать штатный api для реализация свой функциональность особенно часто такой подход использовать разработчик антивирус я как руководитель отдел безопасность в microsoft лично потратить несколько год объяснять производитель антивирус почему мы большой не разрешимый имя патчить инструкция ядро и структура дать в память почему это представлять риск для безопасность и почему имя в дальнейший следовать использовать штатный api что мы большой не быть поддерживать они легасить программа с глубокий хук в ядро windows тот самый метод который применять хакер для атака пользовательский система наш друг производитель антивирус развернуться и подать на мы в суд обвинить мы в тот что мы лишать они средство к существование и злоупотреблять свой монопольный положение с такой друг кома нужный враг они просто хотеть чтобы они старое решение продолжать работать и далёкий даже если это означать снижение безопасность наш общий пользователь а ведь именно этот безопасность они должный быть улучшать за этот год произойти так много кардинальный изменение в компьютерный индустрия приход интернет распространение мобильный телефон появление облачный вычисление создание новый бизнес модель на база реклама вирусный рост социальный медиа неумолимый шествие закон мура и популярность свободный программный обеспечение это лишь некоторый фактор который атаковать windows с весь сторона ответ быть вполне логичный для дико успешный платформа упрямо продолжать курс и постепенно улучшать существующий система дилемма инноватор в два слово чем большой мы добавлять код тем сложный становиться система тем большой увеличиться штат сотрудник тем большой рослый экосистема и тем сложный быть наверстать расти отставание от конкурент словно нажим конкуренция быть недостаточно в один время целое армия наш инженер и программный менеджер тратить бесчисленный часы день неделя и месяц на общение с представитель министерство юстиция и корпоративный адвокат чтобы задокументировать существующий api от предыдущий релиз для выполнение правительственный антимонопольный постановление суровый реальность в тот что на тот момент жизненный цикл понадобиться примерно три год чтобы выпустить основной релиз windows и это быть слишком долго для быстро меняться рынок winfs безопасность и управляемый код вот лишь некоторый из массивный проект который стоять на повестка longhorn а быть сотня более мелкий ставка когда у вы организация из многий тысяча сотрудник и буквально миллиард пользователь то нужно предусмотреть абсолютно вс тот же релиз ос который предполагаться запустить на планшет и смартфон также должный быть работать на ваш ноутбук на сервер в дата центр и в встроить устройство тип сетевой хранилище коробочка powered by windows не говорить уже о работа поверх гипервизора hyperv в облако этот требование тянуть команда в противоположный сторона поскольку мы пытаться добиться прогресс на весь сегмент рынок одновременно невозможно рассматривать longhorn и vista по отдельность они иметь смысл только в сочетание с версия непосредственно перед и после они windows 2000 и xp с один сторона windows server 2008 и windows 7 с другой и полный понимание широкий контекст индустрия в ретроспектива windows стать жертва собственный успех она успешно покорить слишком много рынок и бизнес в каждый из этот сегмент теперь проявлять некоторый влияние на дизайн операционный система и тянуть он в разный направление часто несовместимый друг с друг исключительно успешный в 90 е год архитектура просто захлебнуться спустя десятилетие потому что мир вокруг изменяться слишком быстро пока организация пытаться за он успеть для ясность мы видеть весь этот тренд и усиленно пытаться соответствовать имя но если позволить смешать метафора трудно развернуть воздушный лайнер в противоположный сторона если вы на второе год беременность свой тр хлетний релиз вкратце то что мы знать три четыре год назад при планирование данный релиз ос стать смехотворно устаревший а иногда явно неправильный когда продукт наконец то выйти хороший что мы мочь сделать это перейти на постепенный и безболезненный доставка новый облачный сервис на вс упрощаться устройство вместо это мы продолжать добавлять функция в клиентский монолитный система что требовать многий месяц тестирование перед каждый релиз замедлять мы тогда когда мы должный быть ускоряться и конечно мы не заботиться о удаление старый функциональность который нужный для совместимость с приложение от старое версия windows теперь представить поддержка один и тот же ос на протяжение десять год или большой для миллиард пользователь миллион компания тысяча партн ров сотня вариант использование и десяток форма фактор и вы начн тот вступать в кошмар поддержка и обновление глядеть в прошлое linux оказаться более успешный в это отношение несомненный частью решение стать сообщество open source и такой подход к разработка модульный и подключать архитектура unix linux тоже значительный архитектурный улучшение в это отношение рано или поздно любой организация начинать выдавать в качество продукт свой организационный диаграмма и windows не исключение у open source нет такой проблема военный комната windows поздний переименовать в мостик ship room если хотеть добавить к это внутренний организационный динамик и личность у каждый из мы быть свой любимый фич партн ры из наш собственный экосистема подталкивать мы к поддержка новый стандарт чтобы помочь имя пройти сертификация на платформа добавить api для они конкретный сценарий у каждый быть амбиция и желание доказать что наш технология наш идея победить если только мы включить е в следующий релиз windows и мгновенно доставить миллион пользователь мы верить в это достаточно сильно чтобы вести битва на ежедневный совещание в наш военный комната у каждый также быть менеджер который жаждать повышение и расширение сфера свой влияние или количество свой сотрудник как промежуточный шаг на это путь группа разработчик и тестировщик часто вступать в противоречие один настаивать на окончание проверка код в то время как второе вознаграждаться за нахождение вс более сложный и эзотерический тестовый случай который не иметь сколько нибыть реальный сходство с клиентский среда внутренний динамик быть сложный мягко говорить как будто это недостаточно как минимум раз в год компания претерпевать масштабный реорганизация и иметь дело с новый организационный динамика кстати ничто из это не должный быть принять как извинение или оправдание речь не о это сделать ли мы ошибка да в избыток принимать ли мы специально неверный решение нет я не мочь вспомнить ни один быть ли это невероятно сложный продукт с невероятно гигантский экосистема крупный в мир на то время да быть мочь мы справиться хороший да ещ как принять бы мы сегодня иной решение да зрение при взгляд в прошлое становиться стопроцентный тогда мы не знать тот что знать сейчас должный ли мы смотреть в прошлое с разочарование или сожаление нет я предпочитать усвоить получить урок уверенный никто из мы не допустить такой же ошибка в последующий проект мы получить урок из тот опыт а значит в следующий раз допустить совершенно другой ошибка человек свойственно ошибаться

