мышление в стиль ramda один шаг saggid 2 сочетать функция 3 частичный применение каррирование 4 декларативный программирование 5 бесточечный нотация 6 неизменяемость и объект 7 неизменяемость и массив 8 линза 9 заключение данный пост это начать серия стать мышление в стиль ramda о функциональный программирование я быть использовать библиотека в этот статья хотя многие из обсуждать идея применимый также к множество другой библиотека такой как underscore и lodash а также к другой язык программирование я быть придерживаться литр гкий менее академический сторона функциональный программирование это в основное потому что я хотеть чтобы серия быть доступный больший число человек но также частично и потому что я сам не так близкий к истинно функциональный дорога я несколько раз затрагивать библиотека ramda для javascript в дать блог в я надеяться также перевести и этот статья впоследствии прима переть я показать некоторый пример тот как ramda мочь быть использовать в различный контекст при написание redux приложение в я использовать ramda для трансформация полезный нагрузка к запрос и возвращать ответ я наш литр ramda прекрасно спроектировать библиотека который предоставлять множество инструмент для чистый и элегантный функциональный программирование в javascript если вы желать поэкспериментировать с ramda в процесс чтение этот серия стать то на сайт ramda иметься удобный для ваш эксперимент как следовать из название функциональный программирование иметь много общий с функция для наш ситуация мы определимый функция как кусочек переиспользовать код который вызываться с количество аргумент равный нуль и более и возвращать результат это простой функция написать на javascript вместе с стрелочный функция из es6 вы мочь написать тот же самый функция гораздо более кратко я упоминать о это сейчас потому что мы быть использовать множество стрелочный функция по мера продвижение наш стать некоторый язык идти далёкий и предоставлять поддержка для функция как конструкция первое класс под конструкция первое класс я подразумевать что функция мочь использоваться такой же образ как прочий значение к пример вы мочь ссылаться на они в константа и переменный передавать они в качество параметр в другой функция возвращать они как результат от другой функция javascript один из подобный язык и мы быть использовать это преимущество при написание функциональный программа вы в конец конец приходить к понимание важность работа с так называть чистый функция чистый функция это функция который не иметь побочный эффект они ничто не присваивать внешний переменный они не уничтожать входной дать не генерировать вывод не читать и не писать в база дать они не изменять параметр который быть имя передать и так далее основный идея заключаться в тот что если вы вызывать функция с тот же параметр снова и снова то вы всегда быть получать один и тот же результат безусловно вы мочь делать различный дело с нечистый функция и должный если ваш программа делать что то интересный но для больший часть код вы желать сохранить свой функция чистый другой важный концепция в функциональный программирование это иммутабельность что это значит иммутабельный означать неизменяемый когда я работать c иммутабельность после первичный инициализация значение или объект я уже не изменять они вновь это значит что вы не изменять элемент в массив или свойство объект если я необходимый изменить что то в массив или объект я возвращать новый он копия с измена нный значение в последующий пост мы поговорить о это в подробность иммутабельность ида том рука о рука с чистый функция поскольку чистый функция не иметь право создавать побочный эффект они не иметь право изменять внешний структура дать они вынудить работать с дать в иммутабельный стиль самый простой путь начать мыслить в функциональный парадигма начать заменять цикл на итерационный функция если вы прислать с другой язык который иметь этот функция ruby и smalltalk лишь два пример вы мочь быть уже знакомый с они мартин флауер иметь набор прекрасный стать о поток коллекция который показывать и обратить внимание что весь этот функция за исключение reject доступный в array prototype так что вы не нужный ramda для тот чтобы начать использовать они тем не менее я быть использовать ramda версия для согласованность с остальной статья вместо тот чтобы писать явный цикл попробовать использовать функция foreach вместо это вот так foreach бер том функция и массив и вызывать этот функция к каждый элемент массив в то время как foreach это наиболее доступный из этот функция она использоваться в наименьший степень при выполнение функциональный программирование она не возвращать значение так что она в реальность использоваться только для вызов функция который иметь побочный эффект следующий наиболее важный функция который мы изучить это map как и foreach map применять функция к каждый элемент массив тем не менее в отличие от foreach map собирать результат применение это функция в новый массив и возвращать он вот вы пример он использовать анонимный функция но мы мочь использовать здесь и именовать функция теперь давать взглянуть на filter и reject как следовать из название filter выбирать элемент из массив на основа некоторый функция вот пример filter применять этот функция iseven в дать случай к каждый элемент массив всякий раз когда функция возвращать правдивый значение соответствующий элемент включаться в результат и также всякий раз когда функция возвращать ложный значение соответствующий элемент исключаться фильтроваться из массив reject делать точно такой же вещь но в обратный смысл она сохранять элемент для каждый функция который верна том ложный значение и исключать элемент для тот функция который вернуть истинный значение find применять функция к каждый элемент массив и возвращать один элемент для который функция возвращать истинный значение reduce это немного более сложный чем другой функция который мы сегодня рассмотреть это стоить знать но если у вы проблема с понимание суть е работа не позволять это останавливать вы вы мочь пройти довольно долгий путь даже не понимать быть е работа reduce принимать функция с два аргумент изначальный значение и массив для работа с он один аргумент который быть передать функция называться аккумулятор а второе аргумент являться значение итерировать массив функция должный вернуть новое значение аккумулятор давать взглянуть на пример и затем разбер метр то что в наш метр происходить начинать с дать итерировать функция вы мочь уловить идея пробрасывание функция в другой функция возможно даже что вы уже использовать это в другой язык без понимание тот что вы заниматься в этот момент функциональный программирование следующий пост в этот серия сочетать функция показать как мы мочь перейти к следующий шаг и начать совмещать функция в новый интересный вариантах

