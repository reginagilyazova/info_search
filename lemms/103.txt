ричард хэмминг глава 4 история компьютер софт magisterludi привет хабра помнить офигенный статья 219 2265 в закладка 353k прочтение так вот у хэмминг да да самоконтролироваться и самокорректирующийся есть целый написать по мотив он лекция давать она перевести ведь мужик дело говорить это книга не просто про ит это книга про стиль мышление невероятно крутой человек мы уже перевести 9 из 30 глава как я указывать в последний глава в один день существование компьютер контроль вычисление делаться вручную медленный настольный компьютер сначала контролироваться вручную например умножение выполняться повтор операция сложение в столбик с сдвиг столбцы после каждый множитель деление быть реализовать аналогичный операция повторение вычитание с время начать применяться электродвигатель как для питание так и для более автоматический управление операция умножение и деление перфокарточный машина управляться с помощь проводной соединение идти через коммутационный панель который сообщать машина где искать необходимый информация что с она делать и где ставить точка на перфокарта или напечатать лист табулятор однако некоторый управлять команда мочь также поступать с сам карта обычно изx и y отверстие на перфокарта другой цифра также мочь время от время контролировать что быть происходить с программа для каждый выполнять работа подготавливаться собственный коммутационный панель снабжаться индивидуальный коммутационный путём в то время как в бухгалтерия коммутационный плата обычно сохраняться и использоваться снова каждый неделя или месяц так как они нужно быть учитывать в цикл учёт когда мы переслать к релейный машина после создание стибитце первое компьютер оперировать сложный число они в основное контролироваться перфолента бумажный перфолента лента являться настоящее проклятие для выполнение одноразовый проблема они беспорядочный а склеивание перфолента для внесение исправление а также создание цикл представлять себя крайне мучительный процедура потому что клеить иметь тенденция проникать в считывать палец машина из за очень маленький внутренний хранилище в один день вычисление на компьютер программа не мочь сохраняться в машина с экономический точка зрение хотя я склонный полагать что именно дизайнер просчитать этот момент eniac быть сначала 1945 1946 контролировать с помощь проводы как если бы это быть гигантский коммутационный плат но с время ник метрополис и дик клипперэна превратить он в машина программировать с баллистический стол представлять себя огромный стойка с циферблат в который с помощь ручка десятичный переключатель устанавливаться десятичный цифра выполнять программа самостоятельный внутренне программирование компьютер стать реальность когда хранилище память стать более доступный для программа и хотя это изобретение обычно приписывать фон нейманна он быть всего лишь консультант мочесть и эккерта и они команда по слово гарри хаск внутренний программирование компьютер довольно часто обсуждаться группа до начало консультация фон нейманный один широко доступный записка о внутренний программирование после тот как леди лавлейс написать и опубликовать несколько программа для аналитический машина бэббидж быть представить фон нейманный в вид отчёт для армия этот заметка впоследствии быть широко распространить однако никогда не публиковаться в какой либо типография ранний код быть в основное одноадресный что значит каждый инструкция содержимый часть инструкция и адрес в который должный находиться или в который должный отправляться необходимый число в наш распоряжение также быть двухадресный код который использоваться для барабанный компьютер что обеспечивать доступность следующий инструкция сразу же после завершение предыдущий инструкция тот же самый логика применяться для ртутный линия задержка и другой устройство хранение информация который быть серийно доступный в тот момент время такой кодирование называться кодирование с минимальный время ожидание и вы мочь представить себя проблема с который программист сталкиваться при вычисление куда следовать вводить следующий инструкция и число это делаться для избегание возможный задержка и конфликт в работа компьютер не говорить уже о поиск ошибка программирование через какой то время появиться программа с имя soap символический оптимизационный программа сборка который выполнять этот оптимизационный работа на машина ibm 650 быть также три и четырехадресный код но я о они не быть рассказывать в этот книга интересно рассмотреть работа программа soap копия программа назвать она программа a загружаться в машина как программа и обрабатываться как дать результат вычисление быть программа b затем программа b загружаться в ibm650 и программа a запускаться вновь использоваться в качество дать для создание новый программа b разница между этот временами необходимый для создание программа b показывать насколько быть оптимизировать программа soap по метрика soap это действие представлять себя ранний пример самокомпилирование вначале мы программировать на абсолютный бинарный язык то есть мы писать фактический адрес и часть инструкция на бинарный язык у мы быть два тенденция избегание бинарный язык использование восьмеричный число где вы просто группировать двоичный число в набор из три число и шестнадцатеричный число где вы берет четыре цифра за раз для функционирование шестнадцатеричный число мы приходиться использовать a b c d e f для представление число выходить за 9 и вы конечно уже знаете таблица умножение и добавление до 15 если при исправление ошибка вы хотеть вставить некоторый пропустить инструкция то вы брать предшествовать инструкция и заменять она перенос на какой то пустой место в это пустой место вы вводить необходимый инструкция который удалить из предыдущий ячейка память добавлять инструкция который вы хотеть бы вставить а затем переходить бы обратно к основной программа такой образ программа в скорый время становиться последовательность прыжок в довольно странный место иногда как это почти всегда случается обнаруживаться и исправляться программный ошибка после что использоваться вышеописанный трюк при который использоваться другой свободный пространство в результат путь управление программа с использование хранилище дать вскоре приобретать вид банка с спагетти вы мочь спросить почему бы просто не вставлять исправление непосредственно в работать инструкция потому что в это случай приходиться проходиться через весь программа и изменять весь адрес который какой либо образ относиться к люба из перенести инструкция и ничто кроме это не помочь бы программа корректно отработать мы очень скоро переслать к идея создание повторно использовать программа как они называть сейчас у бэббидж быть следующий идея мы писать математический библиотека для повторный использование блок код но абсолютный адресация библиотека означать что каждый раз когда использоваться библиотечный процедура она должный быть занимать один и тот же место в хранилище дать когда полный библиотека стать слишком большой мы вынудить быть перейти к перемещать программа необходимый программный трюк быть в отчёт фон нейман который никогда официально не публиковаться один опубликовать книга посвятить программирование быть книга уилкс уилера и гилла и предназначаться для кембридж английский edsac 1951 я между прочить многое научиться из этот книга и вы почесть о это через несколько минута затем кто то понять что можно написать короткий часть программа который быть читать символический имя операция например add и переводить они в время ввод программа в бинарный код использовать внутри машина скажем 01100101 за это вскоре последовать идея использование символический адрес память в компьютер что быть настоящий ересь для старое программист теперь вы не увидеть тот самый старое героический абсолютный программирование если только вы не дурачиться с программировать рука компьютер пытаться заставить он делать большой чем когда либо планировать он дизайнер и строитель однажды я провести целый год благодаря помощь леди программист из bell telephone laboratories работать над один большой проблема кодирование ibm 701 на абсолютный бинарный язык который в то время использовать иметься 32k регистр после подобный опыт я поклясться что большой никогда не попросить кто либо делать что либо подобный узнать о символический система в городок poughkeepsie ibm я просить леди взять этот символический система и использовать она для разрешение следующий проблема что она и сделать как я и ожидать леди сообщить что работа стать в раз простой поэтому мы рассказать весь о новый метод всего около 100 человек который есть в кафетерий офис ibm в который стоялый дать машина примерно половина из они быть человек из ibm а половина как и мы быть нанять посторонний рабочий насколько я известно только один человек да только один из весь 100 проявить интерес наконец быть разработать более полный и более полезный программа symbolic assembly program sap спустя больший количество год чем вы думать в течение который большинство программист продолжать свой героический путь в программирование на бинарный язык в то время когда sap впервые появиться я бы предположить что около 1 зрелый программист быть заинтересовать в она использование sap быть для неженка и настоящий программист не стать бы тратить мощность машина на сборка программа с помощь sap да программист не хотеть признавать это но когда на они надавливать они признавать что они старое метод программирование использовать гораздо большой машинный время который уходить на поиск и исправление ошибка чем если бы использоваться программа sap один из основный жалоба на sap быть в использование она символический система при наличие который вы не знаете адрес какой либо информация в память хотя в ранний год мы и предоставлять схема отображение символический ссылка на фактический хранилище но хотеть верить или нет программист поздний с любовь смотреть на этот схема не понимать что имя не нужно большой знать этот информация если они сталкиваться с проблема в работа в система но они при исправление ошибка весь ещё предпочитать делать это в бинарный представление адрес fortran означать formula translation быть предложный бэкус и друг и он снова противостоять почти весь программист в один говорить что создать подобный язык невозможно в второе если он можно быть бы сделать это быть бы слишком расточительно для машинный время и мощность в третье даже если бы идея подобный система сработать ни один уважаемый программист не использовать бы она ведь с подобный вещь мочь работать только неженка использование fortran как и более ранний символический программирование быть очень сложно воспринять профессионал и подобный поведение характерный почти для весь профессиональный группа врач совершенно не следовать совет который они давать другой и даже среди они наблюдаться высокий доля наркоман адвокат часто не оставлять порядочный завещание когда они умирать практически весь профессионал медленно использовать собственный опыт в свой работа этот ситуация хорошо описываться старый поговорка сапожник без сапог подумать как вы в будущее быть избегать подобный типичный ошибка когда вы стать серьёзный специалист иметь доступ к fortran я выстраивать с он работа следующий образ говорить свой программист сделать работа на fortran проанализировать программный ошибка дать я проверить этот программа чтобы убедиться что она решать проблема верно и только в это случай она мочь бы если бы захотеть переписать внутренний цикл рабочий программа на машинный язык для ускорение работа и экономия время машина в результат мы смочь с примерно такой же отдача с наш сторона делать почти в 10 раз большой работа чем другой однако для остальной программирование на fortran весь также быть не для настоящий программист физически управление ibm 701 в штаб квартира ibm в нью йорк где мы она снимать быть ужасно это быть пустой трата машинный в то время оно стоить 300 доллар в час и это быть много и человеческий время в результат я отказаться от заказ больший машина пока не выяснить откуда можно взять система мониторинг который кто то создать для наш первое ibm 709 а затем модифицировать он и для ibm 7096 опять же монитор часто называть система мониторинг в наш день как и весь предыдущий вещий о который я упоминать должный быть очевидный приобретение для весь кто использовать компьютер из день в день однако большинство пользователь как я кажется быть слишком занятый для раздумье или наблюдение чтобы увидеть насколько весь плохо и сколько мочь сделать компьютер для облегчение и удешевление использование различный вещий очевидный вещий довольно часто замечать человек отстранить от работа или кто то вроде я кто задумываться и задаваться вопрос что он это делать и почему этот работа необходимый старик быть учиться и работать как они привыкнуть вероятно из за гордость за свой прошлое и нежелание признать что есть способ хороший чем тот который они пользоваться такой долгий время один из способ описание тот что произойти в история программный обеспечение являться то что мы постепенно переходить от абсолютный к виртуальный машина в один мы избавиться от фактический кодовый инструкция а затем от фактический адрес а затем в fortran и от необходимость изучение множество внутренний компонент сложный компьютер и тот как они работать мы делать пользователь машина из самый машина довольно рано в bell telephone laboratories мы построить устройство который делать ленточный устройство виртуальный независимый от самый машина тогда и только тогда когда у вы есть полностью виртуальный машина вы смочь передавать программный обеспечение с один машина на другой без бесконечный проблема и ошибка fortran быть невероятно успешный гораздо успешный ожидание кто либо из за психологический факт что он делать именно то что подразумеваться под имя транслировать в формульный вид весь тот вещий который изучаться ещё в школа и это не требовать изучение новое набор способ мышление алгол примерно в 1958 1960 год поддерживаться многий всемирный компьютерный организация включая acm это быть попытка теоретик значительно улучшить фортран но быть логика они создать логический а не человеческий язык и конечно как вы знаете этот эксперимент провалиться это между прочить быть из за булев логика который не понятный простой смертный и часто даже сам логик многие другой разработать логический язык который должный быть заменить первопроходец fortran приходить и уходить в то время как fortran стоить отметить несколько модифицированный оставаться широко использовать язык чётко показывать сила язык разработать с учёт психология над язык разработать с учёт логика это стать начало большой надежда для специализировать язык который быть pols что означать проблемный ориентировать язык существовать некоторый заслуга в этот идея но энтузиазм вскоре исчезнуть потому что слишком много проблема возникать в более чем один область и язык как правило оказываться несовместимый более тот в долгосрочный перспектива они быть слишком сложный на этап обучение для человек на достаточный уровень в 1962 год появиться язык lisp разнообразный слух распространяться вокруг тот как на самый дело он появиться вероятный истина таков джон маккарти предложить элемент язык для теоретический цель это предложение быть рассмотреть и значительно переработать другой человек и когда какой то ученик заметить что он мочь бы написать компилятор для это язык на lisp использовать простой трюк с самокомпилирование весь быть поразить в тот число по видимый сам маккарти он призвать ученик попробовать это сделать и почти за один ночь они переслать от теория к реальный компилятор lisp позволить отвлечься и обсудить мой опыт работа с ibm 650 это быть двухадрессный барабанный машина который работать с фиксировать десятичный число из мой прошлое опыт в область исследование я знать что я необходимый число с плавать точка архитектура фон нейман если говорить иначе и я нужный индексный регистр который не быть в предоставить машина ibm однажды предложить подпрограмма с плавать точка как они говорить но это быть для я недостаточно я просмотреть журнал edsac по программирование и там в приложение d быть специальный программа написать для размещение большой программа в маленький хранилище это быть интерпретатор но если это быть в приложение d видеть ли они важность этот программа я в это сомневаться кроме тот в второе издание он весь ещё присутствовать в приложение d по видимый весь ещё не признанный автор это поднимать как я надеяться уродливый вопрос когда что то начинать пониматься да они написать один программа и использовать она но понять ли они всеобщность интерпретатор и компилятор я думать нет точно так же когда примерно в то время многие из мы понять что компьютер на самый дело являться машина манипулировать символ а не просто машина предназначить для обработка число мы ходить и обсуждать этот идея и я видеть как человек злобно кивать голова когда я это говорить но я также понять что большинство из они не понимать о чем идти речь конечно вы мочь сказать что оригинальный статья тьюринг 1937 ясно показать что компьютер быть машина для манипулирование символ но если тщательно перечитывать отчёт фон нейман вы мочь заметить что автор не понять это они сделать только один комбинаторный программа и процедура сортировка история очень щедрый на подобный пример это давать понять что что то значит когда мы что то делать впервые но есть мудрый высказывание почти каждый кто открывать нечто новое на самый дело не понимать это знание так как это делать последователь свидетельство это высказывание к сожаление слишком хорошо известный как быть сказать что в физика никто из создатель какой либо значительный вещий никогда до конец не понимать что он сделать специальный теория относительность эйнштейн быть понять очень ясно лишь некоторый поздний комментатор и по крайний мера один мой друг сказать за мой спина хэмминг похоже не понимать исправлять ошибка код вероятно он право я не смочь понять что я придумать также ясно как он причина по который это случается так часто заключаться в тот что создатель вынудить бороться с такой тёмный трудность и пробираться сквозь столько недоразумение и путаница что они не мочь видеть свет так ярко как другой когда открываться дверь знание и последующий путь к понимание становиться достаточно лёгкое пожалуйста запомнить что изобретатель часто иметь очень ограниченный представление о тот что он изобрести а некоторый другой человек вы мочь видеть гораздо большой но также помнить это когда вы сам являться автор какой то блестящий новый идея в скорый время это возможно стать верный и для вы ранее говориться что ньютон быть последний из древние а не один из современник хотя он сыграть значительный роль в создание наш современный мир вернуться к ibm 650 и я я начать в 1956 или около тот с следующий четыре правило для разработка язык 1 лёгкий в изучение 2 простой в использование 3 лёгкий для отладка нахождение и исправление ошибка 4 простой в использование подпрограмма последний пункт не должный сейчас вы беспокоить поскольку в тот день мы проводить различие между открытый и закрытый подпрограмма который трудно объяснить сейчас вы мочь бы утверждать что я заниматься нисходящий подход top down в программирование однако я сразу же писать деталь внутренний цикл для проверка эффективность мой код восходящий подход bottom up в программирование и только после это возобновлять свой нисходящий философский подход такой образ хотя я считать что нисходящий программирование являться хороший подход я отчётливо осознавать что восходящий программирование также необходимый время от время я заставить работать двухадресный машина оперировать число с фиксировать точка как трехадресный машина оперировать число с плавать точка таков быть мой цель a операция в с я использовать десять десятичный цифра машина это быть настолько десятичный компьютер насколько быть заинтересовать в работа этот машина типичный пользователь в вид как же я это сделать легко я написать в мыть воображение следующий цикл рисунок 4 i в один я нужный быть регистр текущий адрес car и для это я назначить один из 2000 компьютерный регистр ibm 650 хранение этот информация затем мы написать программа пользоваться следующий шаг 1 использовать car для нахождение адрес считывание следующий инструкция написать программа 2 выделение инструкция выполнение программа и сохранение три адрес a b и c в подходящий ячейка в память ibm650 3 добавление фиксировать константа к операция и переход к она адрес хранение там для каждый инструкция должный находиться подпрограмма описывать соответствующий операция вы мочь бы подумать что у я быть всего десять возможный операция однако существовать только четыре возможный операция с три адрес сложение вычитание умножение и деление поэтому я использовать нулевой команда который обозначать перейти на адрес b и найти дальнейший необходимый информация каждый подпрограмма когда заканчиваться передавать управление в задать место в цикл 4 добавление 1 к содержимое регистр car изменение некоторый параметр и очередной вход в система такой же образ как это делать машина конечно инструкция переход они быть 7 штука насколько я помнить помещать адрес в car и переноситься в свой место в цикл только после добавление единица к содержимое регистр car изучение процесс показывать какой бы смысл вы бы ни хотеть дать инструкция он должный исходить из подпрограмма который писаться в соответствие с номер инструкция этот подпрограмма определять смысл язык программирование в это простой случай каждый инструкция иметь свой собственный смысл независимо от какой либо другой инструкция но разумеется некоторый инструкция мочь устанавливать переключатель флаг или другой битый поэтому некоторый более поздний выполняться инструкция быть воспринимать этот информация и интерпретироваться различный способ такой образ вы смочь понять как следовать разрабатывать люба язык если вы смочь однозначно определить он назначение понимание назначение выходить за рамка конкретный описание язык для машина превращать один определённый машина в любой другой который вы захотеть конечно это именно то что сделать тьюринг с свой универсальный машина тьюринг но как отмечаться выше назначение этот машина не быть до конец понять пока человек не начать она использовать создать я программный система быть поместить в регистр хранение с 1000 по 1999 такой образ любой программа описать на синтетический язык иметь только 3 десятичный цифра мочь ссылаться только на адрес от 000 до 999 и не мочь ссылаться на люба другой регистр в программный обеспечение тем самый переписывать он этот система быть разработать для защита программный обеспечение от пользователь я подробно рассмотреть этот тема поскольку мы обычно писать язык в качество обёртка для машинный язык и даже мочь написать ещё несколько более высокоуровневый язык один поверх другой пока мы не получить тот язык который мы хотеть использовать для выражение наш мысль машина если вы использовать интерпретатор на каждый этап то конечно этот операция быть не эффективный использование компилятор высокоуровневый язык быть означать что самый высокоуровневый язык переводиться на один из низкоуровневый язык хотя на какой то уровень весь равно мочь наблюдаться интерпретатор это также означать как и в случай с edsac как правило увеличение отдача от написать программа и улучшение они хранение я хотеть ещё раз указать разница между написание логический и психологический язык к сожаление логически ориентировать программист редко ориентироваться на человек и склонный использовать и превозносить логический язык возможно абсолютный пример это стремление являться apl с логический сторона apl отличный язык и по сеять день у он есть ярый фанат однако он совершенно не подходить для обычный человек пользователь это язык часто играть в игра один строка в который играть выдаваться один строка код и он спрашивать что она выполнять известно что даже эксперт это язык часто не мочь ответить на некоторый вариант программа изменение один буква в apl мочь полностью изменить смысл программа поэтому язык почти не иметь избыточность но человек ненадёжный и требовать избыточность наш разговорный язык примерно на 60 избыточный а письменный язык примерно на 40 вы наверное думать что письменный и разговорный язык одинаковый однако вы ошибаться чтобы увидеть это различие попробовать написать диалог а затем прочитать он и послушать как это звучать почти никто не в состояние написать такой диалог чтобы он звучать правильно и даже если диалог звучать правильно он ещё не являться разговорный язык человек ненадёжный и я продолжать настаивать на это поэтому низкий избыточность означать множество необнаруженный ошибка в то время как высокий избыточность способствовать отлавливание ошибка разговорный язык представлять себя акустический канал с весь он шум и язык должный быть поймать на лёт письменный язык печататься и вы мочь сделать пауза сканировать прочитать текст и сделать другой вещий для более глубокий раскрытие смысл слово автор обратить внимание что в английский язык чаща разный слово иметь одинаковый звучание и разный написание например there там и their они чем одинаковый написание и разный звучание record записывать как существительное или глагол и tear слеза as in tear in the eye vs tear in a dress слеза в глаз разрыв в платье такой образ вы должный судить язык по тот как хорошо он подходить для человек и учесть я также брать в расчёт то как они обучаться язык в школа иначе вы должный быть готовый тратить много время на обучение человек новый язык который они быть пользоваться то что язык для программист являться простой не означать что он быть такой же простой для неспециалист и в ближний будущее скорее всего неспециалист быть делать основный часть программирование компьютер быть заниматься кодирование если хотеть разумеется в конечный итог мы необходимый решение при который человек иметь проблема смочь она решить без участие интерфейс в вид специалист компьютер однако в наш день можно слишком часто наблюдать ситуация когда есть человек который знать только проблема и человек который знать только язык программирование к сожаление прогнозировать дата это событие слишком далёкий но я полагать что к 2020 год для эксперт в практический область быть бы достаточно универсальный практика выполнять лишь подготовка программа к работа без эксперт в компьютер который не являться специалист в практический область для это дело к сожаление по крайний мера на мой взгляд язык ada быть разработать эксперт и он иметь полный набор нечеловеческий логический функция который только можно ожидать этот продукт на мой взгляд являться типичный работа по хакинг компьютерный наука не пытаться понять что вы делать а просто заставить этот вещь работать в результат плохой психологический дизайн ada я быть провести частный опрос среди умудрить опыт человек который показать что хотя правительственный организация требовать от свой заказчик написание программа на язык ada вероятный всего более 90 программа быть написать отладить и проверить на fortran и после это она быть болезненно вручную переписать в программа на ada с высокий содержание ошибка основа язык не пониматься и по сеять день где то в начало 1950 х год я взять тогдашний местный эксперт по естественный язык по мнение общественность для посещение ibm 701 а затем на обед в время десерт я сказать профессор пить не мочь бы мы обсудить технический эффективность язык он просто не мочь понять этот вопрос и продолжать рассказывать мы как конкретный язык образовать слово в множественный число использовать середина выбрать слово какой характерный особенность иметь язык и том далее что бы я хотеть знать можно ли разработать эффективный язык для коммуникация если мы в состояние разработать собственный язык в который один стороной в общение быть бы человек с весь свой недостаток а на другой машина с высокий надёжность который делать только что она говорят но не более тот я хотеть бы знать какой процент избыточность должный иметь этот язык с какой частота в язык встречаться нерегулярный и регулярный глагол каков процентный соотношение синоним к антоним почему в язык есть только определённый количество слово как можно эффективно сжать канал связь оставлять язык пригодный для использование человек с точка зрение избыточность язык и том далее как я уже сказать он не понять мой вопрос который касаться инженерный эффективность язык и с тот пора я не наблюдать большой количество исследование в этот область но до тот пора пока мы действительно не понять этот вещий считать если это разумно что существующий естественный язык пройти долгий эволюция и идеально подходить для человек пока мы не понять это мы не смочь создать искусственный язык для общение человек машина поэтому я ожидать много неприятность на путь к понимание человеческий общение через естественный язык конечно проблема общение человек машина существенно отличаться от общение человек человек но какой образ и насколько они отличаться мы до сей пора неизвестно пока мы не смочь хороший понимать язык общение человек или они можно легко обучить маловероятный в такой случай многие из наш проблема в программный обеспечение исчезнуть некоторый время назад когда быть ввести пять поколение компьютер который японец планировать использовать совместно с ия для получение хороший интерфейс между машина и человек большой претензия предъявляться как машина так и язык в результат появиться машина который рекламироваться и инженер вернуться к чертёжный доска по использование ия для помощь человек в программирование это произойти как я и предсказывать в то время для лос аламос поскольку я не видеть чтобы японец пытаться понять основа язык в вышеупомянутый инженерный смысл есть много вещий который мы мочь сделать чтобы уменьшить проблема программный обеспечение как мы она называть но мы требоваться некоторый базовый понимание тот как мы понимать язык который использоваться для общение между человек и между человек и машина прежде чем мы получить действительно достойный решение этот дорогостоящий проблема и этот проблема просто так не исчезнуть вы постоянно читать о разработка продукция программный обеспечение как для эффективность производство так и для надёжность продукт но вы не ожидать что романист спроектировать производство роман возникать вопрос являться ли программирование близкий к письмо чем к классический инженерия я полагать да учитывать проблема попадание человек в космический пространство как русский так и американец реализовать этот цель почти одинаково учитывать весь обстоятельство и допускать какой то доля шпионаж они быть ограничить один и тот же закон физика но дать два романист задача написать о величие и нищета человек и вы вероятно получить два совершенно разный роман даже не упоминать тот как вы быть измерять разница дать такой же сложный проблема два современный программист и я уверять вы вы получить два совершенно разный программа поэтому я верить что современный программирование близкий к письменный чем к инженерный искусство романист связать только свой фантазия что также верно и для программист в написание программный обеспечение оба действие предполагать большой творческий компонент и если вы хотеть сделать программирование инженерный наука вы потребоваться много время для воплощение этот цель и возможно вы в итог совершенно не захотеть это делать мочь быть это весь просто хорошо звучать в ближний год вы прийтись много думать о это также вы мочь начать сейчас делать это сейчас и не верить пропаганда который вы слышать как и мечтатель который прислать в этот область написание служебный программа компьютер делаться достаточно часто и являться крайне ограниченный по охват поэтому можно ожидать что этот область стать инженерный но общий подготовка программный обеспечение к работа вряд ли быть под инженерный контроль в течение многий много год существовать много предложение о тот как повысить производительность как индивидуальный так и группа программист я уже упоминать восходящий и нисходящий дизайн есть и другой подход в который использоваться позиция главный программист ведущий программист который доказывать что программа верный в математический смысл иметься в вид иерархический подход дизайн модель водопад для программирование представлять себя один из подобный подходовха хотя у каждый есть свой достоинство я верить только в тот о который почти никогда не упоминаться он можно назвать думать прежде чем писать программа прежде чем вы начать программировать тщательно обдумать весь деталь включая то какой тест должный проходить ваш программа а также то как быть выполняться последующий обслуживание ваш программа изначально правильный решение чем внесение правка в произвести код в программирование часто возникать следующий проблема программирование часто иметь дело с плохо описать задача и в время самый процесс программирование постепенно начинать выясняться какой в действительность проблема вы заниматься желание чтобы вы быть чётко задать определённый проблема прежде чем начинать программирование часто не соответствовать действительность и следовательно многие текущий предложение по решение сиюминутный проблема с использование программирование быть терпеть крах если быть очень строго описать они алгоритм решение использование высокоуровневый язык программирование означать большой прогресс вот один из метрика улучшение за 30 год такой образ мы мочь видеть что мы достигнуть 90 кратное увеличение производительность программист за 30 год и это составлять всего лишь улучшение на 16 это предположение один человек и это по крайний мера правдоподобно но по сравнение с развитие машина это сущий пустяк человек желать чтобы человек мочь бы развиваться такой же темп однако в дать случай узкий место являться сам человек как таковой и оно не мочь быть управлять в тот смысл как бы мы это хотеть многие исследование показать что программист отличаться производительность от плохой до самый хороший более чем в 10 раз из это я давно прийти к вывод что хороший политика заключаться в тот чтобы очень хорошо оплачивать ваш хороший программист но регулярно увольнять менее хороший если вы просто мочь обойтись и без они разумеется один из способ заключаться в тот чтобы нанимать они по контракт а не на регулярный основа однако подобный практика противоречить закон который как предполагаться должный гарантировать что даже плохой быть работать на какой либо определённый работа на практика гораздо выгодный заплатить плохой сотрудник и заставить они сидеть дом для тот чтобы они не мешать работать более способный человек и я сейчас абсолютно серьёзно цифровой компьютер в настоящее время широко использоваться для имитация нейронный сеть и подобный устройство весь чаща использоваться в вычислительный область нейронный сеть если вы не знакомый с она мочь научиться получать результат когда вы давать она серия входной дать и получать выходной дать приемлемый качество не говорить как именно следовать производить вычисление они мочь группировать объект в класс опять же не получать изначальный инструкция как этот объект следовать группировать или находить они учиться с помощь простой обратный связь который использовать информация который поступать если входной выходной дать не давать правильный ответ исходить из входной дать в некоторый род нейронный сеть представлять себя решение проблема программирование поскольку они построить они на самый дело не запрограммировать вообще но весь же они мочь удовлетворительно решить множество проблема это развивающийся пол который я прийтись пропустить в этот книга но они вероятно быть играть большой роль в будущее компьютер в некоторый смысл они представлять себя жёсткий проводной компьютер это мочь быть просто программа для решение широкий класс проблема при выбор несколько параметр и предоставление большой количество дать другой взгляд на нейронный сеть это довольно общий класс устойчивый система обратный связь вы выбирать тип и количество отзыв который по ваш мнение верно описывать какой либо дать а затем система обратный связь нейронный сеть самостоятельно приходить к дать решение опять же это позволять избежать большой количество программирование поскольку по крайний мера для написать нейронный сеть на компьютер однажды написать какой нибыть программа решающий общий проблема вы смочь с помощь нейронный сеть решить широкий набор проблема который мочь быть решить с помощь ваш общий программа программист вряд ли быть делать что то больший чем вызывать к работа нейронный сеть однако сейчас не известный подобный общий программа в программирование и возможно вы смочь подумать о этот общий программа как о возможный решение проблема программирование в глава о аппаратный средство я тщательно обсуждать некоторый ограничение размер молекула скорость свет и удаление тепло сейчас я должный подвести итог более менее жёсткий ограничение программный обеспечение я сделать сравнение написание программный обеспечение с акт литературный письмо оба судить по весь зависеть от ясный мышление можно ли научить хорошо программировать если мы посмотреть на соответствующий учение в курс творческий письмо то большинство студент такой курс не стать великое писатель а самый великое писатель в прошлое не заниматься творческий курс письмо поэтому очень сомнительно что великое программист можно легко обучить помогать ли опыт неужели бюрократ после многий год написание отчёт и инструкция мочь иначе посмотреть на свой работа у я нет реальный дать но я подозревать что с время этот процедура только ухудшаться обычный использование язык правительственный документ в течение многий год вероятно проникать в стиль письмо бюрократ и делать они только худой и я подозревать что то же самый ждать программист ни многолетний опыт ни количество использовать язык не являться основание для принятие факт что программист стать хороший благодаря это опыт при изучение книга по программирование можно сделать очевидный вывод что большинство автор не являться хороший программист результат который я вы преподносить очень неприятный но весь что вы нужно делать это не принимать желаемый за действительный поверьте в то что я вы говорить на мой сторона стоить многолетний опыт в программировании

