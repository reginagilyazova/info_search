принцип solid в язык go nahmnenik приветствовать вы хабровчанин решить поделиться с сообщество перевод довольно часто по личный наблюдение упоминать пост из блог dave cheney который выполнять для собственный нужда но кто то говорить что нужно делиться возможно для кто то это оказаться полезный этот пост на основа текст из основный доклад golanguk прошедшее 18 ого август 2016 запись выступление как много программист на go в мир подумать о число и держать он в свой голов мы вернуться к это вопрос в конец разговор кто здесь проводить рецензирование код как часть свой работа большой часть аудитория поднимать свой рука что обнадёживать хорошо почему вы делать рецензирование код кто то выкрикивать чтобы сделать код хороший если рецензирование код нужно для тот чтобы отловить плохой код тогда как вы узнать что код который вы рецензировать хороший или плохой сейчас это нормальный сказать этот код ужасный или ого этот код прекрасный точно так же как если бы вы сказать этот живопись прекрасный или этот комната прекрасный но это субъективный понятие а я искать объективный путь чтобы говорить о свойство хороший или плохой код какой мочь быть свойство плохой код который вы мочь использовать при рецензирование относиться ли этот слово к позитивный доставить бы вы удовольствие слышать этот слово при рецензирование ваш код возможно что нет но это улучшение теперь мы мочь сказать что то вроде я не нравиться это потому что слишком сложно модифицировать или я не нравиться это потому что я не мочь сказать что этот код пытаться сделать но что насчёт тот чтобы вести обсуждение позитивно разве это не быть бы здорово если бы существовать способ описать свойство хороший дизайн а не только плохой и иметь возможность рассуждать объективный термин в 2002 год роберт мартин опубликовать свой книга в она он описать пять принцип переиспользовать дизайн програмный обеспечение который он назвать solid принцип аббревиатура они название этот книга слегка устарелый язык о который вестись разговор использоваться порядок 10 год назад но возможно существовать некоторый аспект solid принцип который мочь предоставить мы ключ к разгадка тот как говорить о хорошо разработать программа на go это именно то что я хотеть бы обсудить с вы это утром один принцип solid это s принцип единый ответственность go совершенно не содержимый класс вместо они мы иметь гораздо более мощный концепция композиция но если вы посмотреть на история использование понятие класс я думать здесь есть определённый смысл почему это так важный чтобы один участок код иметь только один причина для изменение чтожий идея тот что ваш код мочь изменяться мучительный но она гораздо менее тягостный чем то что код от который зависеть ваш код тоже мочь изменяться и когда ваш код должный изменяться он должный делать это в соответствие с конкретный требование а не быть жертва сопутствуюещго ущерб итак код который отвечать за единственный задача быть иметь маленький причина для внесение изменение два слово который описывать на сколько просто вносить изменение в ваш программа это связанность и единство связанность это просто понятие который описывать одновременный изменение в два участок код когда изменение в один место означать обязательный изменение в друг смежный но отдельный понятие это единство сила взаимный притяжение в контекст программный обеспечение единство это свойство описывать то что участок код естественно связанный между себя чтобы описать реализация принцип связанность и единство в программа на go мы мочь бы поговорить о функция и метод как это часто бывать при обсуждение srp принцип единый ответственность но я верить что весь начинаться с система пакет в go в go весь код существовать внутри пакет и хороший дизайн пакет начинаться с он имя имя пакет это и описание он назначение и префикс пространство имя в качество пример хороший имя пакет из стандартный библиотека go можно привести когда вы использовать символ другой пакет внутри свой собственный это выполняться с помощь ключевой слово который устанавливать связанность на уровень исходный код между два пакет теперь они знать о существование друг друг подобный фокусирование на именование не просто педантичность плохо именовать пакет упускать возможность описать свой задача даже если бы она у они быть какой возможность предоставлять возможно это сервер но с какой протокол он реализовать какой возможность предоставлять штука который я не должный увидеть должный ли он вообще иметь какой то публичный символ и ровно как и он соучастник часто находиться ряд с другой злостный нарушитель привлечение подобный пакет превращать код в свалка потому что они иметь много обязанность и часто изменяться без причина в мыть представление никакой обсуждение раздельный дизайн не быть полный без упоминание труд дуглас маклрой филисофия unix мелкий острый инструмент который сочетаться для решение более крупный задача часто такой который не быть предусмотренный оригинальный автор я думать что пакет go воплощать дух философия unix в действительность каждый пакет go сам по себя это маленький go программа единственный точка изменение с единственный ответственность два принцип o принцип открытость закрытость бертран мейер который в 1988 год писать как этот совет применяться для язык создать 21 год назад у мы есть тип с поль и метод мы иметь два тип в который встроить вызов метод перекрывать вызов метод поскольку встроить как пол в и предлогаета свой собственный метод скрывать аналогичный в но встраивание существовать не только для метод оно также предоставлять доступ к встроить поль тип как вы мочь увидеть поскольку оба и определить в один пакет мочь получить доступ к приватный поль в как будто оно быть определённо внутри итак встраивание это мощный инструмент который позволять тип в go быть открытый для расширение в это пример у мы есть тип который мочь посчитать колличество нога с помощь свой метод мы встраивать этот тип в новый тип и декларировать то что иметь пять нога при это определять свой собственный метод который возвращаться 5 когда вызываться метод он возвращать 4 это происходить потому что определить внутри тип он принимать в качество ресивер и отсылать к метод тип должный знать о тип в который он быть встроить поэтому он метод не мочь быть изменить встраивание отсюда мы мочь сказать что тип в go и на самый дело метод в go это несколько большой чем просто синтаксический сахар вокруг функция с преобъявить формальный параметр они являться ресивер ресивер это в точность то что вы передавать в он один параметр функция и посколько go не поддерживать перегрузка функция не являться взаимозаменяемый с обычный тип что подводить я к следующий принцип придумать барбара лиск принцип подстановка лиск утверждать что два тип являться взаимозаменяемый если они проявлять такой поведение при который вызывающий не мочь определить разница в язык основать на класс принцип подстановка лиск часто интерпретироваться как спецификация для абстрактный класс с различный конкретный подтип но в go нет класс или наследование потому подстановка не мочь быть реализованный в термин иерархия абстратный класс вместо это подстановка это компетенция интерфейс в go в go от тип не требовать имплементация конкретный интерфейс вместо это люба тип имплементировать интерфейс просто содержимый метод чей сигнатура соответствовать декларация интерфейс мы говорить что в go интерфейс удовлетворяться неявно вместо явный соответствие и это оказывать глубокий влияние на то как они использоваться в язык хорошо продумать интерфейс это скорее всего маленький интерфейс преобладать идиом это то что интерфейс содержимый только единственный метод вполне логично что маленький интерфейс содержимый простой имплементация поскольку сложно сделать иначе из что следовать что пакет это компромисный решение простой имплементация связанный что приводить я к мой любимый интерфейс в go интерфейс очень простой читать дать в указанный буфер и возвращать вызывающий код число байт который быть прочитать и любой ошибка который мочь возникнуть в процес чтение это выглядеть просто но это очень мощно поскольку иметь дело с чем угодный что мочь быть выраженный как поток байт мы мочь конструировать объект читатель буквально из что угодный константный строка массив байт стандартный поток вход сетевой поток архив gzip tar стандартный выходной поток или команда выполнить удалённый через ssh и весь этот реализация взаимозаменяемый поскольку они удовлетворять один простой контракт итак принцип подстановка лиск применимый в go и сказать можно суммировать прекрасный афоризм покойный джим вейрих и это отличный переход к четыре принцип solid четыре принцип это принцип разделение интерфейс который читаться как в go применение принцип разделение интерфейс мочь пониматься как процесс изоляция поведение необходимый функция для выполнение она работа в качество конкретный пример скажем у я есть задача написать функция который сохранять структура на диск я мочь определить такой функция давать назвать она она принимать как источник для запись предоставить но здесь возникать несколько проблема сигнатура препятствовать возможность запись дать по какой тот адрес в сеть предположим что сетевой хранилище скорее всего стать требование в дальнейший и сигнатура этот функция мочь измениться что повлиять на весь кто она вызывать поскольку оперировать непосредственно файл на диск тестировать она довольно неприятно чтобы верифицировать операция тест должный считать содержимое файл после запись кроме тот тест должный убедиться что быть записать в временной хранилище и всегда удаляться впоследствии также определять много метод который не релевантный как чтение дирректория и проверка тот являться ли путь символический ссылка быть бы полезно если бы сигнатура наш функция быть описанный только тот часть который релевантный она задача что мы мочь сделать с этот проблема использовать мы мочь применить принцип разделение интерфейс для переопределение такой образ чтобы она принимать интерфейс который описывать более общий задача операция с файл с этот изменение люба тип который реализовать интерфейс мочь быть заместить предыдущий это делать применение более широкий и пояснять сторона вызывающий какой метод из тип релевантный требовать операция как автор я более не должный иметь возможность вызов весь нерелевантный метод из поскольку они спрятанна за интерфейс но мы мочь пойти немного далёкий с метод разделение интерфейс в один вряд ли следовать принцип единственный ответственность он быть читать файл в который только что произойти запись чтобы проверить содержимое что должный быть ответственность другой часть код потому мы мочь сузить спецификация интерфейс который мы передавать в исключительно до открытие и закрытие файл в второе предоставлять с механизм закрытие поток который мы унаследовать с желание сделать это похожий на обычный механизм работа с файл возникать вопрос при какой обстоятельство быть закрытый возможно быть вызывать без каки либо условие или быть вызвать в случай успех весь это представлять пороблема для вызывающий поскольку он мочь пожелать добавить дополнительный информация в поток после тот как документ уже записать грубый решение быть определение новое тип который встраивать и переопределять метод предотвращать вызов из закрытый основный поток но это быть скорее всего нарушение принцип подстановка барбара лиск поскольку на самый дело ничто не закрывать куда хороший быть решение переопределить принимать только полностью лишить он возможность делать что то помимо запись дать в поток но применять принцип разделение интерфейс к наш функция результат одновременно становиться функция который наиболее специфичный в условие она требование единственный что она нужно это что то куда можно писать и наиболее важный в этот функция то что мы мочь использовать для сохранение наш дать в любой место где реализовать интерфейс привести выше цитата интересный мем который просочиться в дух go в течение несколько последний год в этот версия в рамка стандартный твит не хватать один нюанс и это не вино джек но я думать что она представлять один из главный причина появление придание о дизайн язык go последний принцип solid это принцип инверсия зависимость который утверждать но что означать инверсия зависмость на практика для программист на go если вы применять весь принцип о который мы говорить до это момент тогда ваш код уже должный быть расположить в дискретный пакет каждый с единственный и хорошо определённый зависимость или цель ваш код должный описывать свой зависимость в термин интерфейс и этот интерфейс должный быть направленный на описание исключительно тот поведение который требоваться это функция другой слово не должный остаться много работа итак как я представлять себя то о чем мартин тут говорить в основное в контекст go это структура ваш граф импорт в go ваш граф импорт должный быть ацикличный попытка игнорирование ацикличность привести к ошибка компиляция но гораздо более серьёзный ошибка мочь быть в архитектура при прочий равный условие граф импорт хорошо разработать go программа должный быть широкий и относительно плоский вместо тот чтобы быть высокий и узкий если у вы есть пакет функция который не мочь исполняться без привлечение помощь другой пакет возможно это сигнал о тот что не достаточно хорошо определить граница пакет принцип инверсия зависимость поощрять вы переносить спецефическовать ответственность на столько высоко на сколько возможно в граф импорт в ваш пакет или на верхний уровень обработчик оставлять нижний уровень код работать с абстракция и интерфейс в качество резюме когда каждый из принцип solid применяться в отношение go они являться мощный инструмент дизайн но использовать вместе они являться главный тема принцип единый ответственность поощрять вы стуктурировать функция тип и метод в пакет который естественно связанный между себя тип и функция вместе служить единственный цель принцип открытость закрытость поощрять вы к компромис простой тип и более сложный путём использование встривания принцип подстановка барбара лиск поощрять вы выражать зависимость между ваш пакет в термин интерфейс а не конкретный тип определять небольшый интерфейс мы мочь быть более уверенный что реализация быть удовлетворять свой контракт принцип разделение интерфейс продолжать этот идея и поощрять вы определять функция и метод который зависеть только на тот поведение который имя нужно если ваш функция нуждаться только в параметр тип интерфейс с единственный метод тогда скорее всего этот функция иметь единственный ответственность принцип инверсия заисимость поощрять вы перемещать знание о зависимость ваш пакет от этап компиляция в go мы наблюдать это с сокращение число импорт использовать конкретный пакет на этап выполнение код если вы хотеть подвести итог это разговор то скорее всего это быть поскольку интерфейс позволять программист go описывать возможность свой пакет а не конкретный реализация весь это просто ещё один способ сказать разъединение что и есть цель поскольку слабосвязанный код лёгкий поддаваться изменение как заметить санди метз потому что если go планировать быть язык в который компания инвестировать в долгосрочный перспектива то ключевой фактор в они решение быть то на сколько легко поддерживать код на go и как просто он поддаваться изменение в завершение давать вернуться к вопрос который я открыть этот разговор как много программист на go в весь мир вот мой предположение что половина миллион программист на go быть делать с свой время чтожий очевидно они быть писать много код на go и если мы быть честный не весь код быть хороший часть код быть плохой пожалуйста понять что я не пытаться быть жестокий но каждый из вы в этот комната с опыт разработка на другой язык язык из который вы прислать в go знать из собственный опыт что в это предсказание есть доля правда возможность помочь наш язык добиться успех для каждый программист заключаться в тот чтобы не создавать такой беспорядок о который человек начинать говорить когда они шутить о c сегодня рассказ высмеивать другой язык за то что они раздутый многословный и перегруженна однажды мочь быть применить в отношение go и я не хотеть чтобы это случиться и потому у я есть просьба go программист нужно перестать говорить о фреймворка и начать большой говорить о дизайн мы должный перестать фокусировать на производительность люба цена и вместо это сфокусироваться не переиспользование люба цена я хотеть бы увидеть сегодня как человек говорят о тот как использовать язык который у мы есть независимо от они выбор и ограничение чтобы создавать решение и решать реальный проблема я бы хотеть услышать сегодня о тот как человек говорят о дизайн программа на go такой способ чтобы они быть хорошо спроектированный разъединить переиспользовать и отзывчивый к изменение сейчас это отлично что так много человек сегодня прислать чтобы послушать такой отличный состав спикер но реальность таков что не важный на сколько этот конференция вырасти в сравнение с общий число человек который использовать go в течение весь он жизнь мы лишь малый часть потому наш задача рассказать остаться часть мир как хороший програмный обеспечение должный быть написанный хороший програмный обеспечение совместимый поддаваться изменение и показать имя как сделать это использовать go и это начинаться с ты я хотеть чтобы вы начать говорить о дизайн возможно использовать часть идея который я представить тут надеяться вы провести свой собственный исследование и применить этот идея для свой проект тогда я хотеть чтобы вы написать пост в блог о это рассказать на семинар о тот что вы сделать написать книга о тот что вы научиться и приходить снова на этот конференция в следующий год и рассказать о тот что вы добиться делать весь это мы смочь сформировать экосистема разработчик на go который заботиться о свой программа разработать для тот чтобы продолжать работать спасибо

