что действительно случиться с vista m1rko я обычно пища о вещь который непосредственно заниматься или писать код или управлять проект в этот статья я выбрать другой подход чтобы написать о сво метр взгляд на глубинный причина фиаско windows vista кодовый название longhorn хотя это случиться более десять год назад то быть ключевой период по переход на мобильный устройство и тот событие вызвать долговременный последствие внутри microsoft я наш литр что многие попытка описать проблема microsoft особенно в связь с переход на мобильный платформа неубедительный и не совпадать с мой понимание тот что случиться статья в vanity fair описывать бюрократический гниль и подкова рный борьба жизнь стать непрерывно жестокий или культурный гниль из за негативный последствие система оценка рейтинг конкурентный стек в the atlantic описывать ситуация как классический дилемма инноватор думать что ситуация можно изложить иначе с хороший привязка к конкретный факт о проект и истинный мотив ключевой сторона это не попытка написать альтернативный история я понятие не иметь что бы случиться не быть сделать тот ошибка но они определ нно не помочь microsoft пройти через этот переломный момент в компьютерный индустрия это и не журналистский расследование я не проводить большой серия интервью с ключевой участник событие здесь мо личный мнение на основание тот что я видеть в то время и что узнать потом хотя в то время я работать в подразделение office я приходиться тесно сотрудничать с многий коллега из подразделение windows так что я хорошо осведомть наш о процесс который происходить там просить прощение за большой размер статья вот краткий изложение поскольку это очень важный для дать история хотеть начать с маленький пример о структура индустрия и создание ценностный качество любой устройство состоять из аппаратный обеспечение операционный система ос и приложение на самый базовый уровень ос управлять и выставлять аппаратный ресурс такой образ что приложение мочь совместно использовать они ос предоставлять также программный интерфейс api позволять разный тип оборудование подключаться к устройство и api предоставлять приложение доступ к это оборудование а также системный сервис ос хотя на базовый уровень ос предоставлять только аппаратный ресурс на практика ос включать в себя много другой высокоуровневый функция в тот число графический пользовательский интерфейс сложный управление для отображение и редактирование форматировать текст или внедрение html высокоуровневый сетевой поддержка управление файл механизм для обмен дать и функциональность между приложение и даже целое приложение вроде браузер почтовый клиент работа с фотография и камера история ос особенно в потребительский мир предусматривать включение в себя вс большой и большой высокоуровневый сервис который или напрямую предоставляться пользователь или выставляться как api для приложение это развитие высокоуровневый функциональность обусловить и многосторонний сетевой эффект присущий бизнес ос вс больший и больший количество пользователь ос привлекать большой разработчик большой разработчик создавать большой приложение что делать ос более привлекательный для пользователь это приводить к цикл когда ещ большой пользователь веда том к ещ больший рост количество разработчик предоставлять api операционный система вот что делать бизнес стратегия настолько успешный и стабильный для победитель это состязание миллион разработчик в целое тратить огромный усилие на программирование системный api и сервис за себя чем сильный какой то приложение зависеть от сложный api предоставлять определ нной ос тем сложный перенести это приложение на какой то другой ос значит даже если конкурент суметь повторить ключевой функциональность другой ос он вс равно не получить этот приложение единственный поставщик ос совершенно невозможно продублировать усилие затратить миллион разработчик с такой динамика существовать много усиливать друг друг причина для поставщик добавлять в свой ос вс более сложный функциональность и api который упрощать разработчик доступ к этот функциональность сложный функциональность должный привлечь разработчик а с помощь простой api они смочь быстро создать хороший приложение этот хороший приложение сразу входить в благотворный цикл привлечение больший количество пользователь классический пример быть то когда windows стать один ос где разрешить встраивать html документ непосредственно в приложение что критически важный после использование этот функциональность становиться сложный перенести приложение на другой ос если посмотреть на windows ios и android то весь они использовать тот же стратегия хотя у microsoft apple и google разный способ монетизация microsoft классически бер том оплата за лицензия на каждый устройство е платить oem сборщик который продавать устройство с windows это горизонтальный бизнес стратегия с больший количество oem каждый из который платить microsoft за каждый собранный и продать устройство apple монетизироваться через производство и прямая продажа устройство google зависеть от постпродажный монетизация в основное через поиск на самый дело страх что apple и microsoft забрать мобильный рынок поиск и мобильный сервис в целое это главный причина инвестиция google в android microsoft также переходить на прямая монетизация от продажа устройство через линейка surface а также на постпродажный монетизация через bing и платный подписка вроде office 365 ещ один важный часть который нужно здесь учитывать это сторонний middleware вроде java и adobe flash в какой то смысл он не отличаться от высокоуровневый сервис ос кроме тот что созд тся и предоставляться сторонний компания у провайдер ос и разработчик связующий софт отношение из смесь любовь и ненависть в тот отношение что middleware позволять разработчик быстрый создавать отличный приложение для они платформа это любовь часть ненависть управляться несколько движущий сила определ нный тип связующий по специально решать задача создание приложение который работать на разный платформа middleware вроде java и flash распространяться под девиз написать однажды запускать везде приложение построить на такой middleware напрямую не зависеть от api в ос и поэтому мочь работать на люба платформа где существовать это связующий по оно осуществлять преобразование свой api в нативный api операционный система заметить что современный читатель мочь представлять java или как серверный инфраструктура для веб сайт или как предпочтительный язык для разработка android приложение я же иметь в вид первопричина он создание как язык для браузерный приложение по требование в такой качество он рассматриваться в время когда планироваться vista кроссплатформенный связующий по разрушать сетевой эффект который создаваться в результат привязка приложение к определ нной ос через эксклюзивный api специфический для этот ос приложение построить на такой связующий по также склонный использовать наименьший общий функциональность весь ос и не так быстро перенимать новое возможность который появляться в ос некоторый вид функциональность ос создавать свой собственный внутренний сетевой эффект при который чем большой приложение использовать этот функциональность тем хороший работать весь приложение классический пример являться форматировать копипаста чем большой приложение поддерживать копирование и вставка форматировать контент между себя тем более ценный являться ос для каждый пользователь если сторонний провайдер связующий по блокировать этот динамик то с время он блокировать возможность устойчивый дифференциация ос браузер как платформа доставка приложение вероятно самый стабильный пример связующий по который нарушать динамик системный api если посмотреть на 35 год компьютерный история то в какой то момент появляться и другой подход но весь они провалиться по причина в который мы здесь не быть углубляться для наш история критически важный являться то что 20 год назад быть не так очевидно в что вс вылиться страх middleware и нарушение стабильный дифференциация api быть главный фактор в время vista давать разбер мся в история windows и проблема в реализация это проект я собираться провести тяж лую работа по обобщение итог но думать что мы не потерять быть обычно у каждый релиз windows иметься главный тема и примерный срок например windows 95 должный быть обновить пользовательский windows на 32 битый установить современный файловый система новый ui и стандартный сетевой средство включая браузер кроме основный тем отдельный разработчик и группа самостоятельно определять ключевой функция в свой область и начинать разработка продукт в разработка получаться нестабильный поскольку в течение долгий время новое функция ещ не мочь стабильно работать друг с друг в определ нный момент разработчик принимать решение что достаточно хорошо развить функционал и начинать работать над стабильность и готовиться к выпуск исторически разработчик windows обычно сильно просрочивать планировать дата выпуск windows 95 изначально называться windows 93 а важный планировать функциональность или отбрасываться или значительно урезаться по сравнение с первоначальный план этап подготовка к выпуск часто превращаться в марш смерть когда баг исправляться поздний вечер и на выходной и постоянно сдвигаться дедлайна хотеть заметить что ключевой отличие между windows и office быть то что после office 97 команда office устанавливать дата выпуск следующий версия и обычно соблюдать срок это позволять добиться широкий координация с минимальный накладный расход процесс сильно отличаться от современный практика разработка независимо от тот пришлый идея отдельный функция сверху вниз как часть более широкий ви дения или снизу вверх от отдельный разработчик и группа но современный практика обычно предусматривать непрерывный контроль качество и очень частый релиз для пользователь сервис мочь обновляться в продакшний несколько раз в день а новый клиентский код выходить еженедельно или ежемесячно обновление клиент дорого обходиться как провайдер так и пользователь что затруднять слишком частый обновление это требовать чтобы основный архитектурный и инженерный инфраструктура над жно работать в больший сложный система такой как windows или office этот процесс не всегда делать простой значительный прорыв в сложный функциональность но кардинально увеличивать гибкость группа разработка и они способность реагировать на внешний событие и реалия он также да том гораздо более честной оценка реальный текущий прогресс возможно стоить написать отдельный статья как подразделение office осуществить переход на этот практика современный разработка но достаточно сказать что подразделение windows в то время даже близко к он не приблизиться windows xp стать масштабный релиз который тоже соответствовать упомянуть печальный шаблон она объединять бизнес и пользовательский платформа на над жном ядро windows nt с дружественный пользователь интерфейс сложно быть добиться совместимость с весь приложение создать для платформа windows но это быть ключевой фактор для переход на единый бизнес и пользовательский платформа к сожаление в windows xp найти 0day уязвимость который попасть в заголовок новость прямо в день публичный релиз этот и другой катастрофа в область информационный безопасность заставить microsoft кардинально модернизировать по и пересмотреть практика разработка в область безопасность и в конечный итог выпустить безразмерный сервис пак для windows xp в создание который принять участие большой часть подразделение windows вдобавок ключевой группа по разработка системный ядро windows группа core работать над 64 битный версия что оcобенно важный для объединение клиентский и серверный установка windows в то время windows отставать от другой корпоративный платформа вроде sun solaris в область 64 битный вычисление это быть критически важный поскольку windows конкурировать и успешно в сфера более крупный корпоративный сервер хотя крупный отдел подразделение windows концентрироваться на назвать инициатива не меньший по размер организация заниматься создание следующий поколение windows поверх управляемый платформа c здесь нужно немного объяснить подоплый ку с самый один день браузер начать развиваться как платформа доставка приложение пресловутый цитата марка андриссти netscape скоро оставить от windows только плохо отладить набор драйвер устройство датироваться 1995 метр год это привести к реализация стратегия поддержать и надстроить embrace and extend который доставить microsoft столько неприятность в связь с антимонопольный расследование microsoft создать и развивать собственный браузер и механизм внедрение проприетарный код activex в то время появиться java как альтернативный стратегия доставка приложение разработчик мочь использовать java высокоуровневый язык с свой собственный богатый набор api где код автоматически скачиваться и запускаться в браузер java рекламироваться как технология написать однажды запускать везде что явно попадать в спектр реакция ненависть по отношение к связующий по неожиданно microsoft подписать лицензионный соглашение с sun относительно java но потом на компания подать в суд когда microsoft расширить java для прямой доступ к нативный интерфейс windows api что нарушать принцип запускать везде но давать разработчик java доступ к более богатый и расти набор api на платформа microsoft договориться о сделка по иск о java и в конечный итог решить пойти по собственный путь с язык программирование c это решение оказаться катастрофический по многий причина заметить что c сам по себя представлять себя отличный образец технология катастрофа быть в стратегия c это управляемый язык главное образ это означать что разработчик не нужно управлять выделение и освобождение память вручную язык и среда выполнение использовать для автоматический освобождение любой участок память который большой не использоваться важный что среда выполнение также предотвращать тип ошибка в память из за который в то время появляться многие уязвимость в безопасность в то время а в реальность в течение всего последующий десятилетие продолжаться страстный рассуждение о влияние автоматический управление память на производительность программирование и безопасность я не быть пересказывать здесь тот спорый достаточно сказать что самый успешный современный операционный система ios решить не играть в этот игра android прод тся в больший количество но ios получать львиный доля прибыть управляемый окружение присущий перерасход ресурс по сравнение с неуправляемый окружение так что имя требоваться большой память для работа большинство окружение который использовать преимущество производительность управляемый код стараться осторожно ограничить он использование только там где это иметь наибольший смысл а не слепо использовать везде подряд если программист впервые столкнуться с окружение такой тип а это почти 100 разработчик проект windows в то время то они несерь зно относиться к использование память но как бы не управляться память автоматически или вручную она представлять себя ресурс и несерь зной отношение к ресурс веда том к раздутый код который для работа требоваться большой память на самый дело даже высокий продуктивность генерация большой количество код не всегда главный критерий успешность проект в то время использование больший количество ресурс являться частью система ценность поскольку так усиливаться значение толстой клиент для вычислительный возможность система по сравнение с тонкий клиент вроде простой приложение работать через веб страница при создание обновление longhorn разработчик windows хвастать бы тем сколько новый api они написать частью ставка на c также быть ставка на богатый библиотека основный класс и создание новый клиентский технология как набор библиотека класс поверх этот база базовый библиотека предоставлять простой тип вроде строка и массив а также более сложный структура дать и сервис вроде список и таблица хэширование смысл в тот что это должный обеспечить единообразие для всего windows api win32 поначалу быть относительно небольшой единообразный api но за последний десятилетие сильно раздуться усилие такой большой количество группа который добавлять в набор api без какой либо единый последовательный концепция новый библиотека рассматриваться как возможность вернуть вс на круг свой тот факт что ни один другой операционный система не выбрать такой путь рассматриваться как свой род большой ставка что являться фундаментальный частью система ценность в внутренний культура microsoft к сожаление кроме проблема с использование раздутый ресурс существовать фундаментальный вызов с использование новый технология в операционный система особенно с тем как обрабатывать сбоить ресурс в критический часть ос как независимо обновлять приложение управляемый среда выполнение и ос и как сделать чтобы различный часть ос развиваться независимо друг от друг который не решить или не полностью понимать в то время не существовать буквально никакой стратегия миграция для существующий приложение построить поверх неуправляемый win32 несмотря на это огромный армия разработчик развернуть строительство поверх этот нестабильный платформа над чем они работать в это место иметь смысл подключить к рассказ билл гейтс весь история microsoft с момент основание компания посвятить превосходство софт над железо программный обеспечение являться повсеместный товар а ценность именно в программа если посмотреть на устойчивый прибыль экосистема пк то такой взгляд действительно кажется точный определ нно он точный с точка зрение взаимоотношение oem и microsoft компания intel получать львиный часть прибыть среди производитель всего компьютерный оборудование в то же время динамик весь компьютерный экосистема поддерживаться бесконечный экспоненциальный рост производительность железо под действие закон мура и другой экспоненциальный тренд программный обеспечение словить волна поскольку именно оно получать основный экономический выгода от финальный продукт помнить что фундаментальный ключевой роль ос это предоставлять аппаратный ресурс для добросовестный использование приложение переплёт нный роль железо и софт иногда затруднять оценка распределение стоимость на самый дело анализ рынок смартфон помогать внести ясность когда инженер rim производитель доминировать телефон blackberry посмотреть демонстрация оригинальный iphone они быть это невозможно невозможно сконструировать полноэкраннный легковесный телефон с тач интерфейс и такой производительность чтобы аккумулятор хватать на достаточно долгий время но в реальность такой оказаться возможный последний десять год рынок двигать впереть далее непрерывный аппаратный инновация хороший экран более быстрый связь более производительный процессор большой память хороший камера новое сенсор более мкий батарея уменьшение вес мгновенный включение опосредованно через программный обеспечение ос когда ios открыться для сторонний приложение поразительный оказаться то как аккуратно ос контролировать поведение приложение чтобы сохранить общий производительность устройство от стандарт и обязательный рассмотрение в курировать каталог приложение apple до продумать изоляция приложение в песочница от первоначальный ограничение на один задача без фоновый процесс до ж сткий ограничение на отклик приложение и обработка аудио и видео с аппаратный ускорение и низкий энергопотребление а также множество другой техника направить на сбережение драгоценный энергия батарея очень многие инновация ios фундаментально относиться к ключевой функция ос по управление аккуратный экспонирование аппаратный ресурс приложение трудно не заметить огромный разница с подход который исповедовать разработчик подразделение windows с выпуск vista роль аппаратный инновация заключаться в тот чтобы сделать возможный программный инновация а не в тот чтобы софт олицетворять инновация железо когда начаться проект longhorn три крупный группа начать масштабный работа по переосмысление клиентский программный стек поверх управляемый платформа c группа winfs должный быть создать новый слой универсальный хранилище для приложение вместо простой иерархический подборка файл и директория файловый система работать под управление полнофункциональный реляционный движок это должный быть не только облегчить создание новый мощный приложение но они дать не запираться бы в непрозрачный файл а становиться доступный для другой приложение и реляционный таблица который можно смешивать и сравнивать в новый ещ более функциональный приложение это пример внутренний сетевой эффект благодаря который создаваться мощный ров против конкурент информация также открываться новый файловый менеджер для простой поиск и сложный запрос так должный быть наконец то реализоваться идея универсальный хранилище cairo который забросить и не суметь внедрить в windows 95 группа avalon поздний windows presentation foundation должный быть переосмыслить уровень представление поверх мощный графический процессор уровень представление концентрироваться на создание универсальный холст где пользовательский интерфейс и контент насыщенный приложение незаметно смешиваться между себя так что результат частично представлять себя документ а частично пользовательский интерфейс вс под управление мощный графический процессор способный обрабатывать 3d игра три группа писать код который выйти как windows communication foundations wcf для создание сетевой функция это критический компонент практически любой современный приложение сочетание насыщенный хранилище и насыщенный представление быть чаша грааля для билл построить на стабильный управляемый инфраструктура c этот компонента сделать бы возможный создание новый класс мощный приложение который разработчик мочь бы быстро и эффективно конструировать насыщенный инфраструктура и защитный ров api обеспечить бы ос благоприятный цикл с положительный обратный связь ещ на один десятилетие так что пошло не так если один слово то вс некоторый проблема объясняться провал в исполнение краткосрочный задача а другой быть долговременный стратегический ошибка когда группа core выступить с проект повышение безопасность и 64 битный windows она провести переоценка статус всего проект longhorn разработчик написать объ метр код к сожаление когда вы строить сложный система и работать без число ткий ограничение и дедлайн правильный ментальный состояние команда который генерировать много код не соответствовать ментальный состояние тот кто строить железный дорога через весь страна и уже завершить е на 90 они скорее можно сравнить с тот кто вырыть невероятно глубокий ям а теперь думать как выбраться обратно и закопать е команда только справиться с понимание весь последствие попытка доставка функция ос поверх этот управляемый инфраструктура они осознать что у они тонна работа чтобы просто сделать реальность базовый предпосылка кроме всего это ни один из основный компонент не доведа наш до стадия готовность они также начать понимать ограничение производительность при внедрение основный новый подсистема в существующий код проект winfs и avalon не заменять существующий инфраструктура ос а ложиться поверх не так что существенный расход вычислительный ресурс просто добавляться сверху как объясняться в от 2005 год олчин принять решение вынести этот основной компонента из релиз продолжать они разработка в результат после тр х год продуктовый цикл работа над они приходиться начинать фактически с нуль весь этот управляемый функция нужно быть исключить из основный состав ос и поставлять отдельно они исключение явно быть правильный решение но исключение оба подсистема выявить и вызвать проблема который затем сохраниться в течение десятилетие ставка на c и управляемый код включать в себя стратегия который сокращать вложение в неуправляемый слоить win32 я помнить долгий совещание с попытка уговорить представитель подразделение windows сделать относительно небольшой коммит в текстовый и графический функция необходимый для office исключение из релиз этот компонент c сделать ещ более очевидный что windows ещ несколько год остаться без ключевой управлять элемент пользовательский интерфейс для разработчик такой как office в сво метр основное win32 api также катастрофический последствие иметь то что ставка на avalon сопровождаться массивный сокращение работа над ie группа ie сократить перевести часть сотрудник в проект avalon а ie оставить на жизнеобеспечение с невозможность решить куча проблема в безопасность число кой постоянно множиться долгосрочный ви дение заключаться в тот что html стать древний технология а тот приложение на который нацелить наш конкурент с помощь браузер и html стать работать поверх новый инфраструктура avalon это стать гигантский стратегический ошибка который открыть дверь для распространение firefox а затем и браузер chrome от google хотя невозможно сказать предотвратить бы такой исход вложение в ie но определ нно не стать бы худой прекращение вложение также подорвать команда ie и оставить они неподготовленный и с нехватка персонал перед лицо продолжаться быстрый эволюция веб технология что разрушить репутация ie среди веб разработчик факт соверша нной ошибка немедленно стать очевидный для весь в компания здесь не требоваться быть особый провидец office и другой подразделение в компания активно вкладываться в веб и html не существовать никакой реальный способ как этот инструмент мочь перейти на avalon а уж тем более весь индустрия на самый дело команда avalon так никогда и не описать этот реальный способ должный быть случиться нечто волшебный и вдруг весь начинать писать приложение avalon вместо html это быть настолько же абсурдно насколько и бессовестно сразу после тот как мы выиграть война браузер и наблюдать поглощение netscape корпорация aol мы кардинально снижать дальнейший развитие технология на этот открытый стандарт только с начало проект windows 7 восстановить персонал группа ie и возобновить активный инвестиция в ie и стандартный веб технология с avalon связать и другой последовать проблема модель avalon основываться на концепция билл чтобы обеспечить универсальный холст среда выполнение для приложение как я объяснять в статья один из главный проблема для разработчик фреймворок вроде avalon как открыть функция на разный уровень так чтобы приложение мочь привязаться к он на соответствующий функциональный уровень и не нести лишний затрата производительность если открыть функциональность только на самый высокий уровень то весь работа по суть быть недоступный для более сложный приложение такой как приложение office который нужный привязка на более нижний уровень потребоваться ещ 10 год до выпуск windows 10 прежде чем решить этот проблема на уровень архитектура avalon также сделать ставка на энерго мкий графический карта мобильный графический модель хотя использовать некоторый такой же элемент в основное фокусироваться на достижение плавный анимация за сч том предварительно отрисовать текстура или сло в с они зуммирование панорамирование и смешивание количество сло в аккуратно ограничиваться чтобы мобильный графический процессор показывать большой частота кадр необходимый для плавный анимация и взаимодействие с пользователь потреблять при это немного энергия графический модель avalon эффективно двигаться в противоположный направление проблема с winfs в какой то смысл оказаться даже более фундаментальный чем с avalon в то время как avalon поставляться отдельно а некоторый ключевой концепция использоваться как основа для компонент ui в windows 8 и 10 проект winfs полностью прекратить изначально предполагаться что winfs файловый система невероятно сложный задача представляться заменить старый файловый система на полностью новый реализация который нести том в себя некоторый важный новый функциональность и в то же время сохранить видимый неизменность для огромный массив существующий программный обеспечение особенно с уч тот тот что основной разработчик базовый подсистема windows тогда заниматься другой задача безопасность и 64 битный версия так что winfs создаваться как сторонний компонент который предоставить дополнительный функциональность для поиск и насыщенный запрос этот конструкция означать что winfs быть нести значительный дополнительный затрата на производительность с меньший количество возможность для сквозной оптимизация как и для люба новый функция этот затрата должный сочетаться с е преимущество но в тот момент winfs действительно предоставлять только поиск который быть просто функция а не изменение парадигма как предполагать билл в microsoft уже иметься движок десктопный поиск который потреблять гораздо маленький ресурс чем winfs более тот осуществление такой переворот в экосистема для локальный поиск пк когда бoльший часть информация мигрировать с пк в облако говорить о крупный непонимание современный тенденция из за этот неустанный попытка сосредоточить инновация на насыщенный клиент на более глубинный уровень ви дение билл экосистема приложение который хранить вс у себя и делиться свой дать в это реляционный хранилище прямо противоречить тот как приложение строить свой модель дать в то время как некоторый настольный приложение и почти весь внутренний приложение для it использовать реляционный хранилище для свой внутренний модель дать они не хотеть предоставлять этот модель дать для неконтролируемый чтение и запись другой приложение я объяснить некоторый из фундаментальный причина в вышеупомянутый статья быть и есть множество другой вариант для приложение который хотеть использовать реляционный хранилище и конечно долговременный тенденция заключаться в тот что весь этот дать перемещаться в облако а не запираться в хранилище локальный пк решение продолжать инвестиция в этот управляемый стек и вынести он из релиз ос повлечий том долговременный последствие и после выпуск vista руководство смириться с реальность что он не стать частью релиз но продолжать рассматривать этот технология в качество основный звено клиентский инновация когда синофски реорганизовать структура подразделение windows для продуктовый цикл windows 7 он вын с весь проект управляемый код из подразделение windows в подразделение разработка devdiv выстроить они наряду с другой команда devdiv который заниматься создание управляемый компилятор среда выполнение базовый библиотека и среда разработка поздний он вступить в борьба за то что считать основной среда выполнение windows в процесс продуктовый цикл windows 8 но сейчас эффективно отложить борьба вытеснить этот команда и не создавать альтернативный проект внутри организация windows это повлечь долгосрочный последствие проект продолжать потреблять внутренний инвестиция и ресурс общественность продолжать думать что за управляемый среда выполнение будущее windows образоваться территория выжечь земля когда не производиться никакой значимый инвестиция за предел управляемый область и следовательно полностью отсутствовать инвестиция для office и другой крупный неуправляемый приложение кроме тот команда по разработка управляемый код теперь даже не думать о серь зный вложение связанный с новый инновация аппаратный обеспечение а только о построение полностью независимый связующий слой этот управляемый библиотека и среда выполнение стать чистый связующий по на самый дело в попытка конкурировать с flash от который потом отказаться этот компонента даже упаковать вместе в вид silverlight и распространять под разный платформа ос трудно предоставить более явный доказательство что весь этот программный инновация оказаться полностью оторвать от тот чтобы концентрироваться на трансляция аппаратный инновация такой образ на какой способный только ос если считать связующий по один из самый страшный кошмар для поставщик ос с точка зрение потеря монополия на посредничество то становиться ясно что мы столкнуться с враг и это один из мы я не заявлять что обладать инсайдерский информация за тот период но помнить раздражение из за этот сконцентрированность на слой управляемый год и они бесполезность для большинство сценарий office хотя не мочь число тко сформулировать стратегический проблема на самый дело именно системный инновация в ios дать число ткий понимание задний число насколько неправильный направление быть выбрать для работа обвинение в раздувание код который я сделать в адрес стек c очевидно не объяснять проблема с производительность vista поскольку управляемый код вывести из релиз windows xp поставляться с минимальный системный требование в 64 мб оперативный память с повышение до 128 мб после выход основный сервис пак безопасность для windows xp в vista требование к память вырасти до 512 мб хотя реалистично для нормальный работа требоваться 1 гб читатель старший поколение мочь помнить скандал с сомнительный пометка vista capable на компьютер ни раз никто внятно не объяснить причина повышение минимальный системный требование быть много отдельный команда который стремиться воспользоваться неизбежный увеличение производительность из за закон мура и кумулятивный эффект стать это раздувание код в реальность важный фактор для общий производительность и общий проблема с качество стать спешка с релиз который начаться близкий к окончание проект низкий производительность стать результат не только больший решение но часто и множество мелкий решение сделать в качество компромисс между преимущество и недостаток лишь бы получить результат после долгий часы анализ код когда уже просто не оставаться время сделать в windows 7 оптимизация явно показывать что возможность для улучшение тогда быть но не быть время другой удар по репутация vista как стабильный система нана с проблемный характер драйвер ключевой программный обеспечение который писать и поставлять производитель оборудование графический карта сетевой карта ж сткий диск и др для встраивание в ос в система vista произвести важный изменение в модель драйвер они вынести из ядро ос в слой который над жнея управлять знаменитый синий экран смерть windows xp после сбой операционный система почти всегда появляться из за сбой какой нибыть сторонний драйвер вынести этот код из ядро windows должный быть повысить общий над жность система изменение в модель драйвер требовать от весь производитель оборудование массивный изменение в код драйвер под windows преимущество этот крупный отстройка от конкурент становиться камень на шея при попытка произвести настолько масштабный изменение в весь экосистема поскольку выход vista часто откладываться производитель аппаратный обеспечение быть трудно установить приоритет для этот работа и срок е выполнение многие оказаться не готовый к момент выход vista это означать что один опыт использование новый система у многий пользователь быть связать с отсутствовать или очень глючный драйвер коллапс с масштабирование скорость процессор который я упоминать в начало этот статья вн с свой вклад в проблема с производительность компьютерный индустрия развиваться под влияние экспоненциальный рост в обработка дать объ ма дать который можно хранить и обрабатывать скорость обработка полоса пропускание и задержка коммуникация между разный устройство многий из это обусловить закон мура регулярный удвоение количество транзистор который помещаться на тот же площадь интегральный микросхема этот простой закон удвоение знак пользователь они мочь ожидать что закон мура проявиться в увеличение скорость процессор количество оперативный память мкостя накопитель и скорость связь реальность немного сложный увеличение скорость процессор сопровождаться рост энергопотребление и тепловыделение помнить наглядный диаграмма с изображение рост тепловыделение в процессор intel логарифмический шкала изображать прямая линия от один процессор intel через pentium к тепловыделение на поверхность солнце здесь приходить на ум закон штейн если что то не мочь продолжаться вечно оно и не быть компьютерный индустрия сломя голова бежать прямиком в энергетический барьер процессорный скорость не мочь масштабироваться без неприемлемый увеличение энергопотребление и тепловыделение если посмотреть на графика с скорость процессор то поворот произош литр в 2003 год в самый разгар фиаско vista другой тенденция тоже делать опасный наивный восприятие улучшение в производительность производитель микросхема выпускать чип память с больший плотность транзистор но барьер память означать что задержка между cpu и память вс большой и большой затруднять эффективный использование весь этот память возможно большой всего проблема в создание сбалансированный система пк доставить увеличение мкостя диск но гораздо более медленный увеличение количество случайный операция ввод вывод в секунда это означать что на диск больший объ ма помещаться программа больший размер но они загружаться гораздо медленный из за дисбаланс быстрый программа легко мочь делать запрос i o быстрый чем диск быть способный они обработать результат стать тормознуть система несмотря на увеличение скорость процессор и больший объ метр память vista выйти в период когда вс более ускоряться переход на мобильный платформа продажа ноутбук превзойти продажа настольный пк в 2003 год а к 2005 год ноутбук обогнать настольный пк и по количество продать устройство поскольку vista настолько плохо работать на новый деш вых ноутбук нетбук то microsoft прийтись разрешить oem сборщик продолжить поставка windows xp для этот машина нижний ценовый диапазон важный часть происходить здесь представлять себя более глубинный проблема фундаментальный достаточность форма фактор настольный пк для тот задача который на наш метр решать основной область использование продуктивность в основное office коммуникация с рфинга включая поиск веб сайт и веб приложение некоторый внутренний приложение для бизнес фронтенд для специализировать устройство вспомнить рентгеновский аппарат свой дантист вс это в целое стабилизироваться к 2000 год и с тот пора особо не меняться microsoft мочь создавать новое api но компьютер уже делать практически вс что нужно быть пользователь нужный человек улучшение хороший управляемость стабильность производительность безопасность с сторона программный обеспечение и более длительный работа от батарея более литр гкий вес быстрый процессор увеличение скорость связь экран больший размер с аппаратный сторона многие из этот улучшение требовать уменьшение количество программный обеспечение а не увеличение достаточность грязный слово в это бизнес хотя вызвать она проблема хорошо описать и широко известный благодаря книга кристенсен более свежий книга роберт гордон описывать понятие достаточность в гораздо более широкий спектр американский экономика достаточность это разновидность экономический рецессия рецессия объявляться после два последовательный квартал сокращение производство это означать что вы находиться в рецессия шесть или более месяц прежде чем реально узный тот о это несмотря на то что вариант использование настольный компьютер не измениться вс равно продолжаться важный эволюция в базовый оборудование который поддерживать усилие участник экосистема в попытка использовать этот инновация для новый вариант использование пк спустя десятилетие после появление ноутбук я по прежний хотеть более литр гкий ноутбук с ещ больший время работа от батарея но то как я использовать этот ноутбук в целое не измениться заметить что здесь я фокусироваться на достаточность форма фактор общий вычислительный требование в экономика продолжить растить взрывной темп но более быстрый и повсеместный коммуникация предполагать большой гибкость в тот как приложение распределять свой требование к вычислительный ресурс дать и обработка между разный узел в система под влияние многий фактор в последний два десятилетие вс большой часть обработка уходить на сервер или в облако я бы хороший запитать этот вычислительный цикл от гэс гранд куль с сервер на восток штат вашингтон чем таскать с себя аккумулятор если требоваться доступ к данные с разный устройство или несколько пользователь то я хотеть хранить и обрабатывать они на сервер а не на локальный пк прогресс в беспроводный связь и в целое пропускной способность end to end коммуникация сделать такой сценарий работа устройство исключительно стабильный мы не наблюдать это только на настольный компьютер включая ноутбук вероятно планшет проявить тенденция достаточность форма фактор сильный чем что либо ещ хотя в более широкий перспектива это не так на протяжение десятилетие в разный реинкарнация планшет мы не удовлетворять вес время работа от батарея вычислительный мощность режим ввод и общий время отклик но когда на сцена появиться ipad с он сочетание размер экран вес время работа от батарея тач ввод скорость процессор и мгновенный включение то мы достигнуть точка достаточность произведа нный с тот пора изменение в основное носить инкрементальный характер что сводить с ум инженер который работать над этот вещь и тратить масса энергия и творческий сила инженер из компания maytag работать над новый стиральный машина должный испытывать тот же чувство да человек хотеть экран хороший более быстрый процессор и мкий аккумулятор но в целое устройство выполнять поставить задача что в многое объяснять быстрый выравнивание рост продажа планшет смартфон кажется тоже пройти через этот стадия на самый дело это становиться ещ более справедливый по мера улучшение коммуникация и программный обеспечение который прозрачный управлять дать между сервис и устройство какой главное урок мы мочь извлечь из этот история один из они настолько фундаментальный что кажется банальный реализация иметь значение не быть инновация без реализация два урок я принять близко к сердце в мой последующий карьера если хотеть делать большой амбициозный вещий то вы должный взять на себя ответственность сформулировать почему они нужно делать вы должный быть в состояние записать свой основной тезис и доказательство и защищать они в реальность чем большой у вы власть тем большой у вы должный быть ответственность и готовность принять честный вызов либо по факт либо по логика это ещё более важный в время быстрый изменение потому что факт и логика мочь измениться ответственность и прозрачность означать что вы способный переоценить свой вывод и быстро среагировать когда я вс это пережить я постоянно пытаться вспомнить небольшой научно фантастический рассказ который читать в юность и который крутиться в память как подходящий для этот история наконец то я вычислить он и обнаружить что это знаменитый произведение артур кларк впервые опубликовать в 1951 год это небольшой рассказ рекомендовать пройти по ссылка и увидеть некоторый удивительный параллели

