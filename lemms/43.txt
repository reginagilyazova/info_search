hyperapp parcel auine в дать пост мы рассмотреть два новый инструмент из мир фронт енд разработка они оба разработать с мысль о простота и лёгкость использование один инструмент это очень маленький фронт енд фреймворк hyperapp а два это бандлера parcel вместе они мочь быть хороший выбор для написание легковесный приложение в начало 2018 обычно для разработка интерактивный веб приложение я использовать react webpack но зачастую бутсрапинг новое проект с использование это стек занимать слишком много время и выглядеть громоздкий использование react в случай когда я нужный простой и не большой интерактивный виджет с поиск и отображение цена выглядеть как оверкилла главный особенность hyperapp это он размер всего 1kb пользователь react redux быть чувствовать себя как дом они очень похожий с hyperapp hyperapp использовать система virtual dom для вычисление обновление dom а так же преследовать сходить абстракция компонент и элемент поверх html что позволять использовать jsx ключевой отличие заключаться в тот компонента не иметь state есть только один глобальный state на весь приложение и весь компонента представить как stateless state менеджмент в hyperapp вдохновить подход elm который в свой время вдохновить redux концепция имьютбла стейт и экшеновый который возвращать новый стейт очень похожий на тот что использоваться в redux однако в hyperapp нету редюсеров есть только эксить который принимать аргумент и возвращать новый стейт асинхронный эксить возвращать промиса так же присутствовать parcel это новый вид фронт енд бандлера свой род более быстрый и пра сконфигурировать webpack я фанат webpack'a но как и люба другой мочь заметить что конфигурация webpack'a довольно громоздкий parcel из коробка предоставлять hoc hot module replacement и code splitting к мой удивление заимпортить sass файл после запуск дева сервер parcel он автоматически установить node sass в зависимость и собрать я css файл также стоить отметить что parcel нереально быстрый мы написать приложение с использование hyperapp parcel очень простой оно быть просто отображать базовый информация о пользователь использовать github api давать начать с создание новый директория и установка необходимый зависимость наряду с главный инструмент что мы интересовать мы установить babel пресет для траспилинг код под старое окружение теперь давать добавить index html и index js файл index html index js так же давать добавить скрипт запуск дева сервер и билд в package json запустить дева сервер npm start по адрес localhost 1234 в браузер быть доступный наш страница и в консоля можно увидеть результат console log из index js окей теперь hyperapp приложение для упрощение мы быть использовать es6 и jsx использовать babel компилятор к счастие он есть в parcel по умолчание и весь что мы необходимый это указать env пресет и компиляция jsx под hyperapp вместо react createelement должный вызываться функция h создать файл babelrc в корн проект к это момент мы закончить настройка наш окружение и мочь приступить к написание приложение давать начать с простой hyperapp представление поскольку parсel использовать hot релоады вы сразу же увидеть результат код очень простой и не требовать какой либо глубокий познание hyperapp мы импортировать необходимый из hyperapp создавать view функция который отвечать за отображение контент и рендерита весь это в body страница использовать app функция теперь заняться вытяжка github информация о пользователь в один очередь мы нужно некий состояние для тот чтобы хранить пользовательский ввод и дать получить с api как быть сказать в начало компонент в hyperapp не иметь свой сайт также мы необходимый способ изменить этот стейт изменение стейт в hyperapp похожий на то как это делаться в elm и redux и представить в вид функция который принимать стейт с экшеном и возвращать новый стейт в наш случай эксить быть выглядить так как вы мочь видеть updateusername асинхронный и использовать другой эксить для изменение стейт разумеется мы понадобиться функция getuserdata мы быть использовать github api для получение информация github аккаунт ник который ввести пользователь для тот что бы не дёргать api на каждый символ мы быть использовать debounce создать файл стиль sass и испортировать он в index js а так же обновить view вот и весь наш маленький приложение готовый hyperapp и parcel отличный пример тот как инструментарий разработчик эволюционировать существовать множество идея и подход создание фронт енд приложение с богатый интерактивный интерфейс некоторый из они быстро адаптироваться под новое реалия и нужда а некоторый из они быть оставить позади в это дивный мир javascript разработка react redux являться очень популярный выбор среди разработчик и они ключевой особенность использоваться в hyperapp webpack в свой очередь повлиять на мир бандлер и установить новое стандарт который parcel удовлетворять с лихва и кто знать возможно в будущее он занять лидировать позиция эволюция так же являться причина по который мы не должный пытаться использовать один и тот же набор инструмент для решение каждый новый проблемы

