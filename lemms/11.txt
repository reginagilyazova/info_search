самый быстрый индиана key value контейнер на база trie bazist в 21 век построение программа весь чаща напоминать конструктор lego этот подход подразумевать что многие кубик придумать до мы собственно они элементарность обманчивый подсказывать что ресурс улучшение за многие год здесь практически исчерпать и мы оставаться использовать то что есть но как не странно по аналогия с биология элементарный клетка порой скрывать самый сложный и продумать алгоритм и именно здесь заключить весь самый интересный баталия в это смысл программист по многогранность индустрия чем то напоминать медик здесь есть свой терапевт ветеринар хирург и есть вот тот ребята который на несколько строка код мочь потратить несколько месяц работа в свой время я пришлый в голова интересный идея о тот как можно размещать два sparse страница на один участок память попутно кодировать сам значение ключ в контейнер через переход jumps идея этот казаться достаточно интересный и свежеть а она проверка занимать всего несколько десяток строка код поэтому в ближний вечер преодолеть любопытство узнать в сколько же можно сжать такой способ страница память надо сказать что это быть только начать и с время весь вылиться в проверка огромный количество гипотеза замер версия в текущий версия достаточно сложно разглядеть очертание тот первоначальный идеальный модель в такой задача как и в типичный инженерный задача очень важный найти баланс сложно найти тот простой универсальный механизм который прямо как затвор автомат в грязь вода и на жара быть одинаково хорошо работать идея создать trie который быть работать быстрый хештаблица не новый в 2001 год дуглас баскинс описать принцип работа идея показаться настолько интересный что в компания hewlett packard выделить целовать группа инженер для это проект хорошо оптимизировать trie скорый напоминать маленькая операционный система здесь свой собственный реализация менеджер память целый список алгоритм сжатие и балансировка узел свой маленький экосистема для управление микромир в контейнер в ввиду сложность реализация такой проект в открытый доступ совсем мало в открытый репозиторий практически абсолютный большинство реализация trie насчитывать всего несколько сотня строка код от hp около 20к около 8к loc прима тот реализация который есть скорый носить академический характер или создать для решение специфический задача для работа с текст о trie врядлить спросить у вы на собеседование такой key value контейнер не включать в стандартный библиотека популярный язык программирование и нужно сказать совершенно зря уже при первое рассмотрение приходить понимание что хорошо оптимизировать trie мочь работать быстрый хештаблица при это по функциональность быть даже богач чем бинарный дерево поиск информация один из фундаментальный задача вычислительный техника собственно сразу после тот как комьютер научить что то считать и хранить информация появиться потребность в эффективный поиск за весь время быть предложить всего три основный концепт для организация быстрый поиск бинарный дерево способ организация контейнер при который ключ для поиск должный быть строго отсортировать хештаблица адресс значение получать через обработка ключ хешфункция и trie где ключ сам по себя кодировать путь к значение в литература можно найти дробный как работать этот алгоритм например есть графический описание чем этот подход отличаться друг от друг но мало сказать чем же trie более интересный именно с точка зрение построение универсальный key value контейнер этот структура проектироваться для очень быстрый поиск ключ собственно жертвовать весь остальной в глава угол лежать хешфункция от качество работа который зависеть почти весь впрочем вы мочь выбрать отличный хешфункция который на тестовый дать дать практически равномерный распределение но всеравно не контролировать ситуация на весь 100 возможно в реальный работа на новый дать ваш хешфункция выродиться в близкий к worst case случай в это случай супер быстрый поиск превратиться в чтоть вроде full scan и o n вместо o 1 ещё один проблема чем большой дать тем большой коллизия на больший обьемах дать коллизия нароставать как снежный ком и в какойтый момент прийтись перестроить весь хештаблица целиком это событие называться stop world event и означать что вы не мочь для вызывающий код гарантировать близкий к константный latency также большой количество дать повлечь за себя нелинейный черезмерный потребление память многие ячейка внутри хештаблица быть пустой а сам ключ быть храниться в buckets в несжатый вид не существовать эффективный способ искать по диапазон или по шаблон ключ в контейнер даже если ключ отличаться всего один последний битый вероятность что они оказаться ряд в структура в один и томжа bucket стремиться к нуль для процессор если вы работать с какой нибыть природный набор дать где сам по себя ключ похожий друг на друг url filepath words и др зачастую это быть означать cache miss что также не прибавлять быстродействие но даже если у вы идеальный хешфункция в контейнер всего несколько ключ и вообще нет коллизия при вставка и поиск сам ключ вы сканировать как минимум дважды один раз пропускать через хешфункция и два раз когда прислать по адрессать перепроверять что найти ключ действительно тот что требоваться почти весь этот недостаток лишить trie но о она дробный ниже некий золотой стандарт особенно если говорить о база дать являться разный вариация бинарный поиск чаща всего встречаться два модификация red black tree бинарный поиск с эффективный балансировка дерево и b модификация если нужный дополнительно работа с диск бинарный поиск лишить многий недостаток хештаблица выбор хешфункция не нужный потребление память практически линейно вставка и поиск за предсказуемый время обычно o log n возможность искать по диапазон ключ и задавать тип сортировка дать но сам по себя скорость поиск достаточно низкий в контейнер где около 1 миллион ключ ключ быть найти примерно за 20 seek times при это если в идеальный хештаблица без коллизия мы говорить о сканирование ключ дважды то здесь ключ мочь сканироваться десятка раз на каждый этап где мы нужно сравнивать ключ между себя на большой маленький равно в целое бинарный дерево работать действительно хорошо но к сожаление не на плоский модель память каждый раз когда мы нужно вставить новый ключ мы он вставлять где то в середина чтобы сохранить порядок сортировка из за это достаточно сложный алгоритм балансировка из за это оставить spaces в extends чтобы избежать перемещение старое дать при каждый вставка здесь мы возвращаться к наш тёмный лошадка и первое о чем нужно сказать trie всегда сканировать ключ один раз по суть это означать что именно trie хотяб теоретически мочь работать быстрый чем хештаблица и уж тем более чем бинарный дерево отсюда выходить ещё один интересный свойство чем длиней ключ тем большой разница в скорость работа между хештаблица и trie в польза последний кроме тот этот структура очень дружелюбно работать с кеш процессор поскольку в один похожий ключ лежать ряд в память в второе чаща всего такой ключ использовать общий сегмент память и при следующий вставка или поиск вероятно часть ключ оказаться уже загрузить в l1 l2 кеш процессор если ключ иметь похожий природа вроде url структура более экономно расходовать память за счёт префиксный сжатие такой ключ также быть более эффективно сканироваться по диапазон бинарный дерево каждый ключ быть читать от начало до конец в то время как trie быть сканировать только хвост ключ очевидно что trie хороший работать на плоский модель память поскольку не требовать постоянный балансировка в отличие от бинарный дерево и при это не требовать полный перестроение дерево на больший обьемах дать в отличие от хештаблица здесь нет stop world событие какой же недостаток первое не смотреть на разный методика сжатие узел вроде patricia этот структура очень любить long jumps если дать мы хранить на hdd где seek time очень дорогой операция то хештаблица быть работать значительно быстрый ведь не смотреть на то что она сканировать ключ дважды и более раз seek time у нея быть всего один спозиционироваться на нужный bucket в то время как у trie такой seek times быть несколько хоть и в среднее маленький чем в бинарный классический дерево также сканирование ключ рандомна природа по диапазон в бинарный дерево быть значительно эффективный потому что опять же много jumps при сканирование поддерево ещё в недостаток можно записать сложность реализация такой структура и невозможность задать кастомный сортировка ключ хотя это справедливо не для весь реализация например в задать кастомный сортировка ключ всежа можно в преведущий пример мы сравнивать особенность работа разный контейнер по такой параметр как скорость работа память возможность сканировать по диапазон ключ для большинство прикладной задача замена один реализация контейнер на другой быть означать битый оптимизация в высоконагруженный проект выиграш конечно быть существенно большой причём под высоконагруженный я подразумевать не только сервер больший корпорация к который очень много клиентский запрос например архивирование дать графический рендеринг индексирование контент это весь тёж задача где обычный key value контейнер мочь работать внутри движок под нагрузка в миллион запрос в секунда в такой сценарий скорость никогда не бывать лишний и оптимизация условно в два раз быть означать что 16 гб контент быть индексироваться не 4 час а всего 2 и всежа везде здесь у мы есть выбор мы мочь использовать существующий реализация key value контейнер и особо не задумываться о деталь он работа однако существовать целый класс задача где использовать что то кроме trie совершенно нецелесообразный речь идти о целое ряд задача обработка текст например принцип работа suffix tree также как пример radix tree найти удачный применение внутри ядро линукс и врядлить мочь бы быть заменить чем то ещё весь этот пример хорошо описать в разный литература поэтому я не быть останавливаться на они дробный вместо это привести ещё один интересный пример вообще в архитектура приложение очень важный добиться единообразие так часто бывать что правильно выбрать абстракция шаблон как по лекало подходить для всего остальной так вот json это естественный интуитивно понятный формат который такой же естественный интуитивно понятный способ мочь быть сохранный внутри trie как это сделать достаточно просто нужно всеголить json нарезать на ключ где key это путь к аттрибут и он значение а value это номер документ такой образ вставка обновление или удаление аттрибут в середина документ json быть означать не он полный перезапись а всеголить вставка обновление или удаление ключ внутри контейнер поиск любой аттрибут или поиск по диапазон значение аттрибут быть означать всеголить поиск ключ или сканирование поддерево внутри trie без десериализация всего документ весь этот операция работать очень быстро извлечение из key value контейнер ключ обычно стоить маленький сотня наносекунда кроме тот trie естественный образ сжимать json за счёт инвертированый индекс дело в тот что если такой документ хранить как отдельный файл аттрибут в они быть дублироваться но если они быть добавить в trie то в trie весь аттрибут быть представить один раз в независимость от количество добавить документ в контейнер этот подход чем то напоминать подход который использоваться в колоночный хранилище дать но на этот раз он применяться для документоориентировать база дать в целое тема этот заслуживать отдельный статья недавно в сеть в открытый доступ быть выложить проект реализовать алгоритм работа trie с множество оптимизация реализация получиться достаточно сложный но на мой взгляд достаточно эффективный что подтверждаться вариант этот не окончательный есть ещё много идея для улучшение к тот же старый версия работать в раз полтора быстрый но после добавление новый функциональность существенно замедлиться и с это тоже стоить разобраться кроме базовый функциональность реализовать честной удаление честной это когда ключ не обнуляться а честно демонтироваться шаг за шагом высвобождать постепенно память в сценарий массивный добавление и удаление ключ структура работать в режим безотходный производство часть старое отмереть ключ использоваться для построение новый если количество удаление превышать количество добавление новый ключ то в какойтый момент структура мочь отдавать лишний страница память операционный система попутно дефрагментировать свой собственный использовать страница также реализовать всевозможный обход по дерево поиск по шаблон ключ сохранение на диск возможность переопределение сортировка ключ в контейнер и другой функциональность

