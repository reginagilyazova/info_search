предсказание случайный число в умный контракт ethereum m1rko ethereum приобрый литр огромный популярность как платформа для первичный размещение монета ico однако она использоваться не только для токен erc20 рулетка лотерея и карточный игра вс это можно реализовать на блокчейн ethereum как любой реализация блокчейн ethereum не подда тся подделка он децентрализовать и прозрачный ethereum допускать выполнение тьюринг полный программа который обычно писать на язык программирование solidity по слово основатель платформа это превращать система в всемирный суперкомпьютер перечисленный характеристика полезный в приложение для азартный игра где особенно важный доверие пользователь блокчейн ethereum являться детерминированный и поэтому представлять определ нный сложность при написание генератор псевдослучайный число гпсч неотъемлемый часть любой приложение для азартный игра мы решить исследовать смарт контракт чтобы оценить безопасность гпсч на solidity и подчеркнуть характерный ошибка проектирование который вести к появление уязвимость и возможность предсказание будущее состояние гпсч наш исследование проводиться в несколько этап анализ выявить четыре категория уязвимый гпсч посмотреть на пример уязвимый код в каждый категория вот некоторый переменный блок который ошибочно принимать за источник энтропия прежде всего майнер мочь манипулировать весь переменный блок так что по один этот причина они нельзя использовать как источник энтропия что ещ более важный переменный блок очевидно одинаковый в предел блок так что если контракт злоумышленник обращаться к контракт жертва через внутренний сообщение то одинаковый гпсч в оба контракт выдать одинаковый результат пример 1 пример 2 пример 3 у каждый блок в цепочка ethereum есть проверочный хэш виртуальный машина ethereum virtual machine evm позволять получать этот хэш с помощь функция функция получать на вход числовой аргумент с указание номер блок в ход это исследование мы обнаружить что результат выполнение функция зачастую некорректно использоваться в реализация гпсч есть три основный разновидность такой уязвимый гпсч посмотреть на каждый из этот случай переменный состояние позволять узнать высота текущий блок когда майнер забирать транзакция который выполнять код контракт то известный переменный будущее блок с этот транзакция так что контракт мочь над жно получить е значение однако в момент выполнение транзакция в evm хэш создавать блок по очевидный причина ещ не известный а evm всегда быть выдавать нуль некоторый контракт неверный интерпретировать выражение в этот контракт хэш текущий блок считаться известный в время выполнение и использоваться в качество источник энтропия пример 1 пример 2 в некоторый контракт использоваться другой вариант гпсч на основа хэш блок там бер тся хэш не текущий а предыдущий блок нечего говорить что такой подход тоже неприемлемый злоумышленник мочь создать эксплоить контракт с тем же код гпсч чтобы вызвать целевой контракт через внутренний сообщение в оба контракт быть одинаковый случайный число пример 1 более хороший мысль использовать хэш какой нибыть будущее блок реализовать этот сценарий можно следующий образ такой подход работать только при соблюдение один важный требование документация solidity предупреждать о лимит хэшея блок который способный хранить evm поэтому если в течение 256 блок не поступить два вызов с проверка хэш то псевдослучайный число можно предсказать заранее хэш быть равный нуль самый известный случай эксплуатация этот уязвимость в контракт не проверяться возраст из за что 400 eth уйти неизвестный игрок который подождать 256 блок перед раскрытие предсказуемый выигрышный число для увеличение энтропия некоторый контракт применять дополнительный начальный число seed который считаться секретный один из пример лотерея slotthereum вот соответствующий код переменный pointer объявить секретный то есть другой контракт не мочь получить к она доступ после каждый игра этот переменный присваиваться выигрышный число от 1 до 9 а потом использоваться оно для смещение при получение хэш блок прозрачный по свой природа блокчейн не должный использоваться для хранение секрет в чистый текст хотя секретный переменный защитить от другой контракт но можно получить содержимое хранилище контракт вне цепочка например в популярный ethereum клиент web3 есть метод api позволять получить запись хранилище по задать индекс учитывать этот факт становиться тривиальный задача извлечь значение секретный переменный из хранилище контракт и использовать он как аргумент в код эксплоит чтобы получить максимальный награда майнер выбирать транзакция для создание новое блок на основа совокупный газа топливо который тратиться каждый транзакция порядок выполнение транзакция в блок определяться цена газа один быть выполнить транзакция с максимальный цена газа так что изменять цена газа можно добиться чтобы нужный транзакция выполниться ранний весь остальной в текущий блок это мочь представлять себя проблема безопасность который обычно называть опережение front running когда исполнение контракт зависеть от он положение в блок рассмотреть следующий пример лотерея задействовать внешний оракул для получение псевдослучайный число который использоваться для выбор победитель среди игрок сделать ставка в текущий раунд этот число отправляться в открытый вид злоумышленник мочь наблюдать пул ожидать транзакция и жд том число от оракул как только транзакция от оракул появляться в пул транзакция злоумышленник делать ставка с больший цена газа транзакция злоумышленник пришлый последний в текущий раунд но благодаря высокий цена газа она в реальность быть исполнить ранний чем транзакция оракул что принести том игрок победа такой задача выполнять участник другой пример контракт подверженный уязвимость с опережение транзакция игра под название каждый раз когда игрок покупать билет он занимать последний место и начинаться отсч том таймер если за определ нной количество блок никто не покупать билет то последний занять место игрок выигрывать джекпот когда раунд близиться к завершение злоумышленник мочь наблюдать пул транзакция другой участник и присвоить джекпот установить более высокий цена газа есть несколько подход для реализация более безопасный гпсч в блокчейн ethereum это сервис для распредел нный приложение который устанавливать мост между блокчейн и внешний окружение интернет при использование oraclize смарт контракт мочь запрашивать дать из api в веб такой как курс валюта прогноз погода котировка акция один из самый известный вариант использование способность oraclize работать как гпсч некоторый из контракт который анализироваться в ход наш работа использовать oraclize для получение случайный число с random org через коннектор url этот схема изобразить на рис 1 главный недостаток такой подход централизация мочь ли мы верить что демон oraclize не вмешиваться в результат мочь ли мы доверять random org и весь инфраструктура лежать в основа это сервис хотя oraclize проверять результат через аудиторский сервис tlsnotary он можно использовать только вне цепочка блок в случай с лотерея только после оглашение победитель хороший использовать oraclize как источник случайный дать с применение который можно проверить в цепочка это мост между цепочка блок ethereum и bitcoin при использование btcrelay смарт контракт в блокчейн ethereum мочь запрашивать хэш будущий блок bitcoin и использовать они как источник энтропия один из проект применять btcrelay в качество гпсч лотерея метод btcrelay не защищ наш от проблема стимулирование майнер хотя здесь барьер выше чем в случай блок ethereum но только из за более высокий цена биткоина так что этот подход снижать но не устранять вероятность мошенничество с сторона майнер это алгоритм на основа криптографический подпись он можно использовать как гпсч в смарт контракт с участие два сторона игрок и контора алгоритм работать следующий образ в ethereum есть встроить функция для проверка подпись ecdsa в цепочка однако ecdsa нельзя использовать в signidice поскольку контора мочь манипулировать входной параметр в частность параметр и так влиять на получаться в результат подпись алексей перец показать такой мошенничество к счастие с выход ж сткий форка metropolis появиться это позволять реализовать проверка подпись rsa в отличие от ecdsa она не допускать манипуляция входной параметр для поиск подходящий подпись как понятно из название схема коммит раскрытие commit reveal состоять из два этап правильно реализовать схема коммит раскрытие не должный полагаться на единственный сторона хотя игрок не знать оригинальный начальный число подать владелец и они шанс равный но владелец тоже мочь быть игрок поэтому игрок не мочь он доверять схема коммит раскрытие более грамотно реализовать в сервис гпсч собирать хэш начальный число от несколько сторона и каждый из они получать вознаграждение за участие никто не знать чужое начальный число так что результат абсолютно случайный однако если хоть один сторона отказаться сообщить сво начальный число то сервис да том сбой схема коммит раскрытие можно совместить с использование хэшея будущий блок в это случай задействоваться три источник энтропия тогда случайный число генерироваться следующий образ поэтому схема коммит раскрытие решать проблема стимулирование майнер майнер мочь повлиять на хэш блок но он не знать начальный число владелец и игрок она также решать проблема стимулирование владелец он знать только собственный начальный число но не знать начальный число игрок и хэш будущее блок вдобавок такой схема подходить для ситуация когда человек выступать одновременно в роль владелец и майнер он определять хэш блок знать начальный число владелец но не знать начальный число игрок безопасный реализация гпсч в блокчейн ethereum по прежний ост тся нереш нной задача как показать наш исследование из за отсутствие готовый решение разработчик склонный внедрять собственный реализация гпсч но при это легко сделать ошибка поскольку в цепочка блок немного источник энтропия при разработка гпсч разработчик следовать убедиться что он понимать мотивация каждый сторона и тогда выбирать соответствующий подход

