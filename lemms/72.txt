введение в разработка умный контракт ethereum hlogeon в последний время вокруг блокчейн криптовалюта умный контракт и связанный с они технология подняться небывалый хайп создаваться ощущение что даже самый ленивый и пассивный обыватель трубить о это из каждый болото огромный количество стартап и компания с история и опыт из сфера ит услуга ритейл и реальный сектор экономика задумываться о внедрение блокчейн в свой деятельность механизм initial coin offering не только способствовать новый волна интерес к краудфандинг увеличить объесть привлекать с он помощь инвестиция но и подхлестнуть интерес к криптовалюта и технология блокчейн сегодня весь чаща и чаща попадаться новое вакансия в этот область а также просьба о помощь в проведение ico в целое и разработка смарт контракт в частность к сожаление сегодня сильно ощущаться нехватка специалист в этот сфера хотя в действительность процесс разработка умный контракт гораздо простой чем это мочь показаться на один взгляд проблема нехватка специалист напрямую проистекать из тот что технология блокчейн дошлый до массовый пользователь не так давно в вид криптовалюта биткоина а смарт контракт в блокчейн прислать значительно поздний так что лично у я не вызвать большой удивление тот факт что материал по разработка смарт контракт весь ещё очень мало с другой сторона быть технический директор компания в который мы заниматься построение основать на блокчейн цифровой юрисдикция и упрощение процесс создание смарт контракт для обычный пользователь не владеть навык программирование я ощущать потребность в технический специалист иметь представление о технология а ещё хороший опыт работа с она в это материал я хотеть показать что порог вхождение в разработка смарт контракт на самый дело довольно низкий и постараться привлечь в сфера новый разработчик конечно не весь в жизнь бывать так же просто как в обучать материал и в разработка умный контракт существовать огромный количество тонкость тем не менее это справедливо и для люба другой технология включая знакомый многий javascript и с это мы как правило помогать справиться практический опыт который невозможно получить не начать программировать проектировать экспериментировать тестировать и делать весь то чем разработчик обычно заниматься в это урок мы установить весь необходимый для начало разработка инструмент фреймворка написать свой один токен erc20 на язык скомпилировать он опубликовать в локальный блокчейн написать пара тест и прогнать они мы быть использовать который помочь мы с управление миграция компиляция управление зависимость а также тестирование помимо это мы быть использовать фреймворк который содержимый в себя набор контракт и библиотека написать на язык solidity и уже доказать свой полезность и безопасность время для начало давать установить framework truffle для это просто перейти к документация фреймворка и найти там инструкция по установка для ваш операционный система после установка создать папка для ваш проект в мыть случай этот папка быть называться jcr token после это открыть создать папка проект в терминал и инициализировать проект при помощь команда теперь открыть проект в ваш любим текстовый редактор я использовать atom посмотреть на структура проект изначально вы мочь увидеть в корнев директория три папка как вы мочь заметить truffle уже создать пара простой умный контракт для мы мы использовать они для тестирование наш установка для тот чтобы взаимодействовать с контракт и создавать для они тест мы должный сначала опубликовать они в блокчейн в наш случай я предлагать использовать для этот цель лёгкий ethereum клиент который называться testrpc он просто эмулировать обычный поведение клиент ethereum сеть но работать намного быстрый и потреблять маленький ресурс что делать он хороший инструмент для разработка после установка вы мочь запустить ваш собственный development blockchain просто набрать в терминал команда после успешный запуск вы увидеть хост и порт ваш блокчейн открыть файл truffle js в корнев директория проект этот файл содержимый конфигурация ваш проект убедиться что хост и порт в конфигурация совпадать с хост и порт запустить testrpc теперь давать попробовать скомпилировать умный контракт набрать этот шаг сгенерировать файл в директория build если вы запускать compile в один раз то директория быть создать автоматически в этот папка быть располагаться build артефакт мы поговорить о они чуть поздний для тот чтобы протестировать контракт набрать если вы знакомый с юнит тест в javascript или любой друг язык то вы уже знаете как тестировать смарт контракт пожалуйста уделять особый внимание тест ведь цена ошибка в блокчейн очень высокий вы даже не нужно заранее компилировать контракт перед запуск тест поскольку команда test делать это за вы автоматически и наконец для тот чтобы запустить миграция который опубликовать наш контракт в блокчейн testrpc набрать вскоре после это вы увидеть вывод команда в терминал и вывод событие в клиент testrpc поздравлять мы только что опубликовать наш один умный контракт в эмулятор сеть блокчейн для создание более продвинуть контракт мы воспользоваться фреймворок openzeppelin который включать в себя несколько очень полезный библиотека интерфейс и готовый контракт стоить отметить что язык solidity поддерживать наследование и мы мочь с лёгкость расширять функционал существующий контракт это открывать большой возможность для продумывание ваш архитектура установить openzeppelin можно так же как и любой другой javascript библиотека использовать ваш любимый менеджер зависимость например npm или yarn вы мочь найти более подробный информация на страница проект openzeppelin на github либо они сайт вот мы и установить весь необходимый для начало разработка собственный смарт контракт и это быть не так уж и сложно верно теперь перейти к текстовый редактор и посмотреть файл проект можно заметить что truffle уже создать некоторый базовый контракт при инициализация давать удалить весь этот файл за исключение файл миграция мы удалить лишний контракт библиотека тест а также убрать немного код из миграция создать новый solidity файл с код наш кастомный умный контракт я быть делать токен под название jcr для проведение ico компания jincor а значит и файл я назвать jcr sol solidity довольно молодая и динамично развивающийся язык программирование это накладывать определённый неудобство один из который это частый изменение некоторый из который способный поломать обратный совместимость что в свой очередь мочь вызвать проблема с уже опубликовать контракт для тот чтобы это предотвратить мы необходимый указать версия компилятор язык solidity лично я быть использовать 0 4 11 заметить что здесь означать что мы также устраивать более новое минорный версия и багфикс а не строго указанный версия 0 4 11 можно определить намного более гибкий шаблон версионирование точно так же как вы делать это в npm как я уже говорить мы собираться использовать некоторый контракт из библиотека openzeppelin для тот чтобы не изобретать велосипед а просто воспользоваться работать безопасный наработка содержимый хороший практика сообщество и регулярно проходить security аудит для тот чтобы импортировать контракт нужно воспользоваться ключевой слово import и далее в кавычка указать путь к импортировать файл как например это сделать я import zeppelin solidity contracts token mintabletoken sol я настоятельно рекомендовать ознакомиться с документация openzeppelin от корка до корка и посмотреть на реализация они смарт контракт чтобы иметь ясный представление о тот как именно они работать кроме тот в процесс изучение вы увидеть пример оформление код и смочь найти вдохновение для написание новый контракт вы мочь найти исходник в директория node_modules давать посмотреть на mintable token который я собираться сегодня использовать сейчас мы не быть погружаться в деталь очень глубоко ведь с исходный код и документация вы мочь ознакомиться и без мой помощь мы просто обсудить самый важный мы видеть что mintable token is ownable standard token ключевой слово is обозначать примерно то же самый что extends в java или php контракт mintable token добавлять 2 событие один публичный свойство 2 модификатор и 2 функция весь вместе это составлять функционал для эмиссия токен standard token добавлять функционал передача токен от лицо другой пользователь с предварительно получить разрешение basic token это просто реализация интерфейс erc20basic который определять передача токен и проверка баланс контракт ownable добавлять модификатор onlyowner который как правило использоваться для ограничение вызов функция с сторона третье лицо теперь вернуться к исходник наш контракт и немного изменить они после тот как мы импортировать весь необходимый контракт мы называть наш собственный контракт jcr пожалуйста давать файл контракт и название одинаковый имя в контракт мы определимый публично доступный имя символ и количество знак после запятая равный 18 как у эфириум затем написать код конструктор конструктор это просто функция который называться точно так же как контракт и вызываться при инстанциирование объект контракт или иной слово при создание новое экземпляр это довольно удачный место для инициализационный код лично я хотеть сделать контракт который смочь выпускать указанный количество токен и передавать весь токен на баланс создатель контракт для это я просто добавлять аргумент amount в конструктор назначать создатель контракт он же владелец и выпускать указанный число токен на кошелёк владелец итоговый файл jcr sol также доступный на github теперь давать попробовать скомпилировать то что у мы получиться сделать это можно набрать truffle compile заглянуть в папка build и посмотреть что же мы получить на выход первое что бросаться в глаз это то что мы получить артефакт весь использовать контракт от erc20 до mintable и jcr артефакт сохраняться в json файл этот json файл содержимый название контракт application binary interface abi двоичный код который в последствие быть запустить на ethereum virtual machine и немного дополнительный информация мы мочь использовать артефакт для тот чтобы опубликовать наш смарт контракт в блокчейн однако хороший с самый начало приучить себя к хороший и сразу же автоматизировать этот рутинный процесс добавить миграция помнить что мы ещё должный передавать в конструктор количество выпускать токен миграция это хороший место для подобный манипуляция давать открыть файл 2_deploy_contracts js и добавить немного код я собираться выпустить 1 4 миллион токен мы мочь опубликовать контракт в скрипт миграция использовать метод deployer deploy в который один аргумент мы передать билд артефакт а за он аргумент который далёкий в тот же порядок передаться конструктор контракт в наш случай у мы всего один аргумент 1 400 000 весь остальной truffle взять на себя чтобы сделать процесс деплоить простой и приятный можно разблокировать аккаунт разрешить совершать действие от он имя для это при старт testrpc добавить аргемент u 0 запустить наш новый миграция и посмотреть работать ли она отлично теперь мы необходимый убедиться в тот что наш токен работать так как мы от он ожидать для это мы написать пара тест на javascript набрать truffle create test и имя тестировать контракт чтобы сгенерировать javascript файл с тест заметить что тест можно писать и на solidity но о это мы поговорить поздний я надеяться что у вы уже есть какой то опыт написание тест на другой язык программирование например на php если вы уже сталкиваться с фреймворка mocha и chai то весь показаться вы уже знакомый так как truffle использовать именно они более подробный информация можно найти в официальный документация наконец давать попробовать убедиться в тот что владелец получить правильный количество токен при создание контракт и функция передача токен вести себя ожидать образ на сегодня весь в следующий урок мы попробовать протестировать наш контракт в более реальный окружение а также написать контракт ico для продажа наш токен кстати на youtube доступный видео версия дать статья в 2 часть 1 2

