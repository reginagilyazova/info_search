мобильный устройство изнутри структура образ раздел содержимый файловый система часть 1 vin2809 часть 2 3 2 _sparsechunk файл 4 создание файл 5 источник информация образ раздел мобильный устройство му содержимый файловый система фс ext4 иметь большой размер например размер образ раздел system мочь достигать несколько гб а размер образ раздел userdata составлять уже несколько десяток гб этот особенность требовать от разработчик прошивка применение хитрость при выполнение операция первоначальный загрузка прошивка му или установка обновление том к размер образ раздел становиться не только соизмеримый с объём оперативный память му но и значительно они превышать разработчик стоковый заводский прошивка для уменьшение размер образ раздел в настоящее время применять следующий способ в основа первое способ лежать уменьшение размер образ за счёт разделение он на несколько часть называть кусок при это размер каждый кусок не должный превышать заранее выбрать допустимый величина это позволять уменьшить размер порция информация передаваемый в му за один сеанс при второе способ использоваться то свойство образ фс что он представлять себя разредить файл 1 это позволять применить кодирование без потеря дать что приводить к уменьшение размер всего образ раздел за счёт сокращение объём пустой блок содержимый или нулевой или повторяться дать особенность третье способ состоять в тот что после кодирование из образ удаляться весь пустой блок при установка прошивка или передаваться только изменение образ при выполнение обновление думать что в качество повышение квалификация разработчик custom прошивка быть интересно ознакомиться с внутренний строение образ такой тип и прояснить некоторый момент работа с они этот способ подразумевать что исходный образ иметь ext4 формат делиться на часть размер не более заранее задать величина называть чаща всего иметь значение 128 или 256 мб при это для обратный восстановление дополнительно создаваться так называть файл размещение описывать расположение этот часть в исходный образ процесс разрезание образ раздел на часть мочь быть описать такой алгоритм после такой разбиение образ раздел и за счёт отсечение нулевой дать происходить существенный уменьшение сумма длина кусок том е общий размер выходной файл процесс восстановление очень простой и производиться по следующий алгоритм для пример давать рассмотреть процесс восстановление исходный образ раздел использовать прошивка для му lenovo s90 на основа процессор qualcomm msm8916 2 который содержимый файл размещение rawprogram0 xml а за граница часть у qualcomm принять значение 128 мб файл размещение rawprogram0 xml представлять себя xml файл цитата из который привести ниже строго говорить это файл описание разметка память му на основа чип qualcomm я не быть описывать весь параметр это файл том к мы потребоваться только следующий параметр указывать имя файл содержимый образ или он часть метка который представить параметр параметр содержимый абсолютный смещение начало файл в память му том к мы не быть прошивать файл часть в память а только собрать из они цельный файл образ раздел то для размещение каждый часть в это файл образ нужно использовать относительный смещение за база приниматься начать образ конкретный раздел том е смещение образ в память му расчёт производиться по следующий формула в тело прошивка иметься несколько файл содержимый фс ext4 давать попробовать собрать образ раздел том е из часть cache_1 img cache_4 img собрать один файл cache img конкретно для он выбрать из файл размещение rawprogram0 xml привести выше следующий значение для восстановление необходимый выполнить следующий выполнить весь действие вы получить файл размер 262мба содержимый образ раздел в вид фс тип ext4 разрезание на часть частично решать проблема разработчик уменьшать размер один часть передаваемый за сеанс передача при прошивка или обновление тем не менее общий размер файл не изменяться проблема уменьшение размер образ можно решить путём он сжатие кодирование для это применять следующий способ файл активно использоваться например в устройство moto g фирма lenovo а файл применяться в для удаление пустой значение число который в образ раздел мочь достигать 90 сам образ конвертировать сжимать в файл тип структура который описать в 3 при это исходный файл рассматриваться как массив элемент представлять себя четырехбайтовый число и просмотр массив выполняться поблочный том е по 4096 байт или по 1024 элемент в зависимость от содержимое блок разделяться на следующий тип разредить образ раздел с фс после конвертация в файл представлять себя последовательность список кусок тип и расположить вперемежку для идентификация и обеспечение обратный преобразование восстановление образ весь это дополнить заголовок итак файл состоять из несмотря на то что при конвертация образ формат в использоваться только два тип кусок всего существовать 4 тип кусок файл который быть рассмотреть ниже заголовок иметь следующий строение заголовок sparse файл кратко рассмотреть весь поль заголовок пол длина 4 байт содержимый сигнатура число 0xed26ff3a и служить для идентификация файл как тип файл поль и длина по 2 байт содержимый номер версия формат файл сейчас это версия 1 0 пол длина 2 байт содержимый размер заголовок файл в байт в настоящее время существовать два версия заголовок отличаться только он размер 0х1с 28 байт и 0х20 32 байт соответственно и это пол содержимый число или 0х1с или 0х20 пол длина 2 байт содержимый размер заголовок кусок файл независимо от тип кусок оно содержимый число 0х0с 12 пол длина 4 байт содержимый размер блок файл для сжатие в sparse файл образ фс тип ext2 ext4 значение это поль равно 0х1000 4096 пол длина 4 байт содержимый размер исходный файл img в блок пол длина 4 байт содержимый число часть на который быть раздельный исходный входной файл столько же кусок содержаться и в выходной файл пол содержимый контрольный сумма дать выходной файл sparse рассчитать по алгоритм для всего файл заголовок дать следом за заголовок располагаться область дать состоять из список кусок файл каждый кусок иметь заголовок кусок и дать кусок заголовок иметь длина 0х0с 12 байт как указать в пол заголовок файл и содержимый следующий поль структура заголовок кусок пол длина 2 байт содержимый идентификатор кусок и мочь принимать следующий значение пол длина 2 байт не использоваться и всегда равно нуль пол длина 4 байт содержимый размер исходный кусок в входной файл img выразить в блок пол длина 4 байт содержимый размер получить кусок в выходной sparse файл выразить в байт при рассчёт учитываться как длина заголовок так и длина дать кусок следом за заголовок располагаться дать различаться в зависимость от тип кусок том к кусок тип предназначить для хранение неповторяющийся дать то дать кусок полностью совпадать с дать соответствующий он часть входной файл иметь наибольший размер том к количество дать мочь достигать значение выбрать кусок тип в качество дать содержимый только один четырехбайтовый число 4 хбайтовый заполнитель повторяться в соответствующий он часть входной файл он заменять себя весь область занятой этот повторяться дать без они перечисление что и приводить к они сжатие кусок тип в качество дать содержимый контрольный сумма кусок рассчитать по алгоритм исключение являться кусок тип который вообще не содержимый дать но пол весь равно заполняться он представлять себя указатель смещение на начать следующий кусок дать входной файл при работа с sparse файл выполняться операция кодирование сырой img файл в файл и декодирование файл в исходный файл кодирование входной образ раздел формат производиться по следующий алгоритм декодирование файл в исходный образ производиться по следующий алгоритм при работа с sparse файл чаща всего возникать два вопрос рассмотреть они согласно поступление для пример рассмотреть процесс восстановление образ раздел из файл му moto z от lenovo 4 весь действие выполняться при помощь hex редактор например winhex исходный файл oem img содержимый сжатый образ раздел иметь размер 69mб посмотреть он заголовок заголовок moto z с адрес 0х0000 расположить сигнатура файл указывать что файл иметь тип sparse файл и состоять из кусок сигнатура отметить синить цвет далее зелёный цвет выделить поль содержимый версия sparse файл 1 0 затем красный цвет выделить поль и содержимый размер заголовок файл 0x001c и размер заголовок кусок 0x000c соответственно по смещение 0x000c расположить пол указывать размер блок sparse файл значение размер блок 0х00001000 по смещение 0x0010 расположить пол содержимый размер исходный файл в блок оно выделить жёлтый цвет и иметь значение 0x0000с021 по смещение 0x0014 расположить пол содержимый число кусок содержаться в sparse файл оно выделить фиолетовый цвет и иметь значение 0x0000001f по смещение 0x0018 расположить пол содержимый контрольный сумма sparse файл это пол содержимый 0 что означать что кс не рассчитываться и не учитываться при загрузка это файл в память му начинать с адрес 0x001c расположить заголовок первое кусок sparse файл заголовок кусок cac1 видно что пол содержимый значение 0xcac1 выделить синить цвет следующий 2 байт пустой а затем расположить пол отметить красный цвет содержимый число блок входной файл 0x00000001 закодировать в кусок далее расположить пол содержимый длина кусок вместе с заголовок выразить в байт 0x0000100c оно выделить зелёный цвет мы всегда нужный размер без заголовок поэтому длина только дать 0х100с 0х000с 0х1000 сразу за заголовок начинать с адрес 0x0028 идти массив дать кусок итак для восстановление исходный образ выполнимый следующий действие в результат получиться файл содержимый фс тип ext4 размер 192мба для простота взять только что получить образ и попробовать он превратить в файл при это необходимый создать новый файл размер 0х001с 28 байт поместить в он заголовок файл и далее последовательно просмотреть исходный файл делить он на кусок и кодировать они размещать в новый файл весь создавать кусок ну и конечно сохранить новый файл под имя например чтобы заполнить заголовок файл вписывать в один 4 байт сигнатура файл заголовок sparse файл далее последовательно записывать значение остаться поль оставлять свободный том к они значение появиться у мы только после окончательный создание выходной файл давать теперь рассмотреть как кодировать том е создавать разный тип кусок люба тип кусок иметь заголовок поэтому создать он в один очередь создавать в hex редактор файл размер 12 байт пустой заголовок кусок далее рассмотреть как и что заполнять в кусок в один 2 байт заголовок записать он тип cac1 тип кусок cac1 затем в пол вставлять размер дать 0x00000001 выразить в блок размер в блок ну и наконец размер кусок в байт 0x0000100c том е длина заголовок длина дать размер кусок сас1 после заголовок вставлять дать том е 0х1000 4096 байт из исходный файл дать кусок сас1 перейти к создание следующий кусок в один 2 байт заголовок записать он тип cac2 тип кусок cac2 вставлять размер дать кусок 0х001d выразить в блок размер в блок сас2 вставлять размер кусок в байт 0х0010 том е длина заголовок длина дать размер кусок сас2 добавлять дать кусок для cac2 это элемент заполнитель 0xffffffff дать кусок сас2 перейти к создание следующий кусок в один 2 байт заголовок записать он тип cac3 тип кусок cac3 вставлять значение смещение до следующий кусок 0ххххха выразить в блок по адрес 0х0004 заголовок вставлять размер кусок в байт 0х000с том е просто длина заголовок том к кусок это тип дать не иметь по адрес 0х0008 заголовок размер кусок сас3 перейти к создание следующий кусок в один 2 байт заголовок записать он тип cac4 тип кусок cac4 вставлять размер дать кусок 0х001d выразить в блок размер в блок сас4 вставлять размер кусок в байт 0х0010 том е длина заголовок длина дать размер кусок сас4 добавлять дать кусок для cac4 это контрольный сумма кусок рассчитать по алгоритм crc32 дать кусок сас4 собственно мы уже весь разобрать по косточка создавать заголовок кусок и сразу за он добавлять нужный он дать теперь процесс кодирование исходный файл в файл выглядеть следующий образом

