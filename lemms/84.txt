часть 2 сетевой взаимодействие написание blockchain менее чем за 200 строка код на go kostozyb вы прочитать из этот серия если нет то стоить взглянуть не волноваться мы подождать добро пожаловать мы быть ошеломить обратный связь от наш первое пост написание blockchain менее чем за 200 строка код на go то что предназначаться для небольшой урок для начинающий разработчик по blockchain приобрести новый жизнь мы завалить запрос сделать пост где мы добавлять сетевой взаимодействие прежде чем начать вы мочь присоединиться к наш чат в это хороший место что бы задать мы вопрос дать отзыв и попросить новое урок если вы нуждаться в помощь с ваш код то это идеальный место что бы спросить последний пост показать вы как создать свой собственный blockchain с хэширование и валидация каждый новое блок но весь это выполняться на один нода как мы мочь подключить ещё один нода к наш основный приложение и создавать новое блок и обновлять весь цепочка блок на весь остальной нода после урок попробовать сделать сам каждый новый терминал так же выступать в качество один терминал но с различный tcp порт и каждый с каждый иметь соединение для правильный работа сеть как и в предыдущий пост цель данный урок в тот что бы получить базовый сеть из нод что бы вы далёкий смочь самостоятельно изучать blockchain вы не смочь добавить компьютер из другой сеть который быть писать в ваш один терминал но это можно достигнуть запустить бинарник в облако кроме тот цепочка блок быть смоделировать для каждый из нод не волноваться мы скоро весь объяснимый местами быть обзор предыдущий пост оставить множество функция такой как генерация блок хэширование проверка функционал http использовать не быть а просматривать результат быть в консоль а для работа по сеть быть использовать tcp какой различие между tcp и http не быть вдаваться в подробность но весь что вы нужно знать что tcp являться базовый протокол который передавать дать http построить поверх tcp стек что бы использовать этот передача дать между интернет и браузер когда вы просматривать веб сайт вы использовать http протокол в дать урок быть работать с tcp так как мы не нужно ничто просматривать в браузер go иметь хороший пакет предоставлять весь функция tcp соединение который мы необходимый некоторый реализация уже рассматриваться в часть для генерация и проверка цепочка блок быть использовать функция из предыдущий статья создать файл в ваш главный директория и добавить строка сохранять номер порт tcp который хотеть использовать в наш случай 9000 в переменный окружение под название если вы ещё это не сделать установить следующий пакет для красивый печать наш цепочка блок в консоль для чтение переменный из наш файл создать пустой файл там расположить наш код декларация пакет и необходимый мы импорт следующий фрагмент код хорошо описать в часть давать создать наш структура и объявить слайс блок это и быть наш цепочка блок объявить так же наш функция хэширование который понадобиться мы при создание новый блок и функция создание блок мочь убедиться что наш новый блок правильный для это проверить что пол ссылаться на пол из предыдущий блок теперь гарантировать что взять самый длинный цепочка как правильный замечательный получить основной функционал по работа с цепочка блок теперь мочь перейти к создание взаимодействие по сеть давать создать сеть который мочь передавать новое блок интегрировать они в цепочка и транслировать новый цепочка для сеть начать с функция main но перед это давать объявить глобальный переменный который являться канал принимать входящая блок теперь давать объявить наш функция main и загрузить переменный окружение из наш файл который находиться в корневой каталог а так же запустить экземпляр наш в функция main теперь мы необходимый создать tcp сервер помнить что tcp сервер похожий на http сервер но для работа с браузер протокол tcp недостаточно весь дать быть отображаться через консоль быть обрабатывать несколько соединение с наш tcp порт добавить это к наш функция main этот код запустить наш tcp сервер на порту 9000 важный выполнить что бы соединение закрыться когда большой нет необходимость в немой почитать дробный про можно теперь мы необходимый создавать новое соединение каждый раз когда получать запрос на установка соединение и мы необходимый быть он обработать добавить ещё код создавать бесконечный цикл в который принимать новое соединение для конкурентный обработка каждый соединение запускать в обработчик в go рутина поэтому не останавливать наш цикл такой образ мочь одновременно слушать несколько соединение конкурентный внимательный читатель заметить что функция обработчик не объявить мы пока что создать наш основный функция целиком она выглядеть так давать теперь написать наш функция она принимать только один аргумент это интерфейс на наш взгляд интерфейс в go поразительный и они отличать он от весь c подобный язык конкурентность и go рутина рекламировать язык но интерфейс и тот факт что они мочь реализовывать интерфейс не явно являться самый мощный функция язык если вы ещё не использовать интерфейс в go ознакомиться с они как только смочь интерфейс это ваш следующий шаг для становление как go разработчик поместить в заготовка функция обработчик отложить закрытие соединение что бы не забыть он закрыть когда завершить работа теперь мы нужно разрешить клиент добавлять новое блок в цепочка для дать быть использовать частота пульс как в часть замерить свой пульс в течение минута и запомнить это число это быть параметр bpm beats per minute для реализация вышеуказанный мы необходимый код который реализовать выше описать функционал создавать новый сканер это цикл который работать конкурентный в go рутина и отдельно от другой соединение делать быстрый строковый преобразование значение bmp который всегда быть тип поэтому проверять он выполнять стандартный генерация блок проверка блок на валидность и добавление новое блок в цепочка синтаксис просто означать что мы бросать наш новый цепочка в канал который создать ранее затем предлагать клиент ввести новое значение bpm для создание следующий блок мы необходимый разослать новый цепочка блок для весь соединение на наш tcp сервер поскольку мы программировать на один компьютер мы надо имитировать как дать быть передаваться весь клиент в функция мы необходимый добавить вот код выполнять весь в нужный порядок замечательный наш функция готовый фактически весь программа готовый и мы сохранить она компактность в 200 строка код это неплохо не так ли целиком с весь код можно ознакомиться давать перейти в директория с наш код и запустить наш программа выполнить как и ожидаться видеть наш базовый блок в это же время запустить tcp сервер на порту 9000 который мочь принимать несколько соединение открыть новое окно терминал и подключиться к наш tcp сервер с помощь быть использовать разный цвета в терминал что бы быть понятно что это разный клиент сделать это несколько раз с разный сеанс терминал что бы запустить несколько клиент теперь ввести bpm на любой из клиент видеть что новый блок добавить в один терминал сеть работать ждать 30 секунда перейти к один из другой клиент и вы увидеть что новый цепочка блок передаться весь клиент даже если этот клиент никогда не вводить bpm поздравлять вы не только создать свой собственный blockchain из последний урок но и добавить сетевой взаимодействие теперь есть несколько направление для тот что бы двигаться дальше

