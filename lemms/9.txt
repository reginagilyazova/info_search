применение паттерн observer в redux и mobx bgnx паттерн observer известный наверное с момент появление самый ооп упрощенно можно представить что есть объект который хранить список слушатель и иметь метод добавить удалить и оповестить а внешний код либо подписываться либо оповещать подписчик в redux е этот паттерн применяться без всякий изменение пакет react redux предоставлять функция который оборачивать компонент и при вызов componentdidmount вызвать метод у при вызов вызвать а просто вызвать метод который в цикл вызвать весь слушатель где каждый в свой очередь вызвать и потом в зависимость от тот измениться ли значение вызвать на самый компонент весь очень просто но плата за простота являться необходимость явно указывать от какой часть стор зависеть компонент внутри mobx очень похожий на redux тем что использовать этот паттерн observer только развивать он ещё далёкий что если мы не быть писать а сделать так чтобы компонента зависеть от дать который они рендерить самостоятельно по отдельность вместо тот чтобы собирать подписчик на один объект состояние всего приложение подписчик быть подписываться на каждый отдельный пол в состояние это как если бы для юзер у который есть поль и мы создать бы целый redux стор отдельно для и отдельно для такой образ если мы найти лёгкий способ создавать такой стор и подписываться на они то быть не нужный потому что этот зависимость от разный часть состояние уже выражаться в существование разный стор итак на каждый пол у мы быть по отдельный минь стор объект observer где кроме и добавиться ещё пол а также метод и и при вызов подписчик вызваться только если сам значение измениться вместе с это требование иммутабельность стор нужно трактовать немного по другой если мы в каждый отдельный стор быть хранить только примитивный значение то с точка зрение redux нет ничто зазорный в тот чтобы вызвать поскольку строка это иммутабельный значение то здесь происходить просто установка новое состояние стор точно так же как и в redux в случай когда мы нужно сохранить в минь стор объект или сложный структура то можно просто вынести они в отдельный минь стор например вместо это хороший написать так чтобы компонента мочь по отдельность зависеть то от то от и чтобы не быть лишний перерендёр два момент можно заметить что с такой подход мы быть вынудить на каждый доступ к свойство вызывать метод что добавлять неудобство но этот проблема решаться через геттер и сеттер javascript а а если вы не относиться негативно к декоратор то этот пример можно ещё большой упростить в общий можно пока подвести итог и сказать что 1 никакой магия в это момент нет декоратор это всего лишь геттер и сеттер 2 геттер и сеттер всего лишь считывать и устанавливать root state в минь стор а ля redux идти далёкий для тот чтобы подключить весь это к реакт нужно быть в компонент подписаться на поль который в немой выводиться и потом отписаться в да при рост полый который выводиться в компонент количество болерплейт быть возрастать многократно но один небольшой движение ручной подписка можно убрать полностью если добавить несколько строчка код поскольку в шаблон так или иначе быть вызываться метод чтобы отрендерить значение то мы мочь воспользоваться это чтобы сделать автоматический подписка если перед вызов метод компонент мы записать в глобальный переменный текущий массив то в метод мы просто добавить в этот массив и потом в к конец вызов метод мы получить массив весь минь стор на который подписать текущий компонент этот простой механизм решать даже ситуация когда стор на который подписать компонент динамически меняться в время рендёр например когда компонент рендерита если длина имя маленький 5 компонент не быть реагировать то есть не быть подписать на изменение фамилия а подписка автоматически произойти когда длина имя быть большой равно 5 здесь функция оборачивать компонент или stateless component функция реакт и возвращать компонент который благодаря это механизм автоподписка подписываться на нужный минь стор в итог у мы получиться такой вот механизм автоподписка только на нужный дать и оповещение когда только этот дать измениться компонент быть обновляться только тогда когда измениться только тот минь стор на который он подписать учитывать что в реальный приложение где мочь быть тысяча этот минь стор с данные механизм множественный стор при изменение один поль обновиться только тот компонента который находиться в массив подписчик на это пол а вот подход redux когда мы подписывать весь этот тысяча компонент на один единственный стор при каждый изменение нужно оповещать в цикл весь этот тысяча компонент и при это заставлять программист вручную описывать от какой часть состояние зависеть компонента внутри более тот этот механизм автоподписка способный улучшить не только redux а и такой паттерн как мемоизация функция и заменить библиотека reselect вместо тот чтобы явно указывать в createselector от какой дать зависеть наш функция зависимость быть определяться автоматически точно так же выше сделать с функция render mobx это логичный развитие паттерн observer для решение проблема точечный обновление компонент и мемоизация функция если немного отрефакторить и вынести код в пример выше из компонент в и вместо вызов и поставить геттер и сеттер то мы почти что получить и декоратор mobx а почти потому что у mobx вместо простой вызов в цикл находиться более сложный алгоритм вызов подписчик для тот чтобы исключить лишний вызов для ромбовидный зависимость но о это в следующий статье

