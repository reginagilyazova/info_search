blazor технический введение sonicgd сегодня мы начинать стадия эксперимент чтобы понять смочь ли мы развить blazor в поддерживать продукт это большой шаг впереть далее что такой blazor это фреймворк для браузерный приложение написать на net и запускаться с помощь webassembly он да том вы весь преимущество богатый современный одностраничный приложение spa позволять при это использовать net от начало и до конец вплоть до общий код на сервер и клиент в подробно описать основной случай применение срок и так далее в это пост я хотеть глубокий поговорить о технический деталь для тот кома интересно как же это работать один шаг для построение spa фреймворка на net это какой то образ получить возможность запускать net код в браузер наконец то это мочь быть сделать с использование открытый стандарт и работать в любой браузер без всякий плагин благодаря webassembly на данный момент webassembly поддерживаться весь основный браузер в тот число и мобильный это компактный байткод формат оптимизировать для уменьшение объём скачивать дать и ускорение исполнение несмотря на то что многие разработчик мочь бы так подумать webassembly привносить никакой новый проблема безопасность так как это не обычный бинарный файл вроде x86 x64 это новый формат содержимый байткод который мочь делать только то же самый что и javascript так как же он позволять мы запускать net вс благодаря тот что если вы пропустить новость то проект mono стать частью microsoft в 2016 год mono это официальный net рантайм для клиентский платформа такой как нативный мобильный приложение и игра webassembly это просто ещ один клиентский платформа поэтому вполне разумно что mono должный на она работать моно мочь запускаться на webassembly в два режим и aot в рантайм mono компилироваться в webassembly но ваш net сборка нет браузер загружать и запускать рантайм который в свой очередь мочь загружать и исполнять стандартный net сборка обычный net dll файл собранный обычный net тулчейн это похоже на то как для обычный clr основный ядро распространяться скомпилировать в нативный код который затем загружать и исполнять net сборка единственный ключевой различие в тот что десктопный clr активно использовать jit компиляция для ускорение исполнение в то время как mono на webassembly работать близкий к классический модель интерпретация в aot режим ваш net приложение превращаться в чистый webassembly бинарник сразу при сборка в рантайм не происходить никакой интерпретация ваш код выполняться как обычный webassembly код этот режим вс ещ требовать загрузка некоторый часть рантайм mono такой низкоуровневый net сервис как например сборка мусор но позволять отказаться от такой компонент как парсер net файл это похоже на то как с незапамятный врать наш aot компиляция net сборка в нативный машинный код или на недавно появиться полноценный нативный aot net рантайм какой режим хороший мы пока что не знать однако мы знать что режим интерпретация да том гораздо более быстрый процесс разработка чем aot после изменение код вы мочь пересобрать он обычный net компилятор и получить обновть нной приложение в браузер в считать секунда aot компиляция в свой очередь мочь занимать минута очевидный мысль режим интерпретация быть основный для разработка а aot для продаксить но вс это мочь оказаться совсем не так потому что режим интерпретация к удивление гораздо быстрый чем вы мочь бы подумать и мы слышать от ребята из xamarin который использовать net для нативный мобильный приложение что обычный не aot net сборка очень маленькая и хорошо поддаваться компрессия в отличие от aot сборка мы быть рассматривать оба вариант пока у мы не появиться возможность объективно оценить разница возможность запустить net в браузер это хороший начать но это недостаточно чтобы быть продуктивный разработчик приложение вы нужный последовательный набор стандартный решение для стандартный проблема такой как создание переиспользование ui управление состояние роутинг юнит тестирование оптимизация сборка и так далее вс это должный быть спроектировать вокруг сильный сторона net и язык c позволять извлечь максимум из существующий экосистема net и поставляться вместе с первоклассный поддержка инструмент как это ожидать net разработчик blazor это вс вышеперечисленный он вдохновть наш сегодняшний хороший spa фреймворка такой как react vue и angular а также некоторый ui стэк от microsoft вроде razor pages наш цель дать веб разработчик то что максимально хорошо сочетаться с net в весь современный spa фреймворка приложение построить из компонент компонент обычно представлять из себя какой то ui элемент страница диалог набор вкладка или форма компонента мочь вкладываться друг в друг переиспользоваться и разделяться между проект в blazor компонент это net класс который вы мочь написать напрямую то есть как c класс или что более принять в вид страница разметка razor cshtml файл появиться примерно razor это синтаксис для комбинирование разметка с c код он создать специально для продуктивность разработчик позволять вы переключаться между разметка и c без всякий церемония с полный поддержка в пример ниже показать простой компонент диалог описать в razor файл mydialog cshtml когда вы быть использовать этот компонент инструментарий знать что вы подсказать многие шаблон проектирование мочь быть построить на это простой фундамент включая популярный паттерн из spa фреймворок вроде компонент с состояние stateful components функциональный компонент без состояние stateless components и компонент более высокий порядок higher order components вы мочь вкладывать компонента друг в друг процедурный генерировать они разделять между библиотека запускать юнит тест без необходимость наличие браузер и в целое жить хорошеть жизнь при создание новое проект blazor предложить основной сервис необходимый большинство приложение важный аспект архитектура вс это опциональный если вы что то не использовать это быть удалить из итоговый билд при публикация другой важный момент только несколько самый низкоуровневый часть находиться в ядро фреймворка к пример роутинг и система шаблон не такой они реализовать в юзер спейс то есть этот код мочь быть написать разработчик приложение без использование какой либо внутренний api поэтому если вы не нравиться наш роутинг или система шаблон вы мочь заменить они свой наш текущий прототип система шаблон представлять из себя около 30 строка код на c так что вы легко смочь разобраться и переписать он если захотеться очевидно что значительный часть целевой аудитория blazor это asp net разработчик для они мы выпустить middleware для прозрачный хостинг ui на blazor с такой дополнительный возможность как пререндеринг на сервер не менее важный для мы и разработчик пока совсем не использовать net чтобы blazor быть жизнеспособный для разработчик предпочитать node js rails php или любой другой серверный технология а то и вовсе пишущий serverless приложение мы абсолютно точно не быть требовать наличие net на сервер результат сборка blazor приложение папка dist в который лежать только статический файл мы мочь раздавать они с страница github из облачный хранилище через node js сервер и вообще через что угодный это способ описать уровень возможность предоставлять net рантайм или требовать net сборка если ваш net рантайм поддерживать и ниже и у вы есть сборка нацелить на и выше то вы смочь запустить этот сборка на это рантайм mono на webassembly быть поддерживать или более высокий версия в зависимость от срок выход это означать что вы смочь использовать свой net библиотека и на бэкенд и в браузерный приложение к пример у вы мочь быть проект с класс модель бизнес логика он можно быть использовать и на сервер и на клиент и конечно же вы смочь скачивать пакет из nuget однако не весь net api иметь смысл в браузер к пример вы не смочь слушать произвольный tcp сокет так что не быть делать ничто полезный также вы практически наверняка не должный использовать в браузерно приложение и это не проблема так как в один браузер вс таки поддерживать api который действительно нужный человек для создание веб приложение и в второе у net standard есть механизм обработка для такой случай при вызов не применимый для конкретный платформа api базовый система класс bcl быть выбрасывать исключение platformnotsupported в начало это мочь приводить к проблема однако с время автор nuget пакет внести изменение в свой библиотека для поддержка разный платформа если net хотеть двигаться в сторона это ступень на который прид тся подняться даже если вы писать браузерный приложение на c f иногда бывать нужно подключить чужой javascript библиотека или свой собственный код на javascript typescript для вызов какой нибыть новое браузерный api это должный быть очень просто так как стандарт webassembly спроектировать чтобы взаимодействовать с javascript и это неудивительно и мы мочь легко использовать это в net код чтобы работать с чужое javascript библиотека мы исследовать возможность использование в c код с полный intellisense это сделать около 1000 самый популярный js библиотека очень простой для интеграция текущий подход для вызов чужое библиотека или ваш js ts код из net это регистрация именовать функция в js ts файл например и затем созд метр о рткать для вызов из net подход с иметь приятный бонус в вид хорошеть работа с javascript сборщик вроде webpack и чтобы поберечь ваш время и нерв команда mono работать над библиотека который пробросить стандартный браузерный api в net исторически net фокусироваться на платформа где размер приложение не такой уж большой проблема не иметь большой разница весить ли ваш asp net приложение 1мб или 50мба это средний степень проблема для десктопный или мобильный приложение но для браузер размер загрузка очень критичный в защита можно сказать что net на webassembly скорее всего быть загружаться всего один раз ведь можно использовать стандартный http кэширование или даже модный штука вроде service worker чтобы гарантировать что пользователь загрузить ядро рантайм только единожды а если использовать cdn то пользователь и вовсе мочь использовать результат один загрузка сразу в приложение вс это хорошо однако я не думать что это достаточно если рантайм быть весить 20мба то это вс равно слишком много даже для единоразов загрузка это же не браузерный плагин в конец конец это обычный построить по стандарт веб приложение даже самый один загрузка должный быть быстрый поэтому мы прикладывать много усилие для уменьшение размер загрузка мы видеть следующий 3 фаза оптимизация рантайм mono содержимый много специфичный для десктоп возможность мы надеяться что blazor быть содержимый урезанный версия mono который существенно маленький чем полный дистрибутив при ручной попытка оптимизация я смочь удалить около 70 из файл рантайм без нарушение работа базовый приложение основать на выполнять статический анализ определять какой часть net библиотека мочь быть вызвать из ваш приложение и удалять вс остальной это похоже на за разница в тот что il компоновщик гораздо более точный и работать на уровень отдельный метод это позволять убрать весь неиспользуемый код системный библиотека что да том огромный разница в большинство случай часто уменьшать размер приложение ещ на 70 ну и наконец самый очевидный мы ожидать что ваш сервер поддерживать http сжатие это обычно срезать ещ 75 объ ма конечно веб приложение на net никогда не быть такой же миниатюрный как простейшее приложение на react наш цель состоять в тот чтобы сделать он настолько небольшой что обычный юзер на среднее подключение не заметить даже самый один загрузка не говорить уже о последующий загрузка из кэш нравиться это вы или нет но веб разработка сильно измениться в ближний несколько год webassembly позволить веб разработчик выбирать из гораздо больший список язык и платформа чем когда либо и это хорошо наш мир наконец то взрослеть разработчик серверный по и нативный приложение всегда мочь выбирать язык и парадигма который хороший всего подходить для решение они проблема соответствовать культура команда и подкрепить иметься знание мечтать писать функциональщина на haskell или lisp для ваш финансовый приложение хотеть немного низкоуровневый c вы apple разработчик и хотеть продолжить использовать свой знание swift вс это прид том в веб не пугаться это не значит что вы нужно быть знать весь этот язык это значит что весь мы стать обычный разработчик по ваш текущий знание программирование для браузер по прежний актуальный и ценный но у вы появиться новое путь выразить свой идея и большой точка соприкосновение с другой сообщество разработчик и наш инициатива состоять в тот чтобы поставить net в авангард это движение а не тащиться позади отставать на год чувствовать желание попробовать притормозить мы вс ещ на очень ранний стадия проект пока ещ ничто не готовый для скачивание и многий из вышеописанный в процесс разработка большинство из вы должный просто расслабиться и подождать один пра альфа билд появиться примерно через месяц помнить на данный момент blazor эксперимент для команда asp net мы потребоваться несколько месяц чтобы понять смочь ли мы сделать из он полноценный поддерживать продукт мы ещ ничто не обещать поэтому не надо строить свой бизнес план вокруг blazor если же вы сильно заинтересоваться то посмотреть в попробовать собрать он позапускать тест и мочь даже поискать комментарий и прислать pull request или поделиться идея о кл вой фич в заключение привести несколько интересный ссылок

