И на улицу JavaFX тоже придет Spring
ShinRa
Доброе время суток, хабровчане! 
 
Надеюсь среди Вас найдутся такие же любители делать формочки как и я.  
Дело в том, что я всегда был приверженцем дружелюбных интерфейсов. Меня расстраивали приложения, которые мало ориентированны на пользователей, такое особенно бывает в корпоративной разработке. И зачастую клиентские приложения написанные на Java это черные окошки, а к приложениям c GUI относятся со скептицизмом.  
 
Ранее, на Swing или AWT все было очень печально, да наверное и до появления JavaFX 8 написание анонимных классов превращалось в спаггети код. Но с появлением лямбда-выражений все изменилось, код стал проще, понятней, красивее. Использовать JavaFX в своих проектах стало одним удовольствием.  
 
Вот и возникла у меня мысль связать лучший инструмент для Java Spring Framework и удобный в наше время инструмент для создания GUI JavaFX, это даст нам использовать все возможности Spring`а в клиентском десктопном приложении. Собрав всю информацию воеидно, которую я искал по просторам сети, я решил поделиться ей. Прежде всего хочу отметить, что статья предназначена больше для новичков, поэтому некоторые подробности для многих могут оказаться слишком банальными и простыми, но я не хочу их опускать, чтобы не терять целостность статьи. 
 
 
 
Жду конструктивной критики, по свои решениям. 
 
Кому интересно, прошу под кат. 
 
Попробуем написать небольшое приложение. Предположим, что есть такое примитивное задание: необходимо написать приложение которое будет загружать из БД данные о продуктах в таблицу на форме, а при клике на каждую строку таблицы открывать дополнительное окно с более подробными данными о продукте. Для наполнения базы данных воспользуемся сервисом. Я сгенерировал фейковые данные для таблицы с продуктами и успешно заполнил ими БД. 
 
Получается следующее. 
 
Главная форма состоит из компонентов: 
 
1. Button с текстом «Загрузить» 
2. TableView c полями «ID», «Наименование», «Количество», «Цена» 
 
Функционал 
 
 
Используемый стек: 
 
 
 
 
Создаем новый проект в IDEA, используя архетип Maven. Первоначальную структуру которую мы видим вполне стандартную для maven проекта: 
 
 
Выставляем необходимый Language Level для модуля и проекта и изменяем Target bytecode version для нашего модуля в настройках Build, Execution, Deployment -> Compiler -> Java Compiler. В завимисомти от версии вашего JDK. 
 
Теперь необходимо превратить то что получилось, в приложение на JavaFX. Структуру проекта которую я хочу получить привожу ниже, она не претендует на идеал. 
 
 
Создаем пакет org.name (или просто используете тот же значение как и в groupId) в директории java. Точка входа приложения, контроллеры, кастомные элементы и утилиты для интерфейса будут расположены в пакете app. Все остальное что касается непосредственно сущностей используемых в приложении в пакете model. В resources я создаю директорию view и храню *.fxml в папке fxml, *.css в папке style и изображение в папке image. 
 
В FXML шаблоне   задаем шаблон внешнего вида приложения. Он будет включать в себя шаблон  , в котором задан внешний вид таблицы.   это наш главный котроллер и он будет пока с одним методом обработки нажатия кнопки загрузки.   котроллер для таблицы.   расширяем от   и загружаем в методе start наш main.fxml обычным способом. Класс   оставим на потом. А вот   напишем по концепции JavaBean. 
 
Переходим к содержимому файлов: 
 
 
 
 
 
 
 
Запускаем, чтобы убедится, что все работает. 
 
 
 
 
Пробуем собрать JAR с помощью  . Добавив в наш   следующую конфигурацию (В проекте у меня Java 9, но это не значит что я использую все ее возможности, просто для новых проектов выбираю самые свежие инструменты): 
 
 
и maven-jar-plugin: 
 
 
Пробуем запустить получившийся jar-ник, если у вас должным образом настроены переменные среды: 
 
Или с помощью run.bat со следующим содержанием: 
 
 
Лично я использую на своем ПК разные JDK поэтому запускаю приложения таким образом. 
 
 
 
Кстати, чтобы скрыть терминал вызываем не  , а   просто для текущего случая нам необходимо было проверить вывод текста при нажатии на кнопку. 
 
 
Теперь пришло время для Spring, а именно создадим   в   и напишем немного измененный загрузчик сцен. Сразу отмечу, что идея загрузчика Spring для JavaFX не моя, я уже встречал такое на просторах сети. Но я немного ее переосмыслил. 
 
Редактируем для начала наш  . Добавляем версию Spring 
 
 
и зависимости spring-context, spring-jdbc и sqlite-jdbc. 
 
 
 
Создаем файл конфигурации  . Он содержит следующие данные: 
 
Добавляем   в ресурсы со следующим содержанием, если вы хоть немного знакомы со спрингом, то думаю в вас не возникнет проблем в понимании написанного ниже. 
 
 
Напишем абстрактный контроллер   который расширяет интерфейс  , чтобы мы могли получать контекст из любого контроллера. 
 
 
Теперь реализуем загрузчик сцен  . Он будет больше похож на утилитный класс, в котором можно реализовать загрузку различных сцен и окон, поэтому он у меня сразу получился таким объемным. 
 
 
Немного переписываем метод start в классе  . А так же добавляем инициализацию контекста и его освобождение. 
 
 
Не забываем унаследовать класс MainController от Controller и всем контроллерам добавить аннотацию  , это позволит добавить их в контекст через component-scan и получать любые контроллеры из контекста, как бины, или инжектить их. Иначе получим исключение 
 
Запускаем и видим что текст заголовок окна стал таким который мы прописали в property: 
 
 
 
Но загрузка данных у нас еще не реазилована как и отображение подробной информации о продукте. 
 
Реализуем класс  
 
 
Теперь осталось дописать пару строк в главном контроллере, чтобы при нажатии на кнопку у нас данные загружались в таблицу 
 
 
и реализовать открытие нового окна с деталями продукта. Для этого используем шаблон   и сцену  . 
 
 
 
В   допишем еще один метод: 
 
 
а в метод инициализации   добавить несколько строчек: 
 
 
Запускаем и видим результат: 
 
 
 
 
А вот еще одна интересная тема. Предположим что ваш контекст долго инициализируется, в этом случае, пользователь не поймет идет ли запуск приложения или нет. Поэтому для наглядности необходимо добавить заставку, во время инициализации контекста. 
Сцену с заставкой будем писать обычным способом через  . Т.к. контекст как раз в этом время будет инициализироваться. Инициализацию тяжелого контекста сымитируем вызовом Thread.sleep(10000); 
 
Шаблон с картинкой: 
 
 
Измененный   для загрузки приложения с заставкой 
 
 
Собираем, запускаем и получаем то что хотели: 
 
 
 
Остался последний шаг. Это собрать JAR, но уже со Spring`ом. Для этого необходимо добавить в   еще один плагин  : 
 
 
Вот таким вот простым способом можно подружить Spring и JavaFX. Окончательная структура проекта: 
 
 
Исходники на  . Там же файл PRODUCTS.sql для таблицы в БД.
