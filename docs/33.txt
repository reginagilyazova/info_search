Анимации в Android по полочкам (Часть 1. Базовые анимации)
juztoss
Всем привет! 
 
Сегодня я хочу немного рассказать про анимацию в Android. Думаю для всех достаточно очевидный факт, что анимации могут украсить наше приложение. Но я считаю, что они могут намного больше. Первое это — хорошие анимации даже при скромной графике могут вывести наше приложение на абсолютно новый уровень. Второе — это дополнительный инструмент для общения с пользователем, позволяющий фокусировать внимание, подсказывать механики приложения, и многое другое… но это отдельная большая тема. 
 
Сегодня мы поговорим об инструментах для создания анимации. К сожалению, так получилось, что в Android достаточно много способов что либо анимировать, и по началу в них очень легко запутаться. Я постараюсь привести максимально общую классификацию и оставлю ссылки исключительно на документацию, т.к. туториалов можно найти предостаточно. Надеюсь эта статья поможет уложить в голове всё по полочками и, при необходимости создать анимацию, выбрать наиболее подходящий способ. 
 
 
 
 
Часть 4. Анимации переходов 
Часть 5. Библиотеки для работы с анимацией 
 
 
 
 
 
Предполагаю, что первая анимация в мире создавалась именно так, и в Android до сих пор доступна эта возможность. 
 
Всё что нужно сделать это создать xml со ссылками на каждый кадр: 
 
 
И запустить анимацию (Здесь и далее все примеры будут приведены на Kotlin): 
 
• Применение: 
 
Сложные по графике анимации, небольших размеров и подготовленные во внешнем редакторе. 
 
• Достоинства: 
 
Возможность достичь любой сложности эффектов 
 
• Недостатки:  
 
Большое потребление ресурсов и, как следствие, довольно затратный импорт в приложение с возможностью получить OutOfMemory. Если по каким-то причинам вам нужно показывать большое количество кадров, то придётся писать свою реализацию с постепенной подгрузкой изображений в память. Но если так пришлось делать, возможно проще прибегнуть к видео? 
 
 
 
 
Если нам нужно всего-лишь передвинуть что-нибудь на несколько пикселей в сторону или изменить прозрачность, чтобы не плодить миллион очень похожих друг на друга кадров на помощь приходит Animator. Фактически с помощью него можно анимировать любое свойство любых объектов. 
 
Базовый абстрактный класс называется Animator, у него есть несколько наследников, нам важны: 
 
ValueAnimator — позволяет анимировать любое свойство 
ObjectAnimator — наследуется от ValueAnimator и имеет упрощённый интерфейс для анимации свойств View. 
ViewPropertyAnimator — Предоставляет ещё один удобный интерфейс для анимации View. Не унаследован от Animator и используется в методе View::animate()  
 
Анимацию выше можно описать как в коде: 
 
 
так и в XML ( ): 
 
 
 
Так-же есть возможность описать нашу анимацию переходов между стейтами View, что соответсвенно, с лёгкостью позволит создать анимированные переходы между стейтами у любых View. Описанная в XML анимация будет автоматически запущена при смене состояния View. 
 
 
 
 
 
• Применение: 
 
Анимация View объектов и любых их параметров 
Анимация любых других параметров 
 
• Достоинства: 
 
Абсолютно универсален 
 
• Недостатки: 
 
В некоторой степени требовательны к ресурсам 
 
 
До появления Animator в Android были только Animations. Основной недостаток которых был в том что они анимировали только представление вида и никак на самом деле не изменяли его свойства. Поэтому если хочется анимировать перемещение какого-либо элемента, то дополнительно по окончанию анимации нужно изменить ещё его свойства. Такой подход так или иначе не очень удобен, если вам нужна чуть более сложная анимация или нужно отлавливать нажатия в момент анимации. 
 
Анимацию можно запустить как в коде: 
 
 
так и в XML (обратите внимание, что синтаксис отличается от xml для Animator): 
 
 
 
 
 
• Применение: 
 
Там, где API не позволяет использовать Animator. 
 
• Достоинства: 
 
Отсутсвуют 
 
• Недостатки: 
 
Устаревший API, меняет только представление вида. 
 
 
 
 
На мой взгляд самая интересная часть в Android анимациях. Можно относительно малыми силами добиваться сложных и интересных эффектов. Трансформации иконок в Android сделаны именно так. 
 
VectorDrawable состоит из Path и Group элементов. Создание анимации сводится к тому, чтобы прописать движение к этим элементам. Андроид на картинке выше, в коде будет выглядеть так: 
 
 
Чтобы не писать XML вручную можно воспользоваться  . 
 
Начиная с API 25 векторные анимации отрисовываются в RenderThread, поэтому, даже если мы загрузим чем-то наш UI Thread (но мы же никогда так не делаем, да?), анимации всё равно будут проигрываться плавно. 
 
• Применение: 
 
Иконки 
Анимационные эффекты 
 
• Достоинства: 
 
Производительность 
 
• Недостатки: 
 
Нет возможности вручную управлять точкой анимации во времени (т.е. фактически отсутствует какой-либо метод, вроде setCurrentTime) 
 
Все примеры можно  .
