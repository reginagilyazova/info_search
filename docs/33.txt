Продвинутая работа с JSON в MySQL
win0err
У MySQL нет возможности напрямую индексировать документы JSON, но есть альтернатива: генерируемые столбцы.
С момента введения поддержки типа данных JSON в MySQL 5.7.8 не хватает одной вещи: способности индексировать значения JSON. Для того, чтобы обойти это ограничение, можно использовать генерируемые столбцы. Эта возможность, представленная в MySQL 5.7.5, позволяет разработчикам создавать столбцы, содержащие информацию, полученную из других столбцов, предопределенных выражений или вычислений. Генерируя столбец из значений JSON, а затем индексируя его, можно практически индексировать поле с JSON.
Набор данных в формате JSON, используемый в данной статье, можно скачать 
. Он содержит список игроков со следующими элементами: идентификатор игрока, его имя и игры, в которые он играл (Battlefield, Crazy Tennis и Puzzler).
Поле Battlefield содержит любимое оружие игрока, его текущий ранг и уровень этого ранга. Crazy Tennis включает в себя количество выигранных и проигранных игр, а Puzzler содержит время, затраченное игроком на прохождение игры. Создадим начальную таблицу:
Этот запрос создает таблицу 
, состоящую из идентификатора и JSON-данных, а также устанавливает в поле 
 первичный ключ. 
Нужно построить индекс по полю с JSON. Давайте посмотрим, что нужно добавить в команду 
.
Для создания генерируемых столбцов в операторе 
 используется следующий синтаксис:
Ключевыми словами здесь являются 
 и 
. Фраза 
 необязательна. Она необходима только в том случае, если вы хотите явно указать, что этот столбец таблицы — генерируемый. Необходимо, чтобы слово 
 сопровождалось выражением, которое вернет значение для генерируемого столбца. 
Начнем с этого:
Cоздаем столбец с именем 
 длиной до 20 символов, в котором будем хранить значение поля «name» из объекта JSON. Обращаться к полю «name» в JSON будем с использованием MySQL-оператора 
, который эквивалентен написанию 
. Эта конструкция вернет значение поля «name» из объекта JSON в качестве результата.
Этот код означает, что мы берём поле c JSON 
 и извлекаем значение из JSON по ключу «name» — дочернее по отношению к корню.
Как и в большинстве определений столбцов, существует ряд ограничений и параметров, которые можно применить к столбцу.
Уникальные для генерируемых столбцов ключевые слова 
 и 
 указывают на то, будут ли значения сохраняться в таблице. 
Ключевое слово 
 используется по умолчанию. Оно означает, что значения столбца не сохраняются и не занимают место для хранения. Они вычисляются при каждом чтении строки. Если вы создаете индекс с виртуальным столбцом, значение всё же сохраняется — в индексе. 
Ключевое слово 
 указывает, что значения вычисляются при записи данных в таблицу: при вставке или обновлении. В этом случае индексу не нужно сохранять значение.
Другие параметры — необязательные ограничения, которые гарантируют, что значения поля будут 
 или 
, а также добавления ограничений на индекс, например, 
 или 
. Для гарантии существования значения следует использовать 
 при создании столбца, однако ограничения зависят от варианта использования. В примере будет использоваться 
, так как у игроков обязательно есть имя.
Запрос, создающий таблицу:
Заполнение таблицы тестовыми данными:
Содержимое таблицы 
 на 
 или…
Таблица включает столбец 
, в который вставлены все имена игроков. Структура таблицы 
:
Поскольку мы не указали, является ли генерируемый столбец 
 или 
, по умолчанию MySQL автоматически сделал столбец 
. Чтобы проверить, являются ли столбцы 
 или 
, просто запустите вышеуказанный запрос 
, и он покажет либо 
, либо 
.
Теперь, когда мы настроили таблицу и виртуальный столбец, добавим еще четыре столбца, используя операции 
 и 
. Они будут содержать уровни Battlefield, выигранные и проигранные игры в теннис и время в Puzzler.
Опять же, запустив запрос 
, мы видим, что рядом с ними все столбцы указаны как 
. Это означает, что мы успешно настроили новые созданные 
 столбцы.
Код 
 или…
Выполнение запроса 
 показывает нам все значения из 
, которые должны выглядеть так:
Код 
 или…
После добавления данные и создания генерируемых столбцов, мы можем создавать индекс для каждого из них, чтобы оптимизировать поиск…
При установке вторичных индексов на значения генерируемых столбцов 
 значения сохраняются в индексе. Это дает преимущества: размер таблицы не увеличивается, появляется возможность использования индексов в MySQL.
Давайте сделаем простой запрос к генерируемому столбцу, чтобы увидеть, как он выглядит, прежде чем индексировать его. Изучив детали запроса при выборе 
 и имени «Sally», получим следующее:
Для этого запроса MySQL просматривает каждую строку, чтобы найти «Sally». Однако, можно получить совершенно другой результат, добавив индекс к столбцу:
Теперь, выполняя тот же запрос, получаем:
Как видно, индекс в столбце ускорил запрос, просматривая только одну строку вместо шести, используя индекс 
. Давайте создадим индексы для остальных виртуальных столбцов, следуя тому же синтаксису, что и 
:
Можно проверить, были ли проиндексированы все наши столбцы, запустив:

Код 
 или…
Теперь, когда созданы несколько индексов в генерируемых столбцах, давайте усложним поиск. В этом примере выбираются идентификаторы, имена, выигранные теннисные игры, уровень Battlefield и время Puzzler для игроков, которые имеют уровень выше 50, а также выигравших 50 теннисных игр. Все результаты будут упорядочены по возрастанию в соответствии с временем в Puzzler. Команда SQL и результаты будут выглядеть так:
Давайте посмотрим, как MySQL выполнял этот запрос:
При использовании индексов 
 и 
 MySQL приходилось обращаться к двум столбцам, чтобы вернуть желаемый результат. Если запрос должен выполнить полный просмотр таблицы с миллионом записей, это займёт очень много времени. Однако, с помощью генерируемых столбцов и их индексированием, MySQL показал очень быстрый результат и удобный способ поиска элементов в JSON-данных.
Тем не менее остается один вопрос: для чего нужны 
 генерируемые столбцц? Как их использовать и как они работают?
Использование ключевого слова 
 при настройке генерируемого столбца обычно не предпочтительно, поскольку в основном значения в таблице сохраняются дважды: поле с JSON и в 
 столбце. Тем не менее, существует 
, когда в MySQL нужно использовать столбец 
: 
Синтаксис добавления генерируемого 
 столбца, совпадает с созданием генерируемых столбцов 
, за исключением того, что нужно добавить ключевое слово 
:
Чтобы посмотреть как использовать 
, создадим еще одну таблицу. Она будет брать 
 из данных JSON и хранить его в 
 столбце. Установим 
 для столбца 
:
Добавим тот же набор данных в 
, за исключением того, что удалим 
, который ранее добавили в операцию 
:
После того, как данные были вставлены в таблицу, запустим 
 в новой таблице, чтобы узнать, как MySQL создал столбцы. Обратите внимание, что поле 
 теперь — 
 и содержит индекс 
.
Замечание об использовании 
 с генерируемыми столбцами: MySQL не позволит создавать первичные ключи для генерируемых 
 столбцов. На самом деле, если не указать 
 в поле 
, MySQL выдает следующую ошибку:
В то же время, если не устанавливать индекс первичного ключа и попытаться вставить данные, MySQL выдает сообщение об ошибке:
Это означает, что у таблицы нет первичного ключа. Поэтому нужно вернуться и пересоздать таблицу, либо удалить столбец 
 и добавить генерируемый 
 столбец с первичным ключом, например:
В статье показано как эффективно хранить данные JSON в MySQL, а так же как создавать индексы благодаря генерируемым столбцам. Использование генерируемых столбцов позволит размещать индексы по определенным элементам данных JSON. Именно эта гибкость делает MySQL очень привлекательной для использования JSON.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

