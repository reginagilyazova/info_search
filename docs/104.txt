Расширение и использование Linux Crypto API
HenadziMatuts
Криптографический 
 в 
 введён с версии 2.5.45 ядра. С тех пор 
 оброс всеми популярными (и не только) международными стандартами:
Эта криптография доступна и, в основном, используется различными подсистемами ядра (в 
): 
, 
 и др. Воспользоваться функциями 
 из пространства пользователя (
) также возможно через 
-интерфейс, в который, начиная с версии 2.6.38 ядра, введено семейство 
, предоставляющее доступ к криптографии ядра из 
 кода. Однако, существующего функционала иногда недостаточно, таким образом появляется необходимость расширения 
 новыми алгоритмами.
Так, примерно два года назад передо мной стояла задача встраивания национальной (в Республике Беларусь) криптографии в 
-реализацию ядра 
 (версии 3.13). На тот момент я никогда не занимался программированием в 
 и это было моим первым опытом написания модулей ядра, с чем мне очень помогла книга 
. Куда сложнее было разбираться с самим 
 — в упомянутой книге этот вопрос не освещается в принципе, а в 
, хоть и дано достаточно подробное описание архитектуры, практически нет информации о внедрении новых алгоритмов. В своих поисках, в журнале "Хакер" я наткнулся на замечательную 
, популярно рассказывающую о том, 
, но, опять же, там нет ни слова о его расширении. В конце концов, за необходимыми мне знаниями я обратился к первоисточнику (к коду ядра), и решил поставленную задачу.
С тех пор уже прошло некторое время и только сейчас, актуализировав свои знания, я взялся за написание этого текста. Он о 
. На конкретных примерах мы посмотрим, каким образом в 
 можно встроить произвольные алгоритмы и как к ним обратиться как из 
, так и из 
. Я уверен, что этот материал будет крайне полезен разработчикам, столкнувшимся со схожими проблемами, но надеюсь, что и случайный читатель сможет найти здесь для себя что-то интересное.
P.S. Компилируемые исходники моих программ, фрагменты которых будут встречаться ниже, доступны на 
. Там же — исходник этой статьи. Весь код был написан и протестирован под десктопной Ubuntu 16.04 LTS с ядром версии 4.13.0-32-generic. Некоторые интерфейсы, которые я использовал в модулях, были введены в 4 версии ядра, поэтому на ядрах 3.* они точно 
 скомпилируются.
Прежде чем приступить к написанию кода, поговорим немного о том, как всё устроено в 
. Впрочем, до меня об этом подробно рассказали в 
, я же, в свою очередь, приведу лишь выжимку, которой должно быть достаточно для понимания материала. Сразу оговорюсь, далее речь пойдёт преемущественно о симметричном шифровании, иные виды криптопреобразований, в целом, работают схожим образом, но многочисленные нюансы очень сильно бы всё усложнили.
Итак, из введения мы уже знаем, что криптографическая подсистема ядра включает множество реализаций криптографических алгоритмов и предоставляет к ним интерфейсы, доступные пользователю (здесь и далее — под пользователем и разработчиком имеются ввиду, соответственно, 
 и 
). В терминах 
, алгоритмы называются "преобразованиями" (
), так, различные типы преобразований имеют собственный под-
, а дескрипторам (хэндлам) преобразований, как правило, присваивается имя "
", например:
Здесь 
 — это хэндл некоторого преобразования, в данном случае — шифрования блока данных по алгоритму 
. Жизненный цикл хэндла 
 сводится к трём этапам:
Независимо от используемого алгоритма, через хэндл типа 
 доступны реализации базовых функций 
 данных, а соответсвующий ему 
 (
) предоставляет методы установки ключа и зашифрования/расшифрования блока. В качестве самостоятельного 
 он не представляет большого интереса для пользователя, однако, с точки зрения разработчика, он важен, поскльку с его помощью реализована ключевая концепция 
 — так называемые "шаблоны" (
). Шаблоны используются в связке с базовыми функциями и реализуют:
При создании хэндла (см. пример выше), требуемый алгоритм задётся строкой — именем алгоритма, эта строка имеет следующую семантику:
Кроме того, там, где это применимо, шаблоны могут быть "завёрнуты" в другие шаблоны:
При этом использование шаблонов без базового алгоритма невозможно. Приведу несколько примеров:
Применение симметричных блочных шифров в каком-либо режиме осуществляеся через отдельный 
. Стоит отметить, что сейчас в ядре существуют три таких 
, однако два из них объявлены устаревшими (
), а актуальным является 
. Этот 
 предоставляет пользователю методы установки ключа/синхропосылки и зашифрования/расшифрования данных произвольной длины, он так же является 
 (асинхронным) — методы шифрования максимально быстро возвращают управление вызывающему, в то время как запрос на выполнение криптооперации и функция обратного вызова, используемая для оповещения пользователя о завершении операции, передаются системному планировщику. 
 будет подробно рассмотрен, когда мы перейдём к созданию модуля ядра, тестирующего встроенный нами алгоритм.
Помимо двух названных, в 
 существуют под-
 для:
Для разработчика наличие шаблонов в 
 означает, что, встраивая новый алгоритм симметричного шифрования, достаточно реализовать лишь базовую функцию шифрования блока, которая, затем, может быть инкапсулирована в соответствующие шаблоны для получения требуемых режимов. 
 Действительно, если взглянуть на исходный код включенных в ядро алгоритмов (
, 
, ...), то можно увидеть, что там реализованы только базовые функции. Однако, если мы таким же образом реализуем функцию шифрования блока классического 
, "завернём" её в режим гаммирования (шаблон 
), а после этого полученный алгоритм проверим на тестовых последовательностях, то мы получим неверный результат! Всё дело в том, что режим гаммирования, описанный в 
, отличается от алгоритма гаммирования, реализованного в шаблоне 
. То же самое касается и других национальных алгоритмов, с которыми я имел дело. В таких случаях необходимо встраивать полноценные блочные шифры в нужных режимах, как это сделано, например, в оптимизированной реализации алгоритма 
 (
 — 
). Позже мы рассмотрим оба варианта встраивания.
Пожалуй, это всё, что я хотел сказать по поводу архитектуры. Заинтересованным в более подробном описании следует обратиться к 
, а моего изложения должно быть достаточно, чтобы мы могли двигаться дальше.
Итак, мы готовы к тому, чтобы начать встраивать в 
 какой-нибудь новый алгоритм, с той лишь оговоркой, что у нас пока нет алгоритма, который можно было бы встроить. Для этой статьи я не стал утруждать себя реализацией "настоящего" криптоалгоритма, поскольку едва ли смог бы сделать это качественно (оставьте это криптографам). С другой стороны, делать шифр-"пустышку" (
) было бы не так интересно, тем более, что такой в ядре уже есть. Таким образом, мы пойдём на компромисс и напишем реализацию элементарного алгоритма шифрования:
Где:
Размеры блока и ключа для этого алгоритма примем равными 128 битам (16 байт).
Можем приступать к реализации. Определим криптоконтекст нашего алгоритма и функции создания/уничтожения контекста:
Добавляем методы установки ключа и зашифрования/расшифрования блока:
Учитывая обратимость операции "
", метод 
 используется для зашифрования и расшифрования одновременно.
Шифрование блока — это хорошо, но станет ещё лучше, если мы реализуем какой-нибудь из режимов блочного шифрования, например, 
:
Где:
Продолжим работу, реализуем методы зашифрования и расшифрования в режиме сцепления блоков шифра.
Вот это уже интересней! Теперь, пользуясь данной реализацией, мы можем подготовить тестовые последовательности, на которых, в дальнейшем, проверим реализацию этого же алгоритма в ядре. Под спойлером — значения, которые использовал я.
Исходники реализации алгоритма и программы тестирования доступны 
, а мы практически готовы к тому, чтобы перейти в 
, но перед этим я хочу обратить ваше внимание на один важный момент. Дело в том, что многие известные алгоритмы шифрования не предполагают обработку последнего 
 блока входных данных. Так, например, реализации алгоритма 
 возвращать признак ошибки, если размер входных данных не кратен размеру блока, тогда как белорусский 
 предусматривает такую обработку. Мой алгоритм также её предусматривает (ключ и текущее значение синхропосылки усекаются до размеров неполного блока). Этот факт сыграет свою роль немного позже, пока стоит просто иметь это в виду.
Действие переносится в пространство ядра. Программирование в ядре несколько отличается от программирования в пространстве пользователя и, ввиду сложности отладки, является достаточно трудоёмким процессом. Однако, работая над этим материалом, я не ставил перед собой задачу познакомить читателя с основами программирования модулей ядра, ведь об этом и без меня предостаточно написано, в том числе и здесь, на 
 (
; и 
). Поэтому, если читатель совершенно не знаком с написанием модулей, то я бы рекомендовал сперва просмотреть те материалы, которые я привёл выше, либо поискать самостоятельно (уверяю, это не займёт много времени). А с теми, кто готов идти дальше, мы приступаем к глубокому изучению 
.
Итак, у нас есть алгоритм, и мы хотим встроить его в ядро, но с чего же начать? Разумеется, с документации. К сожалению, раздел, посвящённый 
, даёт лишь очень общие знания об этом процессе, но, по крайней мере, помогает сориентироваться в правильном направлении. Конкретно, мы узнаём о существовании функций, отвечающих за регистрацию и разрегистрацию алгоритмов в ядре. Давайте разбираться:
Эти функции возвращают отрицательное значение в случае ошибки, и 0 — в случае успешного завершения, а (раз)регистрируемый(ые) алгоритм(ы) описываются структурой 
, заглянем в её определение (
):
К счастью, эта структура очень хорошо задокументирована, и нам не придётся гадать о значении того или иного поля:
Недокумментированные оставшиеся поля предназначены для внутреннего использования и не должны заполняться. Вроде бы ничего сложного. Для начала, мы хотим встроить реализацию алгоритма шифрования блока, поэтому взглянем ещё на структуру 
 из союза 
:
Тут всё ещё проще и, как мне кажется, не нуждается в разъяснении. Теперь мы готовы к тому, чтобы посмотреть, как всё это работает на практике. Кстати, обратите внимание на то, что сигнатуры функций в структуре 
 аналогичны сигнатурам функций из 
 нашего алгоритма из 2 части
Пишем модуль ядра. Определяем криптоконтекст и функцию установки ключа в соответствии с сигнатурой 
:
В 
 нашего алгоритма криптоконтекст передавался функциям напрямую, здесь же функции принимают хэндл алгоритма 
, из которого, затем, контекст извлекается с помощью функции 
. Так же, здесь мы проверяем длину переданного ключа. Если длина некорректна, то мы выставляем соответствующий флаг (
) и возвращаем код 
 (22: 
).
Теперь, определяем функцию шифрования блока в соответствии с 
:
Здесь — ничего нового. Так же, как и в оригинальном 
, мы не будем определять дополнительную функцию для расшифровки, а указатель 
 просто проинициализируем функцией 
.
Наконец, определяем экземпляр структуры 
, заполняем её и вызываем функции регистрации и разрегистрации алгоритма, соответсвенно, после загрузки и перед выгрузкой модуля:
Учитывая всё вышесказанное, здесь не должно возникать никаких вопросов. Если, скомпилировав и загрузив такой модуль, выполнить в терминале команду "
", то в выводимом списке зарегистрированных алгоритмов можно отыскать и свой:
Неплохо, а? Но это только начало, и сейчас, я, по идее, должен был перейти к написанию модуля, тестирующего наш алгоритм, но всё же, я решил не смешивать вопросы встраивания и использования. Поэтому тестироваться мы будем позже, а в следующей части мы посмотрим, как можно встроить реализацию нашего алгоритма в режиме сцепления блоков шифра.
Забегу немного вперёд. Внимательный читатель помнит о существовании шаблонов. Так вот, реализовав в прошлой части шифрование блока, мы запросто можем обернуть эту реализацию в шаблон 
 и получть реализацию нашего алгоритма в режиме сцепления блоков шифра, но, протестировав её на моих последовательностях, вызов шифрования в режиме 
 вернёт нам код ошибки 22 (
). И тут самое время вспомнить, что я говорил по поводу обработки неполного блока входных данных и поля 
. Дело в том, что реализация режима 
 ядра понятия не имеет о том, как обрабатывать неполный блок. Более того, оборачивая наш алгоритм в режим 
, ядро регистрирует новый алгоритм, размер блока которого равен размеру блока базового алгоритма. После вызова "апишной" функции зашифрования алгоритмом 
, размер входных данных проверяется на кратность размеру блока и, если они не кратны, функция возвращает 
. Размер тестового вектора для шифрования в режиме 
 (40 байт) умышленно выбран не кратным размеру блока. По моему мнению, если стандартом шифрования предусматривается обработка неполного блока, а реализация этого не делает, то такая реализация едва ли пройдёт проверку на соответствие стандарту, даже если реализация даёт корректный результат, когда условие кратности выполняется (в данном случае, это так). Поэтому, сейчас мы сделаем полную реализацию режима сцепления блоков шифра для нашего алгоритма. Когда я занимался этим 2 года назад, я встраивал алгоритмы с расчётом на их использование через устаревший ныне 
 
, хотя уже тогда предпочтительным считался 
, который, на сегодняшний день, так же устарел. Эту реализацию мы будем делать под актуальный 
.
Изучив документацию и реализации других алгоритмов в ядре своей ОС, я обнаружил, что объявление и регистрация таких алгоритмов существенно отличается от того, как это делалось раньше, и осуществляется при помощи части 
, не отражённой в документации. Но, имея под рукой образец (
), разобраться, что к чему, оказалось не так уж и сложно. Итак, у нас здесь несколько иные функции для регистрации/разрегистрации алгоритмов:
Заглянем в определение структуры 
:
В отличие от документации, в заголовочном файле 
 эта структура задокументирована. Так, эта структура содержит экземпляр уже знакомой нам 
, описывающей алгоритм, здесь же, функции 
 и 
, по своему назначению аналогичны таковым из 
. Новыми, на данный момент, являются поля 
 и 
:
Ещё одну неопознанную структуру мы видим в аргументах функций 
 и 
. Структура 
 содержит данные, необходимые для выполнения операции симметричного шифрования: указатели на входные/выходные данные и синхропосылку, хэндл криптопреобразования и так далее. Напрямую обращаться к полям этой структуры нет необходимости, поскольку для работы с ней существует отдельный 
, но, всё же, в ней есть одна особенность, о которой обязательно нужно упомянуть.
На самом деле, эта особенность касается 
 в целом. Дело в том, что все под-
 шифрования данных произвольной длины работают со входными/выходными данными не через привычные указатели на байтовые массивы (как было в 
 шифрования блока), а через структуры типа 
. Вот, например, функция зашифрования из 
:
Структура 
 так же содержит поля 
 и 
 для входных и выходных данных соответственно. Посмотрим на основные элементы структуры 
:
Экземпляр этой структуры можно проинициализировать указателем на некоторые данные. Например, при помощи вызова функции 
:
Цитируя 
:
Таким образом, криптографическая подсистема работает напрямую со страницами памяти. Но это ещё не всё, посмотрите на следующий пример:
Здесь, 
 и 
 указывают на данные, 
 в памяти. Таким образом, 
 (при помощи специальных вспомогательных структур) в один вызов способно обработать "цепочку" 
-ов, содержащую "рассеянные" (
) данные. Такой подход был 
 заложен в 
 и обусловлен нуждами подсистемы 
:
На самом деле, 
 и связанный с ним 
 ядра являются фундаментальной вещью при организиации ввода/вывода с прямым доступом к памяти (
, 
). Они позволяют эффективно осуществлять операции такого ввода/вывода над непрерывными в виртуальной, но "рассеянными" по физической памяти буферами данных, но, впрочем, 
. 
Теперь можем переходить к реализации. Как и в прошлый раз, начинаем с определения функции установки ключа:
Здесь всё просто. Для режима 
 мы будем работать с тем же типом криптоконтекста (
), что и в случае шифрования блока, поэтому мы просто переиспользовали функцию установки ключа, реализованную ранее.
Пишем функции зашифрования и расшифрования.
Здесь, мы, так сказать, "прогуливаемся" по входным данным при помощи вспомогательной структуры 
 и связанных с ней функций. Сперва, экземпляр 
 инициализируется вызовом 
, а после этого функция 
 пересчитвает для нас указатели на очередную непрерывную "порцию" входных/выходных данных (
 и 
) длины 
, содержащуюся в цепочке 
-ов.
Завершаем заполнением экземпляра структуры 
, и регистрацией/разрегистрацией алгоритма:
Обратите внимание на значение поля 
. Это небольшая хитрость, необходимая для того, чтобы вызов 
 "отдавал" нам последний неполный блок, если такой есть.
Скомпилировав и загрузив модуль, находим в 
 наш алгоритм:
Готовый модуль (исходники 
) регистрирует в ядре два новых алгоритма: "
" (алгоритм шифрования блока) и "
" (реализация в режиме сцепления блоков шифра). На этом, по встраиванию, у меня всё. Для дальнейшего изучения этого вопроса могу лишь порекомендовать исходный код реализаций, которые уже есть в ядре (
), а мы переходим к следующей части.
К сожалению, я не смог придумать более остроумного заголовка для этой части, чем просто "Тестирование", да и, в конце концов, это ведь именно то, чем мы будем здесь заниматься. Хотя, непосредственно, тесты — это лишь форма, за которой стоит суть этого раздела: показать, в целом, как 
 
. Для этого мы напишем и разберём ещё один модуль и пользовательскую программу, выполняющие серию тестов над нашими, встроенными в ядро, алгоритмами.
Начнём с модуля ядра. Для задания тестовых последовательностей введём структуру 
:
Значения полей этой структуры тривиальны: входные данные 
, длиной 
, подаются на вход алгоритма шифрования блока (
) либо шифрования в режиме сцепления блоков шифра (
), с ключом 
 и, где это необходимо, синхропосылкой 
. Полученный резульатат криптопреобразования сравнивается с эталонным значением 
. Значение 
 используется для обозначения окончания массива структур 
.
Ниже — функция тестирования алгоритма шифрования блока:
Эта функция крайне проста, в ней используются вполне очевидные вызовы из 
. Сперва, при помощи функции 
, мы создаём хэндл криптографического преобразования с именем "
". После этого, устанавливаем ключ шифрования (
), и, в зависимости от текущего теста, выполняем операцию зашифрования (
) либо расшифрования (
) блока. В завершение, уничтожаем хэндл (
) и сравниваем результат выполнения криптооперации с эталоном.
С функцией тестирования алгоритма в режиме CBC всё гораздо интереснее.
Самое главное: сейчас мы работает с 
 
 (
), отсюда несколько иной подход к организации процесса.
Смотрим на функцию 
:
Вот с этого момента поподробнее. Поскольку мы имеем дело с неблокирующим 
, то мы можем оказаться в ситуации, когда вызов функции шифрования вернёт управление раньше, чем данные будут непосредственно обработаны. В этом случае, для оповещения о завершении криптооперации, будет вызана функция обратного вызова, предоставленная пользователем. Эта функция и передаваемые ей произвольные пользовательские данные устанавливаются с помощью вызова 
. В нашем примере пользовательские данные имеют тип 
, а функция обратного вызова (
) определена следующим образом:
Структура 
 и связанные с ней функции служат для синхронизации выполнения функции 
 и, непосредственно шифрования. В конце концов, нам необходимо дождаться окончания обработки, и только после этого возвращать управление из 
. Разобравшись с этим, возвращаемся к месту в 
, на котором мы остановились:
Код после 
-a в пояснении не нуждается. На этом всё. Иходный код данного модуля доступен 
, скомпилировав и загрузив этот модуль (при условии, что загружен модуль с самими алгоритмами), в терминале вы получите что-то вроде:
А в журнале ядра (
) появится такая запись:
Кстати, в 
 есть подобный пример использования 
, но он недостаточно подробно прокомментирован. Ещё пример — в упомянутой мной в самом начале статье из "Хакера", но там описан 
, ныне устаревший. И всё-таки, это уже что-то, и заинтересованному читателю есть, где разгуляться.
Пришло время посмотреть, как можно воспользоваться криптографией ядра в пользовательском пространстве. Насчёт этого в документации есть отдельный 
, и, в принципе, его прочтения оказывается достаточно для того, чтобы начать применять эти возможности в своих программах, но это при условии, что вы уже знакомы с интерфейсом сокетов в 
. За примером документация отсылает к библиотеке 
, написанной одним из разработчиков 
 (и соавтором самой документации). Для "общения" с ядром эта библиотека использует 
-интерфейс, она "заворачивает" низкоуровневую работу с 
 в удобный пользовательский 
. Если, в своих приложениях, у вас есть необходимость в криптографии ядра, то я бы рекомендовал использовать именно эту библиотеку, тем более, что она до сих пор поддерживается (текущая версия 1.0.3).
Но мы с вами проделали весь этот путь не ради того, чтобы просто воспользоваться библиотекой. Поэтому, дальше мы посмотрим, каким образом код пользовательского пространства, на самом низком уровне (не ниже системных вызовов), взаимодействует с 
. Свой пример я сделал на основе плагина 
 из 
, его 
 я также рекомендую к ознакомлению.
Итак, поехали. В целом, в тестовой программе я использовал ту же архитектуру, что и в тестовом модуле. Однако, здесь не будет тестирования алгоритма шифрования блока, поскольку существующий интерфейс позволяет обратиться лишь к полноценным блочным шифрам. Таким образом, у нас остаётся только функция 
.
Логика этой функции не должна вызвать вопросов. Мы, как и несколько раз до этого, создаём хэндл, устанавливаем ключ, шифруем данные, уничтожаем хэндл и сравниваем резульат с эталоном. Всё интересное здесь скрыто за структурой 
 и связанными с ней функциями 
. Смотрим дальше.
Идём по коду:
Первый параметр системного вызова 
 определяет семейство протоколов, которые могут быть использованы для "общения" через открытый сокет. Семейство 
 предназначено для взаимодействия с 
. Константа 
, обычно, определена в заголовочном файле 
, если это не так, то её можно определить самостоятельно:
Конкретный алгоритм задаётся заполненим экземпляра структуры 
, указатель на этот экземпляр передаётся вторым аргументом системного вызова 
:
Структура 
 определена следующим образом:
Эта структура нужна лишь для подавления предупреждения компилятора, на самом же деле, её реальный вид определяется семейством протоколов (
), для 
 это:
Мы заполняем три поля:
Если запрашиваемый алгоритм не зарегистрирован в ядре, то 
 вернёт -1, а в переменную 
 будет помещён код ошибки 
.
Таким образом, результатом выполнения функции 
 является открытый сокет, через который можно взаимодействовать с конкретным алгоритмом в ядре. Функция уничтожения хэндла тривиальна и я не буду здесь её приводить.
Теперь посмотрим на функцию установки ключа:
Ключ устанавливается при помощи системного вызова 
, подробнее о параметрах этого вызова можно узнать на соответствующей 
. Я лишь отмечу, что константы 
 и 
, обычно, определены в файлах 
 и 
 соответсвенно, если, на вашей системе, это не так, то их можно определить самостоятельно:
Наконец, переходим к самому главному.
Функция относительно велика, и я опишу её лишь в общих чертах. Здесь есть много структур, наверняка знакомых тем, кто занимается сетевым кодом, но, даже если это не о вас, общая логика происходящего должна быть понятной. В целом, её можно разделить на 3 блока:
Управляющая информация включает в себя тип выполняемой операции (
): зашифрование (
) или расшифрование (
), и синхропосылку (
, 
). Опять же, отмечу, что приведённые константы должны быть определены в файле 
, и, если это не так, то их можно определить следующим образом:
Вот и всё. Исходники этой тестовой программы доступны 
. Скомпилировав и запустив её, вы увидите следующее сообщение:
Но это — при условии, что загружен наш модуль ядра.
Изначально, я планировал разбить эту статью на две части, но, начав работать, оказалось, что объём материала, который я планировал на вторую часть, значительно меньше того, что я подготовил для первой. И всё же, там были довольно интересные вещи, о которых я хотел бы рассказать. Поэтому после заключения я в виде своеобразных заметок кратко расскажу об этих вещах.
А по основной части — у меня всё. Надеюсь, эта статья оказалась для вас полезным или, по крайней мере, увлекательным чтением. Конечно, это далеко не полное руководство по 
. В принципе, по статье можно написать о каждом из существующих под-
, при этом в некоторые из них я ещё даже не заглядывал. Но, с другой стороны, этого должно быть достаточно для того, чтобы продолжить изучение самостоятельно, если в этом есть необходимость.
Буду рад, если вы поможете мне сделать этот материал лучше: своё мнение, замечания и предложения оставляйте здесь, в комментариях, отравляйте мне на 
 или в личные сообщения. Ещё лучше, если свои исправления вы будете предлагать мне прямо на 
. Спасибо за внимание!
Я столько раз говорил о том, что алгоритмы в ядре можно "заворачивать" в шаблоны, но так и не рассказал — 
 это сделать. Самое время это исправить! На самом деле всё очень просто. Допустим, в ядре зарегистрирован наш 
, тогда, что бы воспользоваться этим алгоритмом в шаблонном режиме 
, нужно сделать следующий вызов (для 
, для других — аналогично):
В результате мы получаем хэндл алгоритма 
, завёрнутого в стандартный режим сцепления блоков шифра (
).
"Но постой! — скажете вы. — А что, если наш модуль регистрирует реализацию с именем 
?". "Хорошй вопрос", — отвечу я. В этой ситуации ядро вернёт нам алгоритм из нашего модуля, и всё же мы можем получить шаблонную реализацию.
Когда ядро ищет алгоритм по имени, оно поступает следующим образом:
На третьем шаге ядро перебирает зарегистрированные шаблоны и алгоритмы. На каждой итерации такого перебора ядро пытается "собрать" новый алгоритм из очередного шаблона и алгоритма. Например, для шаблона "
", если имена нашего алгоритма:
То ядро создаст и зарегистрирует алгоритм с именами:
В третьей части, когда мы изучали структуру 
, я упоминал о том, что 
 выбирается 
 для каждой реализации, и по нему также можно запросить алгоритм. Для конкретно этого случая это означает, что, если 
 отлично от "
", то шаблонную реализацию можно получить вызовом:
Кстати, мои тестовые программы и модули выглядят так, как они выглядят, не просто потому что мне так захотелось. Разумеется, в 
 есть модуль, отвечающий за тестирование, и свои я сделал по его образу и подобию.
Этот модуль называется 
 (
) и с ним есть одна проблема. Дело в том, что точка входа и тестирование скорости находятся прямо в 
, а вот реализация тестов известного ответа расположена отдельно, в файле 
. В процессе сборки ядра, 
 чаще всего компилируется статично в ядро и лишь экспортирует в глобальное пространство имён функцию, отвечающую за тестирование (а на моей системе тестирование вовсе отключено в конфигурации ядра).
Из сказанного следует, что просто так добавить свои тесты в 
 не получится. Поэтому я немного "подшаманил" исходники 
 и 
, вынес их из дерева ядра и написал 
, компилирующий их в один модуль — 
. Это добро можно забрать у меня на 
.
Если вы хотите протестировать свой алгоритм в ядре через 
 (тоже самое работает и с 
, только с пересборкой ядра), то просто добавьте соответствующий код в исходники модуля по аналогии с каким-либо алгоритмом того же типа, что и ваш. После этого скомпилируйте и загрузите модуль с нужными параметрами (о параметрах в 
, в репозитории).
Файл 
 также рекомендую как пример использования всех видов преобразований в 
.
Допустим, вы разрабочик 
 операционной системы и вы поддерживаете собственную кастомную ветку ядра. Тогда свою криптографию (если она у вас есть) вы бы также могли поддерживать внутри дерева каталогов исходных кодов ядра.
И с этим нет никаких проблем. Просто разместите файлы с исходным кодом вашего криптографического модуля внутри папки "
" и добавьте соответствующие записи в файлы 
 и 
. Например, если в 
 мы поместили файл 
, то в файл 
 (под строкой 
) добавим нечто вроде:
А в файл 
:
После этого в меню кофнигурации ядра (раздел "
") появится пункт для выбора нашего алгоритма. Это также позволит выбрать для него вариант статичной компиляции в образ ядра, что разумно в ряде случаев.
И не забудьте позаботиться о добавлении соответствующих тестов в 
 и 
.
Литература:
Git:
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

